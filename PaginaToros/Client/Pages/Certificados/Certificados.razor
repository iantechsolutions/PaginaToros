@page "/certificados"
@using Newtonsoft.Json
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@using PaginaToros.Client.Servicios.Contrato;
@using Blazored.Typeahead;
@inject ISocioServicio _socioServicio
@inject ICertifsemanServicio _certifsemanServicio
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }
    .rz-column-title-content {
        white-space: normal !important;
        word-wrap: break-word !important;
    }
    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>
<AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO">
    <Authorized>
<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Certificados de semen</h3>


<button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="position:relative;left:3.33%" @onclick="()=>add(0)">Agregar Certificado</button>



@if (oRespuesta.List != null)
{
            <div class="row">
                <div class="col-3" />
                <div class="col-4">
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" class="max-w-sm" placeholder="Buscar por socio" EnableDropDown="true" @bind-Value="socioSeleccionado">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-5">
                    <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="outline:none; float: right;margin-right:3%;height:100%;" @onclick="()=>PaginaReporte()">Reporte x socio</button>
                    <button style="outline:none; float: right;margin-right:3%;height:100%;" class="no-print px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                    <button class="font-bold px-8 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="outline:none; float: right;margin-right:3%;height:100%;" @onclick="()=>BuscarPorSocio()">Buscar</button>
                </div>
            </div>
    <br />
    <br />
    <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
        <RadzenDataGrid AllowFiltering="allowFiltering" LoadData="LoadData" IsLoading=@isLoading AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                        Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                        Data="@oRespuesta.List" Count="cantotal" TItem="CertifsemanDTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="TipoCert" Title="Tipo cert." Width="6%" >
                    <Template Context="data">
                        @data.TipoCert.ToUpper()
                    </Template>
                 </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Centro.Nombre" Title="Nombre del centro" Width="7.34%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Socio.Nombre" Title="Socio" Width="7.34%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Tatpart" Title="Tatuaje" Width="5.3%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Hba" Title="HBA" Width="5.3%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NomDad" Title="Nombre" Width="8.6%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Apodacion" Title="Apodo" Width="8.6%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrTsan" Title="Tip/ADN" Width="5.3%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrInsd" Title="Nro Macho Dador" Width="7.34%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrDosiOr" Title="Cant. de dosis" Width="6.6%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrDosi" Title="Cant. dosis restantes" Width="7.34%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="TipEnv" Title="Tipo de Envase" Width="7.34%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Variedad" Title="Variedad" Width="5.3%" />
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" position="absolute" title="Editar Certificado" @onclick="() => add(data.Id)"><FeatherEdit Size="16" Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CertifsemanDTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Size="16" Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
                @*            <RadzenDataGridColumn TItem="Estable" Property="" Title="" Filterable="false" Width="30px">
            <Template Context="data">
            <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
            </Template>
            </RadzenDataGridColumn>*@
            </Columns>

        </RadzenDataGrid>
    </div>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
</Authorized>
</AuthorizeView>

<AuthorizeView Roles="Socio">
    <Authorized>
        <h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Certificados de semen</h3>

        @if (oRespuesta.List != null)
        {
            <button style="outline:none; float: right;margin-right:3%;height:100%;" class="px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br />
            <br />
            <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
                <RadzenDataGrid AllowFiltering="allowFiltering" IsLoading=@isLoading AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                                Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                                Data="@oRespuesta.List" TItem="CertifsemanDTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                    <Columns>
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="TipoCert" Title="Tipo cert." Width="6%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Centro.Nombre" Title="Nombre del centro" Width="7.34%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Tatpart" Title="Tatuaje" Width="5.3%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Hba" Title="HBA" Width="5.3%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NomDad" Title="Nombre" Width="8.6%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrTsan" Title="Tip/ADN" Width="5.3%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrInsd" Title="Nro Macho Dador" Width="7.34%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrDosiOr" Title="Cant. de dosis" Width="6.6%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrDosi" Title="Cant. dosis restantes" Width="7.34%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="TipEnv" Title="Tipo de Envase" Width="7.34%" />
                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Variedad" Title="Variedad" Width="5.3%" />
                    </Columns>

                </RadzenDataGrid>
            </div>
            <br />
        }
        else
        {
            <br />
            <center>
                <div class="mb-2">
                    <br />
                    <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
                </div>
            </center>
        }
    </Authorized>
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<CertifsemanDTO>? grid;
    int currentPage;
    int cantotal;
    SocioDTO socioSeleccionado;
    List<SocioDTO> socios = new List<SocioDTO>();
    bool isLoading = false;
    public bool allowFiltering = false;
    List<CentrosiumDTO> centros = new();
    public Respuesta<List<CertifsemanDTO>> oRespuesta = new Respuesta<List<CertifsemanDTO>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var esSocio = await UserHasRole("Socio");

        if (!esSocio){
            var rta = await _socioServicio.LimitadosFiltrados(0, 0);
            socios = rta.List;
            var rt = await _certifsemanServicio.CantidadTotal();
            cantotal = rt.List;
            oRespuesta = await _certifsemanServicio.LimitadosFiltrados(0, 15);
            oRespuesta.List = RemoveDuplicates(oRespuesta.List);
            string s = JsonConvert.SerializeObject(oRespuesta);
            StateHasChanged();
        }
        else
        {
            var usuarioId = 0;
            var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
            var user = authState.User;
            foreach (var claim in user.Claims)
            {
                if (claim.Type == "SocioId")
                {
                    usuarioId = Int32.Parse(claim.Value);
                }

            }
            oRespuesta = await _certifsemanServicio.GetBySocioId(usuarioId);
            cantotal = oRespuesta.List.Count();
        }

    }


    public static List<CertifsemanDTO> RemoveDuplicates(List<CertifsemanDTO> items)
    {
        var seenIds = new HashSet<int>();
        var uniqueItems = new List<CertifsemanDTO>();

        foreach (var item in items)
        {
            var boole = seenIds.Add(item.Id);
            if (boole)  
            {
                uniqueItems.Add(item);
            }
        }
        return uniqueItems;
    }

    private async Task<bool> UserHasRole(string role)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User.IsInRole(role);
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        var response = await _certifsemanServicio.Eliminar(id);
        await grid.Reload();
        if (response)
        {
            oRespuesta.List.Remove(oRespuesta.List.Where(x => x.Id == id).FirstOrDefault());

            if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
            {
                await grid.GoToPage(currentPage - 1);
            }
            else if (grid.Count != 0)
            {
                await grid.GoToPage(currentPage);
            }
            StateHasChanged();
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este certificado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {
        int numero = Id;
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddCertificado.Id), Id);
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge
                    };
                var formModal = Modal.Show<AddCertificado>("Editar Certificado", parameters, options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    if (socioSeleccionado == null)
                    {
                        await Get();
                        await grid.Reload();
                        await grid.GoToPage(currentPage);
                    }
                    else
                    {
                        string filtro = $"Socio.Id={socioSeleccionado.Id}";
                        oRespuesta = await _certifsemanServicio.LimitadosFiltrados(0, 60, filtro);
                        await grid.Reload();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            var formModal = Modal.Show<AddCertificado>("Agregar Certificado", options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                if (socioSeleccionado == null)
                {
                    await RecargarDatos();
                    await grid.GoToPage(currentPage);

                }
                else
                {
                    string filtro = $"Socio.Id={socioSeleccionado.Id}";
                    oRespuesta = await _certifsemanServicio.LimitadosFiltrados(0, 60, filtro);
                    await grid.Reload();
                }
            }
        }
    }






    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        if(socioSeleccionado==null){
            if (!string.IsNullOrEmpty(args.Filter))
            {
                oRespuesta = await _certifsemanServicio.LimitadosFiltrados(args.Skip.Value, args.Top.Value, args.Filter);
                oRespuesta.List = RemoveDuplicates(oRespuesta.List);
                // oRespuesta.List = oRespuesta.List.Where(args.Filter)
            }
            else
            {
                oRespuesta = await _certifsemanServicio.Lista(args.Skip.Value, args.Top.Value);
                oRespuesta.List = RemoveDuplicates(oRespuesta.List);

            }
        }
        else
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                oRespuesta = await _certifsemanServicio.LimitadosFiltrados(args.Skip.Value, args.Top.Value, args.Filter);
                oRespuesta.List = RemoveDuplicates(oRespuesta.List);
                // oRespuesta.List = oRespuesta.List.Where(args.Filter)
            }
            else
            {
                string filtro = $"Socio.Id={socioSeleccionado.Id}";
                oRespuesta = await _certifsemanServicio.LimitadosFiltrados(0, 60,filtro);
                oRespuesta.List = RemoveDuplicates(oRespuesta.List);
            }
        }

        isLoading = false;
    }
    public async Task PaginaReporte()
    {
        nav.NavigateTo($"/reporteprint/0");
    }

    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {
        var result = socios.Where(x => x.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }

    private async Task BuscarPorSocio()
    {
        if (socioSeleccionado != null)
        {
            var coso = new LoadDataArgs();
            coso.Filter = "";
            await LoadData(coso);
        }
        else
        {
            var coso = new LoadDataArgs();
            coso.Skip = 0;
            coso.Top = 15;
            await LoadData(coso);
        }
    }


    public async Task RecargarDatos()
    {
        isLoading = true;
        if (socioSeleccionado != null)
        {
            string filtro = $"Socio.Id={socioSeleccionado.Id}";
            oRespuesta = await _certifsemanServicio.LimitadosFiltrados(0, 60, filtro);
        }
        else
        {
            oRespuesta = await _certifsemanServicio.LimitadosFiltrados(0, 15);
            var rt = await _certifsemanServicio.CantidadTotal();
            cantotal = rt.List;
        }

        oRespuesta.List = RemoveDuplicates(oRespuesta.List);
        isLoading = false;
        await grid.Reload();
    }

}
