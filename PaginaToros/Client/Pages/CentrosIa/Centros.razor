@page "/centros"
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@inject HttpClient Http
<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>
<h3 class="pb-3 font-bold text-xl" style="position:relative;left:50px">Centros de IA</h3>


<button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="position:relative;left:50px" @onclick="()=>add(0)">Agregar Centro</button>



@if (oRespuesta.List != null)
{

    <button style="outline:none; float: right;margin-right:45px;height:100%;" class="px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <div class="tablacontent" style="position:relative;width:1400px;left:50px">
        <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                        Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                        Data="@oRespuesta.List" TItem="CentrosIum" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="CentrosIum" Property="Nrocen" Title="Nro de centro" Width="430px" />
                <RadzenDataGridColumn TItem="CentrosIum" Property="Nombre" Title="Nombre" Width="430px" />
                <RadzenDataGridColumn TItem="CentrosIum" Property="NroCSayg" Title="Nro Secretaria Agric. y Ganaderia" Width="435px" />
                <RadzenDataGridColumn TItem="CentrosIum" Property="" Title="" Filterable="false" Width="50px">
                    <Template Context="data">
                        <button class="btn" position="absolute" title="Editar Establecimiento" @onclick="() => add(data.Id)"><FeatherEdit Size="16" Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CentrosIum" Property="" Title="" Filterable="false" Width="50px">
                    <Template Context="data">
                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Size="16" Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
                @*            <RadzenDataGridColumn TItem="Establecimiento" Property="" Title="" Filterable="false" Width="30px">
            <Template Context="data">
            <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
            </Template>
            </RadzenDataGridColumn>*@
            </Columns>

        </RadzenDataGrid>
    </div>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:1400px" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<CentrosIum>? grid;
    int currentPage;
    public bool allowFiltering = false;
    public string Url = "/api/CentrosIum";
    public Respuesta<List<CentrosIum>> oRespuesta = new Respuesta<List<CentrosIum>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var respuesta = await Http.GetFromJsonAsync<Respuesta<List<CentrosIum>>>(Url);
        respuesta.List = respuesta.List.OrderByDescending(x => x.Id).ToList();
        oRespuesta = respuesta;
        StateHasChanged();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        await Http.DeleteAsync($"/api/CentrosIum/{id}");
        await Get();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este centro",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {
        int numero = Id;
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddCentro.Id), Id);
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge
                    };
                var formModal = Modal.Show<AddCentro>("Editar Centro", parameters, options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            var formModal = Modal.Show<AddCentro>("Agregar Centro", options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }
    // async Task gotoinfo(int id)
    // {
    //     currentPage = grid.CurrentPage;
    //     var parameters = new ModalParameters();
    //     var options = new ModalOptions()
    //         {
    //             HideHeader = true,
    //             HideCloseButton = true,
    //             Size = ModalSize.ExtraLarge
    //         };
    //     parameters.Add(nameof(InfoEstablecimiento.id), id);
    //     var formModal = Modal.Show<InfoEstablecimiento>("", parameters, options);
    //     var result = await formModal.Result;

    //     if (result.Cancelled)
    //     {
    //         Console.WriteLine("Modal was cancelled");
    //         await grid.GoToPage(currentPage);
    //     }
    //     else
    //     {
    //         await Get();
    //         await grid.GoToPage(currentPage);
    //     }
    // }



}
