@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@inject ICentrosiumServicio _centrosiumServicio
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@inject HttpClient http


<style>
    .bm-title {
        font-size: 25px;
        font-weight: bold;
    }
</style>
@if(oRespuesta.List!=null){
<div class="card">
    <div class="card-body">
        <EditForm Model="@oCentrosiumDTO" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Numero de centro</label>
                    <InputText disabled=@(Id != 0) @bind-Value="@oCentrosiumDTO.Nrocen" class="form-control" placeholder="Numero de centro"></InputText>
                    <ValidationMessage For="(()=> oCentrosiumDTO.Nrocen)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Nombre </label>
                    <InputText @bind-Value="@oCentrosiumDTO.Nombre" class="form-control" placeholder="Nombre"></InputText>
                    <ValidationMessage For="(()=> oCentrosiumDTO.Nombre)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Nro segun Secretaria Agric y Ganaderia</label>
                    <InputText @bind-Value="@oCentrosiumDTO.NroCSayg" class="form-control" placeholder="Numero"></InputText>
                    <ValidationMessage For="(()=> oCentrosiumDTO.NroCSayg)" style="color:red;" />
                </div>
            </div>
            <br />
            <br />

            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    CentrosiumDTO oCentrosiumDTO = new();
    List<CentrosiumDTO> Centros = new();
    Respuesta<List<CentrosiumDTO>> oRespuesta = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }

    private ClaimsPrincipal? user;


    protected override async Task OnInitializedAsync()
    {

        var authState1 = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState1.User;

        if (Id != 0)
        {
            try
            {
                string filtro = $"Id = {Id}";
                oRespuesta = await _centrosiumServicio.LimitadosFiltrados(0, 1,filtro);
                oCentrosiumDTO = oRespuesta.List.FirstOrDefault();
            }
            catch (Exception ex)
            {
                oRespuesta.Mensaje = ex.Message;
            }
        }
        else
        {
            oRespuesta = await _centrosiumServicio.Lista(0, 0);
            Centros = oRespuesta.List;
        }
    }
    async Task Guardar()
    {
        if (Id == 0)
        {
            await _centrosiumServicio.Crear(oCentrosiumDTO);




            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {

            await _centrosiumServicio.Editar(oCentrosiumDTO);

            var mail = $"Aviso de edición de centro \nNombre: {oCentrosiumDTO.Nombre} \nNro centro: {oCentrosiumDTO.Nrocen}   \n Nro segun Secretaria Agric y Ganaderia: {oCentrosiumDTO.NroCSayg} ";
            var request = new
            {
                Tipo = "Centro",
                Clase = "Centro",
                Mail = mail,
                Nombre = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value
            };
            HttpResponseMessage response = await http.PostAsJsonAsync($"api/Transan/SendMailChange", request);



            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }



    public class ChangeNotificationModel
    {
        public string Names { get; set; }
        public string Apellido { get; set; }
        public string Email { get; set; }

        public string Tipo { get; set; }
        public string Clase { get; set; }
        public string Detalle { get; set; }
    }


    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}
