@page "/Login"
﻿
@inject HttpClient http
@inject NavigationManager uriHelper
@inject PaginaToros.Client.Auth.ILoginServices loginService
@inject IModalService ModalService

<style>
    body {
        background-image: url("/images/background.jpg");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        width:100%;
    }

</style>

<div class="login-page">
    <div class="form">
        <center>
            <img class="img" src="images/logo_AACH.png" alt="Logo">
        </center>

        <form class="login-form">
            <input type="text" @bind-value="@userInfo.UserName" placeholder="Usuario" />
            <input type="password" @bind-value="@userInfo.Password" placeholder="Contraseña" />
            <button type="button" @onclick="Loger">Acceder</button>
            <p class="message">¿no está registrado? <a href="#">Cree su cuenta</a></p>
        </form>
    </div>
</div>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private UserLogin userInfo = new UserLogin();
    private async Task Loger()
    {
        var options = new ModalOptions()
            {
                Position = ModalPosition.Middle,
                HideCloseButton=true,
            };
        var modal = Modal.Show<ModalWait>("", options);
        var result = await http.PostAsJsonAsync<UserLogin>($"{http.BaseAddress}api/Account/Login", userInfo);
        if (result.IsSuccessStatusCode)
        {
            await loginService.Login(result.Content.ReadAsStringAsync().Result);
            uriHelper.NavigateTo("/");
        }
        else
        {
            modal.Close();
            Modal.Show<ModalInfo>("Error", SharedModalOptions.SetParameterModalInfo(result.Content.ReadAsStringAsync().Result, "alert alert-danger"), SharedModalOptions.modalOptionsInfo);
        }

    }

}