@attribute [Authorize(Roles = "USUARIOMAESTRO, ADMINISTRADOR")]
@page "/RegistroUsuario"
@using System.Text
@inject HttpClient http
@inject NavigationManager uriHelper

<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Registro de usuario</h3>
<br />

<AuthorizeView Roles="USUARIOMAESTRO,ADMINISTRADOR">
    <UserEditForm User="User"
                  EventCallback="CreateUser" />
</AuthorizeView>

@code {
    User User { get; set; } = new() { Status = "ACTIVO" };

    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private readonly Random random = new();

    private async Task CreateUser()
    {
        // NO PISAR CAMPOS ACÁ
        Console.WriteLine($"Enviando usuario: {JsonSerializer.Serialize(User)}");

        var wait = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);

        try
        {
            var pswd = GenerateRandomPassword(random.Next(10, 14)); // MAYÚSCULAS

            // crear usuario en Identity + tu tabla User
            var result = await http.PostAsJsonAsync($"api/Account/CreateUser?password={Uri.EscapeDataString(pswd)}", User);

            if (!result.IsSuccessStatusCode)
            {
                wait.Close();

                var raw = await result.Content.ReadAsStringAsync();
                var friendly = MapIdentityErrorToFriendly(raw);

                if (friendly == "DUPLICATE_EMAIL")
                {
                    Modal.Show<ModalInfo>("Advertencia",
                        SharedModalOptions.SetParameterModalInfo(
                            "Este mail ya esta registrado en el sistema, por favor hacer el restablecimiento de contraseña.",
                            "alert alert-warning"),
                        SharedModalOptions.modalOptionsInfo);
                }
                else
                {
                    // fallback: mostramos lo que vino del backend (limpio)
                    Modal.Show<ModalInfo>("Error",
                        SharedModalOptions.SetParameterModalInfo(friendly, "alert alert-danger"),
                        SharedModalOptions.modalOptionsInfo);
                }
                return;
            }



            var mailResp = await http.PostAsJsonAsync($"api/Account/SendMail2025?password={Uri.EscapeDataString(pswd)}", User);

            wait.Close();

            if (mailResp.IsSuccessStatusCode)
            {
                Modal.Show<ModalInfo>("Operación Exitosa",
                    SharedModalOptions.SetParameterModalInfo("Usuario creado y correo enviado.", "alert alert-success"),
                    SharedModalOptions.modalOptionsInfo);
                uriHelper.NavigateTo("/Usuarios");
            }
            else
            {
                var m = await mailResp.Content.ReadAsStringAsync();
                Modal.Show<ModalInfo>("Advertencia",
                    SharedModalOptions.SetParameterModalInfo($"Usuario creado, pero falló el envío de mail.\n{m}", "alert alert-warning"),
                    SharedModalOptions.modalOptionsInfo);
            }
        }
        catch (Exception ex)
        {
            wait.Close();
            Modal.Show<ModalInfo>("Error inesperado",
                SharedModalOptions.SetParameterModalInfo(ex.Message, "alert alert-danger"),
                SharedModalOptions.modalOptionsInfo);
        }
    }

    // Password SIEMPRE en MAYÚSCULAS + dígitos
    public static string GenerateRandomPassword(int length)
    {
        const string UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string DIGITS = "0123456789";
        string ALL = UPPER + DIGITS;

        using var rng = System.Security.Cryptography.RandomNumberGenerator.Create();
        int Next(int max)
        {
            Span<byte> b = stackalloc byte[4];
            rng.GetBytes(b);
            return (int)(BitConverter.ToUInt32(b) % (uint)max);
        }

        var sb = new StringBuilder();
        sb.Append(UPPER[Next(UPPER.Length)]);
        sb.Append(DIGITS[Next(DIGITS.Length)]);

        while (sb.Length < Math.Max(length, 10))
            sb.Append(ALL[Next(ALL.Length)]);

        var arr = sb.ToString().ToCharArray();
        for (int i = 0; i < arr.Length; i++)
        {
            int j = Next(arr.Length);
            (arr[i], arr[j]) = (arr[j], arr[i]);
        }
        return new string(arr);
    }


    private sealed class IdentityErrorDto
    {
        public string? Code { get; set; }
        public string? Description { get; set; }
    }

    private static string MapIdentityErrorToFriendly(string raw)
    {
        try
        {
            // Identity a veces devuelve: [{"code":"DuplicateUserName","description":"..."}]
            var opts = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var list = JsonSerializer.Deserialize<List<IdentityErrorDto>>(raw, opts);

            if (list != null && list.Count > 0)
            {
                if (list.Any(e =>
                    string.Equals(e.Code, "DuplicateUserName", StringComparison.OrdinalIgnoreCase) ||
                    string.Equals(e.Code, "DuplicateEmail", StringComparison.OrdinalIgnoreCase)))
                {
                    return "DUPLICATE_EMAIL";
                }

                // Otros errores: devolvemos descripciones concatenadas
                return string.Join("<br/>", list.Where(e => !string.IsNullOrWhiteSpace(e?.Description))
                                                .Select(e => e!.Description));
            }
        }
        catch
        {
            // Si no era JSON de Identity, seguimos abajo con heurística simple
        }

        if (raw.Contains("DuplicateUserName", StringComparison.OrdinalIgnoreCase) ||
            raw.Contains("DuplicateEmail", StringComparison.OrdinalIgnoreCase))
        {
            return "DUPLICATE_EMAIL";
        }

        return raw; 
    }
}
