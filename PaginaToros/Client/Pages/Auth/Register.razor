@attribute [Authorize(Roles = "USUARIOMAESTRO, ADMINISTRADOR")]
@page "/RegistroUsuario"
@using System.Text
@inject HttpClient http
@inject NavigationManager uriHelper

<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Registro de usuario</h3>
<br/>

<AuthorizeView Roles="USUARIOMAESTRO,ADMINISTRADOR">
    <UserEditForm User="User" EventCallback="CreateUser" />
</AuthorizeView>


@code {
    User User { get; set; } = new User() { Status = "ACTIVO" };
    [CascadingParameter] public IModalService Modal { get; set; }
    private const string validChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    Random random = new Random();

    private async Task CreateUser()
    {
        Console.WriteLine($"Enviando usuario: {JsonSerializer.Serialize(User)}");

        User.Phone = User.Email;
        User.Names = User.Email;
        User.Dni = User.Email;
        User.LastNames = User.Email;

        var modal = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);
        var pswd = GenerateRandomPassword(random.Next(7, 11));

        var result = await http.PostAsJsonAsync<User>($"api/Account/CreateUser?password={pswd}", User);

        switch (result.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                // Si la creación fue exitosa, recién enviamos el mail
                var result2 = await http.PostAsJsonAsync<User>($"api/Account/SendMail2025?password={pswd}", User);
                uriHelper.NavigateTo("/Usuarios");
                break;
            case System.Net.HttpStatusCode.Unauthorized:
                uriHelper.NavigateTo("/Logout");
                break;
            default:
                modal.Close();
                Modal.Show<ModalInfo>("Error", SharedModalOptions.SetParameterModalInfo(await result.Content.ReadAsStringAsync(), "alert alert-danger"), SharedModalOptions.modalOptionsInfo);
                break;
        }
    }


    public string GenerateRandomPassword(int length)
    {
        StringBuilder sb = new StringBuilder();
        

        for (int i = 0; i < length; i++)
        {
            int randomIndex = random.Next(validChars.Length);
            sb.Append(validChars[randomIndex]);
        }

        return sb.ToString();
    }

}
