@*@attribute [Authorize(Roles = "USUARIOMAESTRO")]*@
@page "/RegistroUsuario"
@inject HttpClient http
@inject NavigationManager uriHelper

<h3 class="pb-3 font-bold text-xl" style="position:relative;left:50px">Registro de Usuario</h3>
<br/>

@*<AuthorizeView Roles="USUARIOMAESTRO,ADMINISTRADOR">*@
    <UserEditForm Usuario="Usuario" EventCallback="CreateUser" />
@*</AuthorizeView>*@


@code {
    Usuario Usuario { get; set; } = new Usuario() { Status = "ACTIVO" };
    [CascadingParameter] public IModalService Modal { get; set; }

    private async Task CreateUser()
    {
        var modal = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);
        var result = await http.PostAsJsonAsync<Usuario>("api/Account/CreateUser", Usuario);
        switch (result.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                uriHelper.NavigateTo("/Usuarios");
                break;
            case System.Net.HttpStatusCode.Unauthorized:
                uriHelper.NavigateTo("/Logout");
                break;
            default:
                modal.Close();
                Modal.Show<ModalInfo>("Error", SharedModalOptions.SetParameterModalInfo(result.Content.ReadAsStringAsync().Result, "alert alert-danger"), SharedModalOptions.modalOptionsInfo);
                break;
        }
    }


}
