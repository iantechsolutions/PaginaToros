@page "/Usuarios"
@inject HttpClient http
@inject NavigationManager uriHelper
@using Radzen
@using Radzen.Blazor
@using System.Text.Json
@using System.Linq

<style>
    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>

<br />
<center>
    <AuthorizeView>
        <h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Usuarios</h3>
        <br />

        <div class="tablacontent" style="position:relative;width:80%;">
            <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="CambiarModoFiltro">
                <FeatherFilter Color="Black"></FeatherFilter>
            </button>
            <br />

            <RadzenDataGrid TItem="User"
                            Data="@Usuarios"
                            Count="@count"
                            FilterDelay="500"
                            LoadData="@LoadUsers"
                            AllowFiltering="@allowFiltering"
                            FilterMode="FilterMode.Simple"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            AllowSorting="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="true"
                            AllowPaging="true"
                            PageSize="5"
                            ShowPagingSummary="true"
                            ColumnWidth="3.33%">
                <Columns>
                    <RadzenDataGridColumn TItem="User" Property="Names" Title="Nombre/s" Width="15%" Filterable="true" />
                    <RadzenDataGridColumn TItem="User" Property="LastNames" Title="Apellido/s" Width="15%" Filterable="true" />
                    <RadzenDataGridColumn TItem="User" Property="Dni" Title="DNI" Width="12%" Filterable="true" />
                    <RadzenDataGridColumn TItem="User" Property="Phone" Title="Número" Width="12%" Filterable="true" />
                    <RadzenDataGridColumn TItem="User" Property="Rol" Title="Rol" Width="12%" Filterable="true" />
                    <RadzenDataGridColumn TItem="User" Property="Status" Title="Estado" Width="12%" Filterable="true" />
                    <RadzenDataGridColumn TItem="User" Property="Email" Title="Email" Width="20%" Filterable="true" />
                    <RadzenDataGridColumn TItem="User" Title="" Width="7%">
                        <Template Context="data">
                            <button class="btn" title="Eliminar" @onclick="@(()=>uriHelper.NavigateTo($"/EliminarUsuario/{data.Id}"))">
                                <FeatherTrash2 Color="red" />
                            </button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="User" Title="" Width="7%">
                        <Template Context="data">
                            <button class="btn" title="Info" @onclick="@(()=> ShowDetails(data))">
                                <FeatherInfo Color="blue" />
                            </button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </AuthorizeView>
</center>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private IList<User> Usuarios = new List<User>();
    private int count = 0;

    private bool allowFiltering = false;

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    private static string FirstNonEmpty(params string?[] values)
    => values.FirstOrDefault(v => !string.IsNullOrWhiteSpace(v)) ?? string.Empty;

    private async Task LoadUsers(LoadDataArgs args)
    {
        
        // --- FIX CS0266: args.Top/Skip son int? ---
        var top = args.Top ?? 5;  // debe coincidir con PageSize
        var skip = args.Skip ?? 0;

        int pageLocal = (skip > 0 && top > 0) ? (skip / top) + 1 : 1;

        // --- FIX CS8121: no usamos CompositeFilterDescriptor, leemos desde args.Columns ---
        var emailFilter = GetColumnFilter(args, "Email") ?? string.Empty;
        var namesFilter = GetColumnFilter(args, "Names") ?? string.Empty;
        var lastFilter = GetColumnFilter(args, "LastNames") ?? string.Empty;
        var dniFilter = GetColumnFilter(args, "Dni") ?? string.Empty;
        var statusFilter = GetColumnFilter(args, "Status") ?? string.Empty;
        var globalFilter = args.Filter ?? string.Empty;

        string search = FirstNonEmpty(emailFilter, namesFilter, lastFilter, dniFilter, globalFilter);

        string searchParam = string.IsNullOrWhiteSpace(search) ? "TODO" : search;
        string statusParam = string.IsNullOrWhiteSpace(statusFilter) ? "TODO" : statusFilter;

        // El filtro global (si lo usás) lo consideramos como 'search' solo si no hay email específico

        if (!string.IsNullOrWhiteSpace(search) && search.Length < 2)
        {
            return;
        }

        try
        {
            var resp = await http.GetAsync($"api/Account/GetUsers/{Uri.EscapeDataString(searchParam)}/{Uri.EscapeDataString(statusParam)}/{pageLocal}");
            var payload = await resp.Content.ReadAsStringAsync();

            if (resp.IsSuccessStatusCode)
            {
                var wrapper = JsonSerializer.Deserialize<ResponseForList>(payload);
                if (wrapper is null)
                {
                    Usuarios = new List<User>();
                    count = 0;
                }
                else
                {
                    Usuarios = JsonSerializer.Deserialize<IList<User>>(wrapper.EntitiesPricipal) ?? new List<User>();
                    count = wrapper.AllRegisters;
                }
            }
            else if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Usuarios = new List<User>();
                count = 0;
            }
            else if (resp.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                uriHelper.NavigateTo("/Logout");
            }
            else
            {
                Modal.Show<ModalInfo>("Error",
                    SharedModalOptions.SetParameterModalInfo(payload, "alert alert-danger"),
                    SharedModalOptions.modalOptionsInfo);
            }
        }
        catch (Exception ex)
        {
            Modal.Show<ModalInfo>("Error",
                SharedModalOptions.SetParameterModalInfo(ex.Message, "alert alert-danger"),
                SharedModalOptions.modalOptionsInfo);
        }
        finally
        {

            StateHasChanged();
        }
    }

    private static string? GetColumnFilter(LoadDataArgs args, string propertyName)
    {
        if (args.Filters == null) return null;

        foreach (var fd in args.Filters.OfType<FilterDescriptor>())
        {
            if (string.Equals(fd.Property, propertyName, StringComparison.OrdinalIgnoreCase))
                return fd.FilterValue?.ToString();
        }

        return null;
    }

    private void ShowDetails(User usuario)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DetailsUsuario.Usuario), usuario);

        Modal.Show<DetailsUsuario>("Detalles Del Usuario", parameters, new ModalOptions { });
    }

    private class ResponseForList
    {
        public string EntitiesPricipal { get; set; } = "[]";
        public int AllRegisters { get; set; }
        public int ActualPage { get; set; }
    }
}
