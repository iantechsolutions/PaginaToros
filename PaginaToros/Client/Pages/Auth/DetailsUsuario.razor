@using System.Text
@attribute [Authorize(Roles = "USUARIOMAESTRO, ADMINISTRADOR")]
@inject HttpClient http
@inject NavigationManager uriHelper
<AuthorizeView Roles="USUARIOMAESTRO,ADMINISTRADOR">
    <div class="row" style="overflow-y: auto; max-height: 63.33%;">
        @* <UserInfo Usuario="Usuario" /> *@
        <div class="col-md-6">
            <dl>
                <dt>Nombres:</dt>
                <dd>@Usuario.Names</dd>

                <dt>Apellidos:</dt>
                <dd>@Usuario.LastNames</dd>

                <dt>Dni:</dt>
                <dd>@Usuario.Dni</dd>

                <dt>Email:</dt>
                
                <dd>
                    <div>
                        <input type="text" class="form-control" placeholder="example@mail.com" @bind="email">

                    </div>
                </dd>
            </dl>
        </div>

        <div class="col-md-6">
            <dl>
                <dt>Rol:</dt>
                <dd>@Usuario.Rol</dd>

                <dt>Télefono:</dt>
                <dd>@Usuario.Phone</dd>

                <dt>Estatus:</dt>
                <dd>@Usuario.Status</dd>
            </dl>
        </div>
    </div>
    <br />
    @* <button @onclick="()=>ModalInstance.CancelAsync" class="btn btn-secondary">Cerrar</button> *@
    <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent 
transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" disabled="@disabled"
    @onclick="()=>ResetPass()">Reiniciar contraseña</button>


    <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent
    transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" 
    @onclick="()=>ChangeEmail()">Cambiar mail</button>

    @* @if (context.User.Claims.Count()>0 && context.User.Claims.First(x => x.Type == "UserId").Value == Usuario.Id.ToString())
    {
        logout = true;
    } *@
</AuthorizeView>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private const string validChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    Random random = new Random();
    bool disabled = false;
    [Parameter] public User Usuario { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    bool logout = false;
    string email = "";

    protected override async Task OnInitializedAsync()
    {
        if(Usuario == null)
        {
            Usuario = new User();
        }
        email = Usuario.Email;
        Console.WriteLine(Usuario.Email);
    }

    public class ResetPasswordModel
    {
        public int UserId { get; set; }
        public string Password { get; set; }
        public string Email { get; set; }
    }
    public class ResetEmailModel
    {
        public int UserId { get; set; }
        public string email { get; set; }
    }
    public string GenerateRandomPassword(int length)
    {
        StringBuilder sb = new StringBuilder();


        for (int i = 0; i < length; i++)
        {
            int randomIndex = random.Next(validChars.Length);
            sb.Append(validChars[randomIndex]);
        }

        return sb.ToString();
    }


    private async Task ChangeEmail()
    {
        Console.WriteLine($"Email anterior: {Usuario.Email}");
        Console.WriteLine($"Nuevo email: {email}");

        if (email == Usuario.Email)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Modifique el mail para poder realizar el cambio",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                });
            return; // Salimos si no se cambió el email
        }

        // Confirmación antes de continuar
        var confirmResult = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de realizar el cambio y enviar el mail?",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, enviar",
                CancelButtonText = "Cancelar"
            });

        if (!confirmResult.IsConfirmed) return;

        disabled = true;
        var pswd = GenerateRandomPassword(random.Next(7, 11));
        Usuario.Email = email;

        Console.WriteLine($"Editando usuario: {JsonSerializer.Serialize(Usuario)}");

        // Editar el usuario
        var editResult = await http.PostAsJsonAsync($"api/Account/EditUser?password={pswd}", Usuario);
        if (!editResult.IsSuccessStatusCode)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Error al editar el usuario.",
                    Icon = "error",
                    ConfirmButtonText = "Aceptar"
                });
            return;
        }

        // Resetear contraseña
        var payload = new ResetPasswordModel { UserId = Usuario.Id, Password = pswd, Email = Usuario.Email };
        var resetResult = await http.PutAsJsonAsync("api/Account/ResetPassword", payload);
        if (!resetResult.IsSuccessStatusCode)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "No se pudo resetear la contraseña.",
                    Icon = "error",
                    ConfirmButtonText = "Aceptar"
                });
            return;
        }

        // Enviar mail de restablecimiento
        var sendMailResult = await http.PostAsJsonAsync<User>($"api/Account/SendResetMail?nuevaContraseña={pswd}", Usuario);
        if (!sendMailResult.IsSuccessStatusCode)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "No se pudo enviar el mail de restablecimiento.",
                    Icon = "error",
                    ConfirmButtonText = "Aceptar"
                });
            return;
        }

        // Si todo fue exitoso
        var modal = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);
        modal.Close();

        Modal.Show<ModalInfo>("Operación Exitosa", SharedModalOptions.SetParameterModalInfo("El cambio de email y el envío del mail fueron exitosos.", "alert alert-success"), SharedModalOptions.modalOptionsInfo);

        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Éxito",
                Text = "El cambio de mail se realizó con éxito.",
                Icon = "success",
                ConfirmButtonText = "Aceptar",
            });
    }


    private async Task ResetPass()
    {
        disabled = true;
        var pswd = GenerateRandomPassword(random.Next(7, 11));
        Console.WriteLine(1);
        var modal = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);
        Console.WriteLine(2);
        var payload = new ResetPasswordModel { UserId = Usuario.Id, Password = pswd };
        Console.WriteLine(3);
        var result = await http.PutAsJsonAsync<ResetPasswordModel>("api/Account/ResetPassword", payload);
        Console.WriteLine(4);
        var result2 = await http.PostAsJsonAsync<User>($"api/Account/SendResetMail?nuevaContraseña={pswd}", Usuario);
        Console.WriteLine(5);
        switch (result.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                if (logout)
                {
                    uriHelper.NavigateTo("/Logout");
                }
                else
                {
                    modal.Close();
                    Modal.Show<ModalInfo>("Operación Exitosa", SharedModalOptions.SetParameterModalInfo(Utilities.MSGSUCCESS, "alert alert-success"), SharedModalOptions.modalOptionsInfo);
                }
                break;
            case System.Net.HttpStatusCode.Unauthorized:
                uriHelper.NavigateTo("/Logout");
                break;
            default:
                modal.Close();
                Modal.Show<ModalInfo>("Error", SharedModalOptions.SetParameterModalInfo(result.Content.ReadAsStringAsync().Result, "alert alert-danger"), SharedModalOptions.modalOptionsInfo);
                break;
        }

        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Exito",
                Text = "Reinicio de contraseña exitoso",
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",

            });

        disabled = false;
    }


}
