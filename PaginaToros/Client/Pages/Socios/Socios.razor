@page "/socios"
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@using PaginaToros.Client.Servicios.Contrato;
@inject ISocioServicio _socioServicio
@using Blazored.Typeahead
<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Socios</h3>


<button style="position:relative;left:3.33%" class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick='()=>add(0,"0")'>Agregar Socio</button>
<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 11.5px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
        overflow-wrap: break-word;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>

@if (oRespuesta.List != null)
{
    <button style="outline:none; float: right;margin-right:3%;height:100%;" class="px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <RadzenDataGrid class="tablacontent" IsLoading="isLoading" LoadData="LoadData" style="position:relative;width:93.5%;left:3.33%" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                    Density="Density.Compact" Count="cantidad" Data="@oRespuesta.List" TItem="SocioDTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
        <Columns>
            <RadzenDataGridColumn TItem="SocioDTO" Property="Scod" Title="Nro Socio" Width="3.6%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Placod" Title="Plantel" Width="3%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Criador" Title="Activo?" Width="3.33%">
                <Template Context="data">
                    @if (data.Criador=="S")
                    {
                        <a style="color:green">Si</a>
                    }
                    else
                    {
                        <a style="color:red">No</a>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SocioDTO" Property="Nombre" Title="Nombre" Width="9.3%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Direcc1" Title="Domicilio" Width="5.6%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Locali1" Title="Localidad" Width="6.6%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Codpos1" Title="Cod. Postal" Width="4.3%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Provincia.Nombre" Title="Provincia" Width="5%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Telefo1" Title="Telefono" Width="5%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="Mail" Title="Mail" Width="6.6%" />
            <RadzenDataGridColumn TItem="SocioDTO" Property="FechaExistencia" Title="Fecha de Creacion" Width="6.6%">
                <Template Context="data">
                    @if(data.Fecing.HasValue){
                        @data.Fecing.Value.ToString("dd/MM/yyyy")
                    }
                    else{

                    }
                </Template>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="SocioDTO" Property="" Title="" Filterable="false" Width="3%">
                <Template Context="data">
                    <button class="btn" position="absolute" title="Editar Socio" @onclick="() => add(data.Id,data.Scod)"><FeatherEdit Size="16" Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SocioDTO" Property="" Title="" Filterable="false" Width="3%">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id,data.Scod)"><FeatherTrash2 Size="16" Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SocioDTO" Property="" Title="" Filterable="false" Width="3%">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id,data.Scod)"><FeatherInfo Size="16" Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {


    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<SocioDTO>? grid;
    int currentPage;
    bool isLoading = false;
    int cantidad;
    public bool allowFiltering = false;

    public Respuesta<List<SocioDTO>> oRespuesta = new Respuesta<List<SocioDTO>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var c = await _socioServicio.CantidadTotal();
        cantidad = c.List;
        oRespuesta = await _socioServicio.LimitadosFiltradoTodos(0, 15);
        // oRespuesta = oRespuesta.List.ord
        StateHasChanged();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id, string cod)
    {
        currentPage = grid.CurrentPage;
        var response = await _socioServicio.Eliminar(id);
        await grid.Reload();
        if (response)
        {
            if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
            {
                await grid.GoToPage(currentPage - 1);
            }
            else if (grid.Count != 0)
            {
                await grid.GoToPage(currentPage);
            }
        }

    }

    public async Task alertaDelete(int id, string cod)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará al socio",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id,cod);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id, string cod)
    {
        int numero = Id;
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddSocio.Id), Id);
                parameters.Add(nameof(AddSocio.cod), cod);
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge
                    };
                var formModal = Modal.Show<AddSocio>("Editar Socio", parameters, options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddSocio.Id), Id);
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            parameters.Add(nameof(AddSocio.cod), cod);
            var formModal = Modal.Show<AddSocio>("Agregar Socio", parameters,options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }

    async Task gotoinfo(int id, string cod)
    {
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true,
                Size = ModalSize.ExtraLarge
            };
        parameters.Add(nameof(InfoSocio.id), id);
        var formModal = Modal.Show<InfoSocio>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        if (!string.IsNullOrEmpty(args.Filter))
        {
            oRespuesta = await _socioServicio.LimitadosFiltradoTodos(args.Skip.Value, args.Top.Value, args.Filter);
            // oRespuesta.List = oRespuesta.List.Where(args.Filter)
        }
        else
        {
            oRespuesta = await _socioServicio.LimitadosFiltradoTodos(args.Skip.Value, args.Top.Value);
        }

        isLoading = false;
    }

}
