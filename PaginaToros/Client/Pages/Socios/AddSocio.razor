@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@inject ISocioServicio _socioServicio
<style>
    .bm-title{
        font-size:25px;
        font-weight: bold;
    }
</style>
<div class="card" >
    <div class="card-body">
        <EditForm Model="@oSocio" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Nombre Completo</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Nombre"
                               placeholder="Nombre"></InputText>
                    <ValidationMessage For="(()=> oSocio.Nombre)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Domicilio</label>
                    <InputText @bind-Value="@oSocio.Direcc1" class="form-control" placeholder="Domicilio"></InputText>
                    <ValidationMessage For="(()=> oSocio.Direcc1)" style="color:red;" />
                </div
                <div class="col-sm">
                    <label class="col-sm">Localidad</label>
                    <InputText @bind-Value="@oSocio.Locali1" class="form-control" placeholder="Localidad"></InputText>
                    <ValidationMessage For="(()=> oSocio.Locali1)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Codigo Postal</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Codpos1" placeholder="Cod. Postal"></InputText>
                    <ValidationMessage For="(()=> oSocio.Codpos1)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Provincia</label>
                    <BlazoredTypeahead SearchMethod="@(text=> SearchMethod(text,provincias))" placeholder="Busca por nombre"  EnableDropDown="true" @bind-Value="tempProvincia">
                        <SelectedTemplate Context="eleccion">
                            @eleccion
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div
                <div class="col-sm">
                    <label class="col-sm">Telefono</label>
                    <InputText @bind-Value="@oSocio.Telefo1" class="form-control" placeholder="Telefono"></InputText>
                    <ValidationMessage For="(()=> oSocio.Telefo1)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>2do Telefono</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Telefo2" placeholder="2do telefono"></InputText>
                    <ValidationMessage For="(()=> oSocio.Telefo2)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Mail</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Mail" placeholder="Mail"></InputText>
                    <ValidationMessage For="(()=> oSocio.Mail)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Activo?</label><br/>
                    <input type="checkbox" @bind="@activo">
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Fecha de Ingreso</label><br/>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaTemp" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
                <div class="col-sm">
                    <label>Plantel</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Placod" placeholder="Plantel"></InputText>
                    <ValidationMessage For="(()=> oSocio.Placod)" style="color:red;" /> 
                </div>
                <div class="col-sm"/>
            </div>
            <br />
            <br />
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
@code {
    SocioDTO oSocio = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public string cod { get; set; }
    DateTime FechaTemp = DateTime.Now.Date;
    public string tempProvincia = "";
    bool activo = true;
    List<string> provincias = new List<string> { "Buenos Aires", "Capital Federal","Catamarca","Chaco","Chubut","Cordoba","Corrientes","Entre Rios","Formosa",
    "Jujuy","La pampa","La rioja","Mendoza","Misiones","Neuquen","Rio negro","Salta","San Juan","San Luis","Santa Cruz","Santa Fe","Santiago Del Estero",
    "Tierra del fuego","Tucuman" };
    Dictionary<string, string> traductorProvincia = new Dictionary<string, string>
    {
        {"Chaco","01"},
        {"Corrientes","02"},
        {"Entre Rios","03"},
        {"Santa Fe","04"},
        {"Cordoba","05"},
        {"La pampa","06"},
        {"San Luis","07"},
        {"Santa Cruz","08"},
        {"Tierra del fuego","09"},
        {"Chubut","10"},
        {"Neuquen","11"},
        {"Rio negro","12"},
        {"Buenos Aires","13"},
        {"Capital Federal","14"},
        {"Catamarca","15"},
        {"Formosa","16"},
        {"Jujuy","17"},
        {"La rioja","18"},
        {"Mendoza","19"},
        {"Misiones","20"},
        {"Salta","21"},
        {"San Juan","22"},
        {"Santiago Del Estero","23"},
        {"Tucuman","24"},
        {"",""}
    };
    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            try
            {
                var c = await _socioServicio.Lista(0,1000000);
                oSocio = c.List.Where(x=>x.Id==Id).FirstOrDefault();

                if (oSocio.Criador == "S")
                {
                    activo = true;
                }
                else
                {
                    activo = false;
                }

                if (oSocio.Fecing.HasValue)
                {
                    FechaTemp = oSocio.Fecing.Value;
                }

            }
            catch (Exception ex)
            {
            }
        }
    }
    async Task Guardar()
    {
        oSocio.Scod = cod;
        oSocio.Codpro1 = traductorProvincia[tempProvincia];
        oSocio.Fecing = FechaTemp;
        if (activo)
        {
            oSocio.Criador = "S";
        }
        else
        {
            oSocio.Criador = "N";
        }
        if (Id == 0)
        {
            await _socioServicio.Crear(oSocio);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await _socio.Editar(oSocio);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    private async Task<IEnumerable<string>> SearchMethod(string searchText,List<string> lista)
    {
        var result = lista.Where(x => x.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }

}
