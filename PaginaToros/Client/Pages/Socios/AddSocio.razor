@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@using System.Text
@inject HttpClient http
@inject NavigationManager uriHelper
@inject ISocioServicio _socioServicio
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .bm-title{
        font-size:25px;
        font-weight: bold;
    }
</style>
<div class="card" >
    <div class="card-body">
        <EditForm Model="@oSocio" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                 <AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO">
                    <Authorized Context="authContext"> 
                <div class="col-sm">
                    <label>Codigo de Socio</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Scod"
                               placeholder="Codigo"></InputText>
                    <ValidationMessage For="(()=> oSocio.Scod)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Nombre Completo</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Nombre"
                               placeholder="Nombre"></InputText>
                    <ValidationMessage For="(()=> oSocio.Nombre)" style="color:red;" />
                </div>
                 </Authorized>
                </AuthorizeView>
                 <AuthorizeView Roles="Socio">
                    <Authorized Context="authContext"> 
                        <div class="col-sm">
                            <label>Codigo de Socio</label>
                            <InputText class="form-control" @bind-Value="@oSocio.Scod"
                                       placeholder="Codigo" disabled="true"></InputText>
                            <ValidationMessage For="(()=> oSocio.Scod)" style="color:red;" />
                        </div>
                        <div class="col-sm">
                            <label>Nombre Completo</label>
                            <InputText class="form-control" @bind-Value="@oSocio.Nombre"
                                       placeholder="Nombre" disabled="true"></InputText>
                            <ValidationMessage For="(()=> oSocio.Nombre)" style="color:red;" />
                        </div>
                    </Authorized>
                </AuthorizeView>
                <div class="col-sm">
                    <label class="col-sm">Domicilio</label>
                    <InputText @bind-Value="@oSocio.Direcc1" class="form-control" placeholder="Domicilio"></InputText>
                    <ValidationMessage For="(()=> oSocio.Direcc1)" style="color:red;" />
                </div
                <div class="col-sm">
                    <label class="col-sm">Localidad</label>
                    <InputText @bind-Value="@oSocio.Locali1" class="form-control" placeholder="Localidad"></InputText>
                    <ValidationMessage For="(()=> oSocio.Locali1)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Codigo Postal</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Codpos1" placeholder="Cod. Postal"></InputText>
                    <ValidationMessage For="(()=> oSocio.Codpos1)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Provincia</label>
                    <BlazoredTypeahead SearchMethod="@(text=> SearchMethod(text,provincias))" placeholder="Busca por nombre"  EnableDropDown="true" @bind-Value="tempProvincia">
                        <SelectedTemplate Context="eleccion">
                            @eleccion
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div
                <div class="col-sm">
                    <label class="col-sm">Telefono</label>
                    <InputText @bind-Value="@oSocio.Telefo1" class="form-control" placeholder="Telefono"></InputText>
                    <ValidationMessage For="(()=> oSocio.Telefo1)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>2do Telefono</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Telefo2" placeholder="2do telefono"></InputText>
                    <ValidationMessage For="(()=> oSocio.Telefo2)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Mail</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Mail" placeholder="Mail"></InputText>
                    <ValidationMessage For="(()=> oSocio.Mail)" style="color:red;" />
                </div>
                <AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO">
                    <Authorized Context="authContext"> 
                        <div class="col-sm">
                            @if(Id != 0)
                            {
                                <label></label>

                                <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent
                                    transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" 
                                    @onclick="()=>ChangeEmail()">Enviar mail de inscripción</button>
                            }
                        </div>
                    </Authorized>
                </AuthorizeView>

            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Fecha de Ingreso</label><br/>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaTemp" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
                <div class="col-sm">
                    <label>Plantel</label>
                    <InputText class="form-control" @bind-Value="@oSocio.Placod" placeholder="Plantel"></InputText>
                    <ValidationMessage For="(()=> oSocio.Placod)" style="color:red;" /> 
                </div>
                <div class="col-sm">
                    <label class="col-sm">Activo?</label><br/>
                    <input type="checkbox" @bind="@activo">
                </div>
                @* <div class="col-sm"/> *@
            </div>
            <br />
            <br />
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
@code {
    SocioDTO oSocio = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    Random random = new Random();
    bool disabled = false;
    User Usuario { get; set; } = new User() { Status = "ACTIVO" };
    [CascadingParameter] public IModalService Modal { get; set; }
    private const string validChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";


    [Parameter] public int Id { get; set; }
    [Parameter] public string cod { get; set; }
    DateTime FechaTemp = DateTime.Now.Date;
    public string tempProvincia = "";
    List<SocioDTO> socios = new();
    bool activo = true;
    bool logout = false;

    string email = "";


    List<string> provincias = new List<string> { "Buenos Aires", "Capital Federal","Catamarca","Chaco","Chubut","Cordoba","Corrientes","Entre Rios","Formosa",
    "Jujuy","La pampa","La rioja","Mendoza","Misiones","Neuquen","Rio negro","Salta","San Juan","San Luis","Santa Cruz","Santa Fe","Santiago Del Estero",
    "Tierra del fuego","Tucuman" };
    Dictionary<string, string> traductorProvincia = new Dictionary<string, string>
    {
        {"Chaco","01"},
        {"Corrientes","02"},
        {"Entre Rios","03"},
        {"Santa Fe","04"},
        {"Cordoba","05"},
        {"La pampa","06"},
        {"San Luis","07"},
        {"Santa Cruz","08"},
        {"Tierra del fuego","09"},
        {"Chubut","10"},
        {"Neuquen","11"},
        {"Rio negro","12"},
        {"Buenos Aires","13"},
        {"Capital Federal","14"},
        {"Catamarca","15"},
        {"Formosa","16"},
        {"Jujuy","17"},
        {"La rioja","18"},
        {"Mendoza","19"},
        {"Misiones","20"},
        {"Salta","21"},
        {"San Juan","22"},
        {"Santiago Del Estero","23"},
        {"Tucuman","24"},
        {"",""}
    };
    Dictionary<string, string> traductorProvinciaInverso = new Dictionary<string, string>
    {
        {"01", "Chaco"},
        {"02", "Corrientes"},
        {"03", "Entre Rios"},
        {"04", "Santa Fe"},
        {"05", "Cordoba"},
        {"06", "La pampa"},
        {"07", "San Luis"},
        {"08", "Santa Cruz"},
        {"09", "Tierra del fuego"},
        {"10", "Chubut"},
        {"11", "Neuquen"},
        {"12", "Rio negro"},
        {"13", "Buenos Aires"},
        {"14", "Capital Federal"},
        {"15", "Catamarca"},
        {"16", "Formosa"},
        {"17", "Jujuy"},
        {"18", "La rioja"},
        {"19", "Mendoza"},
        {"20", "Misiones"},
        {"21", "Salta"},
        {"22", "San Juan"},
        {"23", "Santiago Del Estero"},
        {"24", "Tucuman"},
        {"",""}
    };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Id");
        Console.WriteLine(Id);
        var rta = await _socioServicio.LimitadosFiltrados(0, 0);
        socios = rta.List;

        Console.WriteLine(Id);

        try
        {
            socios = socios.Where(x=>x.Id!=Id).ToList();
        }
        catch{}
        if (Id != 0)
        {
            try
            {
                string filtro = $"Id = {Id}";
                var c = await _socioServicio.LimitadosFiltrados(0,1,filtro);
                oSocio = c.List.FirstOrDefault();


                if (oSocio.Criador == "S")
                {
                    activo = true;
                }
                else
                {
                    activo = false;
                }

                if (oSocio.Fecing.HasValue)
                {
                    FechaTemp = oSocio.Fecing.Value;
                }
                if (oSocio.Codpro1 != null)
                {
                    tempProvincia = traductorProvinciaInverso[oSocio.Codpro1];
                }
            }
            catch (Exception ex)
            {
            }

            email = oSocio.Mail;

        }
        else
        {
            var codigo = Int32.Parse(socios.First().Scod);
            oSocio.Scod= (codigo+1).ToString("D4");
        }
    }
    async Task Guardar()
    {
        if(socios.Where(x=>x.Scod==oSocio.Scod).Count()==0){
            oSocio.Codpro1 = traductorProvincia[tempProvincia];
            oSocio.Fecing = FechaTemp;
            if (activo)
            {
                oSocio.Criador = "S";
            }
            else
            {
                oSocio.Criador = "N";
            }
            if (Id == 0)
            {
                await _socioServicio.Crear(oSocio);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
            }
            else
            {
                await _socioServicio.Editar(oSocio);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
            }
        }
        else
        {
            await alertaCodigo();
            return;
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    private async Task<IEnumerable<string>> SearchMethod(string searchText,List<string> lista)
    {
        var result = lista.Where(x => x.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }
    public async Task alertaCodigo()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "No se puede agregar este socio",
                Text = "No se puede agregar debido a que ya existe un socio con este codigo, por favor ingresar uno nuevo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }







    public class ResetPasswordModel
    {
        public int UserId { get; set; }
        public string Password { get; set; }
    }
    public class ResetEmailModel
    {
        public int UserId { get; set; }
        public string email { get; set; }
    }
    public string GenerateRandomPassword(int length)
    {
        StringBuilder sb = new StringBuilder();


        for (int i = 0; i < length; i++)
        {
            int randomIndex = random.Next(validChars.Length);
            sb.Append(validChars[randomIndex]);
        }

        return sb.ToString();
    }

    private async Task ChangeEmail()
{
    Console.WriteLine(Usuario.Email);
    Console.WriteLine(email);

    if (email == Usuario.Email)
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Error",
            Text = "Modifique el mail para poder realizar el cambio",
            ShowCancelButton = true,
            ConfirmButtonText = "Aceptar",
        });
    }
    else
    {
        // Alerta de confirmación antes de enviar el mail
        var confirmResult = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Está seguro de enviar el mail de inscripción?",
            Icon = "warning",
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, enviar",
            CancelButtonText = "Cancelar"
        });

        // Si el usuario confirma, se procede con el envío
        if (confirmResult.IsConfirmed)
        {
            Console.WriteLine("Entro");

            await Guardar();

            disabled = true;
            var pswd = GenerateRandomPassword(random.Next(7, 11));

            Usuario.Email = email;
            Usuario.Phone = oSocio.Telefo1;
            Usuario.Names = oSocio.Nombre;
            Usuario.Dni = oSocio.Mail;
            Usuario.LastNames = oSocio.Nombre;
            Usuario.Rol = "Socio";
            Usuario.SocioId = oSocio.Id;

            Console.WriteLine($"Enviando usuario: {JsonSerializer.Serialize(Usuario)}");

            var result = await http.PostAsJsonAsync<User>($"api/Account/CreateUser?password={pswd}", Usuario);
            var result2 = await http.PostAsJsonAsync<User>($"api/Account/SendMail2025?password={pswd}", Usuario);
            var modal = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);

            Console.WriteLine(5);
            switch (result.StatusCode)
            {
                case System.Net.HttpStatusCode.OK:
                    if (logout)
                    {
                        uriHelper.NavigateTo("/Logout");
                    }
                    else
                    {
                        modal.Close();
                    }
                    break;
                case System.Net.HttpStatusCode.Unauthorized:
                    uriHelper.NavigateTo("/Logout");
                    break;
                default:
                    modal.Close();
                    break;
            }

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Éxito",
                Text = "El cambio de mail se realizó con éxito",
                Icon = "success",
                ConfirmButtonText = "Aceptar",
            });
        }
    }
}









}
