@page "/declaraciones"

@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@using PaginaToros.Client.Servicios.Contrato;
@inject IDesepla1Servicio _desepla1Servicio
@inject ICertifsemanServicio _certifsemanServicio
@inject IDesepla3Servicio _desepla3Servicio


<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>
<AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO,Socio">
    <Authorized>
        <h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">
            Declaraciones de servicio
        </h3>

        <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent
                       transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0"
                style="position:relative;left:3.33%"
                @onclick="() => add(0, esSocio)">
            Agregar Declaraci贸n
        </button>

        @if (oRespuesta.List != null)
        {
            <button style="outline:none; float: right;margin-right:3%;height:100%;"
                    class="px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent
                           transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0"
                    @onclick="() => CambiarModoFiltro()">
                <FeatherFilter Color="Black"></FeatherFilter>
            </button>
            <br />
            <br />

            <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
                <RadzenDataGrid AllowFiltering="allowFiltering"
                                IsLoading="@isLoading"
                                LoadData="LoadData"
                                AllowColumnResize="true"
                                AllowAllowAlternatingRows="true"
                                FilterMode="FilterMode.Simple"
                                AllowSorting="false"
                                PageSize="15"
                                Density="Density.Compact"
                                AllowPaging="true"
                                ShowPagingSummary="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @ref="grid"
                                Count="@cantidad"
                                Data="@oRespuesta.List"
                                TItem="Desepla1DTO"
                                ColumnWidth="3.33%"
                                LogicalFilterOperator="LogicalFilterOperator.Or"
                                PagerHorizontalAlign="HorizontalAlign.Center">

                    <Columns>
                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="Nrodec" Title="Nro de declaraci贸n" Width="6.6%" />
                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="NrFolio" Title="Nro de folio" Width="3.33%" />
                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="Nroplan" Title="Nro de plantel" Width="3.33%" />

                        @* Solo visible para Admin/Maestro *@
                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="Socio.Nombre" Title="Socio" Width="7.34%" Visible="@(!esSocio)" />

                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="Desde" Title="Desde" Width="4.6%">
                            <Template Context="data">
                                @if (data.Desde.HasValue)
                                {
                                    <a>@data.Desde.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="Hasta" Title="Hasta" Width="4.6%">
                            <Template Context="data">
                                @if (data.Hasta.HasValue)
                                {
                                    <a>@data.Hasta.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="Fchrecepcion" Title="Fecha de recepci贸n" Width="4.6%">
                            <Template Context="data">
                                @if (data.Fchrecepcion.HasValue)
                                {
                                    <a>@data.Fchrecepcion.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Desepla1DTO" Property="Tipse" Title="Tipo de servicio" Width="5%" />

                        <RadzenDataGridColumn TItem="Desepla1DTO" Title="" Filterable="false" Width="3.33%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Editar Declaraci贸n"
                                        @onclick="() => add(data.Id, esSocio)">
                                    <FeatherEdit Size="16" Color="green" />
                                </button>
                            </Template>
                        </RadzenDataGridColumn>

                        
                    </Columns>
                </RadzenDataGrid>
            </div>
            <br />
        }
        else
        {
            <br />
            <center>
                <div class="mb-2">
                    <br />
                    <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false"
                                       ProgressBarStyle="ProgressBarStyle.Primary"
                                       Mode="ProgressBarMode.Indeterminate" />
                </div>
            </center>
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<Desepla1DTO>? grid;
    List<SocioDTO> socios = new();
    int cantidad;
    int currentPage;
    bool isLoading = false;
    public bool allowFiltering = false;
    public Respuesta<List<Desepla1DTO>> oRespuesta = new Respuesta<List<Desepla1DTO>>();

    Boolean esSocio = true;
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        esSocio = await UserHasRole("Socio");

        if (!esSocio){
            var c = await _desepla1Servicio.CantidadTotal();
            cantidad = c.List;
            oRespuesta = await _desepla1Servicio.Lista(0, 15);

            oRespuesta.List = oRespuesta.List
                .GroupBy(x => x.Id)
                .Select(g => g.First())
                .ToList();

            StateHasChanged();
        }
        else{
            var usuarioId = 0;
            var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
            var user = authState.User;
            foreach (var claim in user.Claims)
            {
                if (claim.Type == "SocioId")
                {
                    usuarioId = Int32.Parse(claim.Value);
                    Console.WriteLine(usuarioId);
                }

            }
            oRespuesta = await _desepla1Servicio.GetBySocioId(usuarioId);
            cantidad = oRespuesta.List.Count;
        }

    }

    private async Task<bool> UserHasRole(string role)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User.IsInRole(role);
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

 
    async Task add(int Id,bool esSocio)
    {
        nav.NavigateTo($"/declaraciones/{Id}");

    }
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        if (esSocio)
        {

            var usuarioId = 0;
            var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
            var user = authState.User;
            foreach (var claim in user.Claims)
            {
                if (claim.Type == "SocioId")
                {
                    usuarioId = Int32.Parse(claim.Value);
                    Console.WriteLine(usuarioId);
                }

            }


            if (!string.IsNullOrWhiteSpace(args.Filter))
            {
                oRespuesta = await _desepla1Servicio.GetBySocioId(usuarioId);
            }
            else
            {
                oRespuesta = await _desepla1Servicio.GetBySocioId(usuarioId);


            }

            cantidad = oRespuesta.List?.Count ?? 0;
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(args.Filter))
                oRespuesta = await _desepla1Servicio.LimitadosFiltrados(args.Skip ?? 0, args.Top ?? 15, args.Filter);
            else
                oRespuesta = await _desepla1Servicio.Lista(args.Skip ?? 0, args.Top ?? 15);

            var c = await _desepla1Servicio.CantidadTotal();
            cantidad = c.List;
        }

        oRespuesta.List = oRespuesta.List?
            .GroupBy(x => x.Id)
            .Select(g => g.First())
            .ToList();

        isLoading = false;
    }





  


}

