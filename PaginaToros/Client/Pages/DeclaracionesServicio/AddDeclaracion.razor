@using Blazored.Typeahead
<style>
    .td
    {
        font-size: 11px !important;
    }
    .bm-title {
        font-size: 25px;
        font-weight: bold;
    }

    table span.rz-calendar input {
        color: yourDesiredColor;
    }
}

</style>
<div class="card">
    <div class="card-body">
        <EditForm Model="@oDeclaracion" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm"/>
                <div class="col-sm">
                    <label>Socio</label>
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Busque socio por nombre" EnableDropDown="true" @bind-Value="socioSeleccionado">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-sm"/>
            </div>
            <br />
            @if(socioSeleccionado!=null){
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Numero de Folio</label>    
                    <InputNumber class="form-control" @bind-Value="@oDeclaracion.NrFolio" placeholder="Folio"></InputNumber>
                    <ValidationMessage For="(()=> oDeclaracion.NrFolio)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Fecha de declaracion</label>
                        <RadzenDatePicker TValue="DateTime?" @bind-Value="@oDeclaracion.Fchrecepcion" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Plantel</label>
                    <BlazoredTypeahead @bind-Value="@Plantelseleccionado" SearchMethod="BusquedaPlanteles" placeholder="Plantel - Año" EnableDropDown="true" >
                        <SelectedTemplate Context="eleccion">
                            @(@eleccion.Placod + " - " + @eleccion.Anioex)
                            </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @(@eleccion.Placod + " - " + @eleccion.Anioex)
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <br />
            @if(Plantelseleccionado!=null){
                <div class="row" style="width=100%">
                    <div class="col-sm">
                        <label>Cantidad de Vientres PR</label>
                        <div class="card">
                            <div class="card-body">
                                <a>@((Plantelseleccionado.Varede ?? 0) + (Plantelseleccionado.Vqssrd ?? 0) + (Plantelseleccionado.Vqcsrd ?? 0))</a>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm">
                        <label>Cantidad de Vientres PR</label>
                        <div class="card">
                            <div class="card-body">
                                <a>@((Plantelseleccionado.Varepr ?? 0) + (Plantelseleccionado.Vqcsrp ?? 0) + (Plantelseleccionado.Vqssrp ?? 0))</a>
                            </div>
                        </div>
                    </div>
                </div>
                <br />
            }
            else
            {
                <div class="row" style="width=100%">
                    <div class="col-sm">
                        <label>Cantidad de Vientres PR</label>
                        <div class="card">
                            <div class="card-body">
                                <h5></h5>    
                            </div>
                        </div>
                    </div>
                    <div class="col-sm">
                        <label>Cantidad de Vientres PR</label>
                        <div class="card">
                            <div class="card-body">
                                <h5></h5>
                            </div>
                        </div>
                    </div>
                </div>
                <br />
            }
            <div class="row" style="width=100%">
                <div class="col-sm">
                    <label>Vientres de Servicio PR</label>
                    <RadzenNumeric @bind-Value="oDeclaracion.Cantv" class="w-100"></RadzenNumeric>
                </div>
                <div class="col-sm">
                    <label>Vientres de Servicio VIP</label>
                    <RadzenNumeric @bind-Value="oDeclaracion.Cantb" class="w-100"></RadzenNumeric>
                </div>
            </div>
            <br />
            <div class="row" style="width=100%">
                <div class="col-sm-2"/>
                <div class="col-sm-8">
                    <label>Tipo de servicio</label>
                        <RadzenDropDown @bind-Value=@tipoTemp Data=@tipos Change="@(args => CleanSelected())" Style="width: 100%; max-width: 400px;" />
                    </div>
                <div class="col-sm-2"/>
            </div>
            <br />
            <label>Total de Vientres Utilizados</label>
            <div class="card">
                <div class="card-body">
                    <a>@(torosSeleccionados.Sum(x=>x.original.Cantv)+certificadosSeleccionados.Sum(x=>x.original.Cantv))</a>
                </div>
            </div>
            <br />
            if(tipoTemp=="Natural"){
                <label style="text-align:center">Periodo de servicio</label>
                <div class="row">
                    <div class="col-sm">
                        <label>Desde</label>
                        <br/>
                        <RadzenDatePicker TValue="DateTime?" @bind-Value="@oDeclaracion.Desde" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                    <div class="col-sm">
                        <label>Hasta</label>
                        <br />
                        <RadzenDatePicker TValue="DateTime?" @bind-Value="@oDeclaracion.Hasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                </div>
                <br/>
                <div class="row">
                    <div class="col-sm">
                            <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Listado de Toros</RadzenText>
                            <br />
                            <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@toros.Where(x=>x.Criador==socioSeleccionado.Scod)" TItem="Torosuni" SelectionMode="DataGridSelectionMode.Single" 
                            RowClick="@((args) => AddToSelectedToros(args))" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                            <Columns>
                                <RadzenDataGridColumn TItem="Torosuni" Property="" Title="Estado" Width="3.6%">
                                    <Template Context="data">
                                        @if (data.CodEstado == "1")
                                        {
                                            <a style="color:darkgreen">Activo</a>
                                        }
                                        else if (data.CodEstado == "2")
                                        {
                                            <a style="color:red">Inactivo</a>
                                        }
                                        else if (data.CodEstado == "3")
                                        {
                                            <a style="color:red">Inexistente</a>
                                        }
                                        else if (data.CodEstado == "4")
                                        {
                                            <a style="color:black">Muerto</a>
                                        }
                                        else if (data.CodEstado == "5")
                                        {
                                            <a style="color:red">Vendido</a>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Torosuni" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                                <RadzenDataGridColumn TItem="Torosuni" Property="Hba" Title="HBA" Width="7.34%" />
                                <RadzenDataGridColumn TItem="Torosuni" Property="Tatpart" Title="Tatuaje" Width="4.6%"/>
                                <RadzenDataGridColumn TItem="Torosuni" Property="Hasta" Title="Fecha Nac." Width="4.6%">
                                    <Template Context="data">
                                        @if (data.Nacido.HasValue)
                                        {
                                                <a>@data.Nacido.Value.ToString("dd/MM/yyyy")</a>
                                        }
                                        else
                                        {

                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                    <div class="col-sm">
                        <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Seleccionados</RadzenText>
                        <br />
                        <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@torosSeleccionados" TItem="Desepla3Data" ColumnWidth="3.33%" 
                        LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center" @ref="gridToro1">
                            <Columns>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="HBA" Width="4.6%">
                                    <Template Context="data">
                                        @data.original.Hardb
                                    </Template>    
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Tatuaje" Width="4.6%">
                                    <Template Context="data">
                                        @data.original.Tatpart
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            }
                if (tipoTemp == "Natural a Corral" || tipoTemp == "Inseminacion c/celo y rep" || tipoTemp == "Inseminacion c/p y rep" || tipoTemp=="IATF c/rep")
            {
                
                <div class="row">
                    <div class="col-sm">
                    <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Listado de Toros</RadzenText>
                    <br/>
                            <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@toros.Where(x=>x.Criador==socioSeleccionado.Scod)" TItem="Torosuni" ColumnWidth="3.33%" SelectionMode="DataGridSelectionMode.Single"
                                            RowClick="@((args) => AddToSelectedToros(args))" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                        <Columns>
                            <RadzenDataGridColumn TItem="Torosuni" Property="" Title="Estado" Width="3.6%">
                                <Template Context="data">
                                    @switch (data.CodEstado)
                                    {
                                        case "1":
                                            <a style="color:darkgreen">Activo</a>
                                            break;
                                        case "2":
                                            <a style="color:red">Inexistente</a>
                                            break;
                                        case "3":
                                            <a style="color:red">Inactivo</a>
                                            break;
                                        case "4":
                                            <a style="color:black">Muerto</a>
                                            break;
                                        case "5":
                                            <a style="color:red">Vendido</a>
                                            break;
                                        default:
                                            // Handle the default case if needed
                                            break;
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Torosuni" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                            <RadzenDataGridColumn TItem="Torosuni" Property="Hba" Title="HBA" Width="7.34%" />
                            <RadzenDataGridColumn TItem="Torosuni" Property="Tatpart" Title="Tatuaje" Width="4.6%" />
                            <RadzenDataGridColumn TItem="Torosuni" Property="Hasta" Title="Fecha Nac." Width="4.6%">
                                <Template Context="data">
                                    @if (data.Nacido.HasValue)
                                    {
                                                <a>@data.Nacido.Value.ToString("dd/MM/yyyy")</a>
                                    }
                                    else
                                    {

                                    }
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    </div>
                    <div class="col-sm">
                        <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Seleccionados</RadzenText>
                    <br/>
                            <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@torosSeleccionados" TItem="Desepla3Data" ColumnWidth="3.33%"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center" @ref="gridToro2">
                            <Columns>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Hba" Width="7.34%">
                                    <Template Context="data">
                                        @data.original.Hardb
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Desde" Width="4.6%">
                                    <Template Context="data">
                                        <RadzenDatePicker TValue="DateTime" Style="color:white" @bind-Value="@data.Desde" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Hasta" Width="4.6%">
                                    <Template Context="data">
                                            <RadzenDatePicker TValue="DateTime" Style="color:white" @bind-Value="@data.Hasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Cant Vientres" Width="7.34%">
                                    <Template Context="data">
                                        <RadzenNumeric @bind-Value="data.original.Cantv" class="w-100"></RadzenNumeric>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
                <br/>
            }
                if (tipoTemp == "Inseminacion c/celo" || tipoTemp == "Inseminacion c/celo y rep" || tipoTemp == "Inseminacion c/p y rep" || tipoTemp == "IATF c/rep")
            {
                <div class="row">
                    <div class="col-sm">
                            <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Listado de Toros IA</RadzenText>
                            <br />
                            <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@certificados.Where(x=>x.Nrocri==socioSeleccionado.Scod)" SelectionMode="DataGridSelectionMode.Single" RowClick="@((args) => AddToSelectedCertif(args))"
                                            TItem="Certifseman" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center" >
                            <Columns>
                                <RadzenDataGridColumn TItem="Certifseman" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                                <RadzenDataGridColumn TItem="Certifseman" Property="Hba" Title="HBA" Width="7.34%" />
                                <RadzenDataGridColumn TItem="Certifseman" Property="Tatpart" Title="Tatuaje" Width="7%" />
                                <RadzenDataGridColumn TItem="Certifseman" Property="NrDosi" Title="Dosis Reman Totales" Width="7.34%" />
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                    <div class="col-sm">
                            <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Seleccionados</RadzenText>
                            <br />
                        <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@certificadosSeleccionados" TItem="Desepla3Data" ColumnWidth="3.33%"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center" @ref="gridCertif">
                            <Columns>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Hba" Width="7.34%">
                                    <Template Context="data">
                                        @data.original.Hardb
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Dosis Reman" Width="7%" >
                                    <Template Context="data">
                                        @certificados.Where(x=>x.Hba == data.original.Hardb).First().NrDosi
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Vientres" Width="6%">
                                    <Template Context="data">
                                        <RadzenNumeric @bind-Value="data.original.Cantv" class="w-100"></RadzenNumeric>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Dosis Necesaria" Width="7%">
                                    <Template Context="data">
                                        @if(data.original.Cantv!=null){
                                            @switch (tipoTemp)
                                            {
                                                case "Inseminacion c/celo":
                                                    <a>@Math.Round((decimal)(data.original.Cantv*1.5))</a>
                                                    break;
                                                case "Inseminacion c/celo y rep":

                                                case "IATF c/rep":
                                                    <a>@data.original.Cantv</a>
                                                    break;
                                                case "Inseminacion c/p y rep":
                                                    <a>@Math.Round((decimal)(data.original.Cantv*0.8))</a>
                                                    break;
                                                    }
                                                }
                                        else
                                        {
                                            <a>0</a>    
                                        }
                                        </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Desde" Width="5%">
                                    <Template Context="data">
                                        <RadzenDatePicker Style="max-width:auto;color:white" @bind-Value="data.Desde" TValue="DateTime" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Hasta" Width="5%">
                                    <Template Context="data">
                                            <RadzenDatePicker Style="max-width:auto;color:white" @bind-Value="data.Hasta" TValue="DateTime" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
                <br />
            }
            <br />
            
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
            }
        </EditForm>
    </div>
</div>

@code {
    Desepla1 oDeclaracion = new();
    Respuesta<Desepla1> oRespuesta = new();
    List<Socio> socios = new();
    List<Plantel> Planteles = new();
    List<Desepla3> seleccionFinal = new();
    RadzenDataGrid<Desepla3Data> gridToro1;
    RadzenDataGrid<Desepla3Data> gridToro2;
    RadzenDataGrid<Desepla3Data> gridCertif;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    public string nrodec = "";
    Socio? socioSeleccionado = null;
    Plantel? Plantelseleccionado = null;
    List<string> tipos = new List<string> { "Natural", "Natural a Corral", "Inseminacion c/celo", "Inseminacion c/celo y rep", "Inseminacion c/p y rep", "IATF c/rep" };
    DateTime FechaTemp = DateTime.Now;
    List<Torosuni> toros = new();
    List<Desepla3Data> torosSeleccionados = new();
    List<Certifseman> certificados = new();
    List<Desepla3Data> certificadosSeleccionados = new();
    string tipoTemp = "";
    protected override async Task OnInitializedAsync()
    {
        var rta = await Http.GetFromJsonAsync<Respuesta<List<Socio>>>($"/api/socio");
        socios = rta.List;
        var rt = await Http.GetFromJsonAsync<Respuesta<List<Plantel>>>($"/api/Plantel");
        Planteles = rt.List;
        var r = await Http.GetFromJsonAsync<Respuesta<List<Torosuni>>>($"/api/Torosuni");
        toros = r.List;
        var rtaa = await Http.GetFromJsonAsync<Respuesta<List<Certifseman>>>($"/api/Certifseman");
        certificados = rtaa.List;
        if (Id != 0)
        {
            try
            {
                oRespuesta = await Http.GetFromJsonAsync<Respuesta<Desepla1>>($"/api/desepla1/{Id}");
                oDeclaracion = oRespuesta.List;
                socioSeleccionado = socios.Where(x=>x.Scod==oDeclaracion.Nrocri).FirstOrDefault();
                Plantelseleccionado = Planteles.Where(x => x.Placod == oDeclaracion.Nroplan).FirstOrDefault();

            }
            catch (Exception ex)
            {
                oRespuesta.Mensaje = ex.Message;
            }
        }
        else
        {
            var resp = await Http.GetFromJsonAsync<Respuesta<List<Desepla1>>>($"/api/Desepla1");
            var nroDecAnterior = resp.List.OrderByDescending(x => x.Id).First().Nrodec;
            nrodec = Int32.Parse(nroDecAnterior)+1.ToString();
            oDeclaracion.Fecdecl = DateTime.Now;
            oDeclaracion.Nrodec = nrodec;
            oDeclaracion.Desde = DateTime.Now;
            oDeclaracion.Hasta = DateTime.Now;
            oDeclaracion.Tipse = "NA";
        }
    }
    async Task Guardar()
    {
        oDeclaracion.Nrocri = socioSeleccionado.Scod;
        oDeclaracion.Nroplan = Plantelseleccionado.Placod;
        double multiplicador = 0;
        @switch (tipoTemp)
        {
            case "Inseminacion c/celo":
                multiplicador = 1.5;
                break;
            case "Inseminacion c/celo y rep":

            case "IATF c/rep":
                multiplicador = 1;
                break;
            case "Inseminacion c/p y rep":
                multiplicador = 0.8;
                break;
        }
        List<Certifseman> certificadosAlterados = new();
        foreach(var adaptacion in torosSeleccionados)
        {
            adaptacion.original.Desde = adaptacion.Desde.ToString("yyy-MM-dd");
            adaptacion.original.Hasta = adaptacion.Hasta.ToString("yyy-MM-dd");
            seleccionFinal.Add(adaptacion.original);
            oDeclaracion.Desde = adaptacion.Desde;
            oDeclaracion.Hasta = adaptacion.Hasta;
        }
        foreach (var adaptacion in certificadosSeleccionados)
        {
            adaptacion.original.Desde = adaptacion.Desde.ToString("yyy-MM-dd");
            adaptacion.original.Hasta = adaptacion.Hasta.ToString("yyy-MM-dd");
            seleccionFinal.Add(adaptacion.original);
            var cert = certificados.Where(x => x.Hba == adaptacion.original.Hardb).First();
            cert.NrDosi = cert.NrDosi - Convert.ToInt32(Math.Round((decimal)(adaptacion.original.Cantv * multiplicador)));
            certificadosAlterados.Add(cert);
            oDeclaracion.Desde = adaptacion.Desde;
            oDeclaracion.Hasta = adaptacion.Hasta;
        }
        if (Id == 0)
        {
            foreach(var cert in certificadosAlterados)
            {
                await Http.PutAsJsonAsync<Certifseman>("/api/Certifseman", cert);
            }
            if (oDeclaracion.Nrodec == null)
            {
                oDeclaracion.Nrodec = "0";
            }
            await Http.PostAsJsonAsync<List<Desepla3>>("/api/desepla3/lista", seleccionFinal);
            await Http.PostAsJsonAsync<Desepla1>("/api/desepla1", oDeclaracion);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {

            await Http.PutAsJsonAsync<List<Desepla3>>("/api/desepla3", seleccionFinal);
            await Http.PutAsJsonAsync<Desepla1>("/api/desepla1", oDeclaracion);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    private async Task<IEnumerable<Socio>> BusquedaSocios(string searchText)
    {
        return await Task.FromResult(socios.Where(x => x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }
    private async Task<IEnumerable<Plantel>> BusquedaPlanteles(string searchText)
    {
        return await Task.FromResult(Planteles.Where(x => x.Nrocri==socioSeleccionado.Scod && x.Placod.ToLower().Contains(searchText.ToLower())).ToList());
    }

    protected async Task AddToSelectedToros(DataGridRowMouseEventArgs<Torosuni> args)
    {
        var toro = args.Data;
        torosSeleccionados.Add(
        new Desepla3Data
        {
            original = new Desepla3
            {
                Hardb = toro.Hba,
                Nrodec = nrodec,
                Tatpart = toro.Tatpart
            }
        }
        );
        try{
            await InvokeAsync(gridToro1.Reload);
        }
        catch
        {
        }
        try{
            await InvokeAsync(gridToro2.Reload);
        }
        catch{}
    }

    protected void AddToSelectedCertif(DataGridRowMouseEventArgs<Certifseman> args)
    {
        var certif = args.Data;
        certificadosSeleccionados.Add(
        new Desepla3Data
        {
            original = new Desepla3
            {
                Hardb = certif.Hba,
                Nrodec = nrodec,
                Tatpart = certif.Tatpart
            }
        }
        );
        InvokeAsync(gridCertif.Reload);
    }

    protected void CleanSelected()
    {
        torosSeleccionados = new List<Desepla3Data>();
        certificadosSeleccionados = new List<Desepla3Data>();
    }
    public class Desepla3Data
    {
        public Desepla3 original {get;set;}
        public DateTime Desde { get; set; } = DateTime.Now;
        public DateTime Hasta { get; set; } = DateTime.Now;
    }

}

