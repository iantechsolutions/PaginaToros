@using Blazored.Typeahead
<style>
    .bm-title {
        font-size: 25px;
        font-weight: bold;
    }
</style>
<div class="card">
    <div class="card-body">
        <EditForm Model="@oDeclaracion" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm"/>
                <div class="col-sm">
                    <label>Socio</label>
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Busque socio por nombre" EnableDropDown="true" @bind-Value="socioSeleccionado">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.NombreCompleto
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.NombreCompleto
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-sm"/>
            </div>
            <br />
            @if(socioSeleccionado!=null){
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Numero de Folio</label>    
                    <InputNumber class="form-control" @bind-Value="@oDeclaracion.NrFolio" placeholder="Folio"></InputNumber>
                    <ValidationMessage For="(()=> oDeclaracion.NrFolio)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Fecha de declaracion</label>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaTemp" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Plantel</label>
                    <BlazoredTypeahead ValueChanged="@((Plantele c) => HandleValueChanged(c))" SearchMethod="BusquedaPlanteles" placeholder="Busque plantel por numero" EnableDropDown="true" >
                        <SelectedTemplate Context="eleccion">
                            @if(eleccion.FechaExistencia.HasValue){
                                @(@eleccion.NroPlantel + "-" + @eleccion.FechaExistencia.Value.ToString("yyyy"))
                            }
                            else
                            {
                                @eleccion.NroPlantel
                            }
                            </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @if (eleccion.FechaExistencia.HasValue)
                            {
                                @(@eleccion.NroPlantel + "-" + @eleccion.FechaExistencia.Value.ToString("yyyy"))
                            }
                            else
                            {
                                @eleccion.NroPlantel
                            }
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <br />
            <div class="row" style="width=100%">
                <div class="col-sm">
                    <label>Cantidad de Vientres PR</label>
                    <RadzenNumeric Disabled="true" @bind-Value="totalPR" class="w-100"></RadzenNumeric>
                </div>
                <div class="col-sm">
                    <label>Cantidad de Vientre VIP</label>
                    <RadzenNumeric Disabled="true" @bind-Value="totalVip" class="w-100"></RadzenNumeric>
                </div>
            </div>
            <br />
            <div class="row" style="width=100%">
                <div class="col-sm">
                    <label>Vientres de Servicio PR</label>
                    <RadzenNumeric @bind-Value="totalVip" class="w-100"></RadzenNumeric>
                </div>
                <div class="col-sm">
                    <label>Vientres de Servicio VIP</label>
                    <RadzenNumeric @bind-Value="totalVip" class="w-100"></RadzenNumeric>
                </div>
            </div>
            <br />
            <div class="row" style="width=100%">
                <div class="col-sm-2"/>
                <div class="col-sm-8">
                    <label>Tipo de servicio</label>
                    <RadzenDropDown @bind-Value=@tipoTemp Data=@tipos Style="width: 100%; max-width: 400px;" />
                    </div>
                <div class="col-sm-2"/>
            </div>
            <br />
            if(tipoTemp=="Natural"){
                <h4 style="text-align:center">- Servicio Natural -</h4>
                <label style="text-align:center">Periodo de servicio</label>
                <div class="row">
                    <div class="col-sm">
                        <label>Desde</label>
                        <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaDesde" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                    <div class="col-sm"/>
                    <div class="col-sm">
                        <label>Hasta</label>
                        <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaHasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                </div>
                <br/>
            }
            else if (tipoTemp=="Natural a Corral")
            {
                  <label>Total de Vientres Utilizados</label>
                  <RadzenNumeric @bind-Value="totalVip" class="w-100"></RadzenNumeric>
            }
            <br />
            
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
            }
        </EditForm>
    </div>
</div>

@code {
    Desepla1 oDeclaracion = new();
    Respuesta<Desepla1> oRespuesta = new();
    List<Socio> socios = new();
    List<Plantele> planteles = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    Socio? socioSeleccionado = null;
    Plantele? plantelSeleccionado = null;
    List<string> tipos = new List<string> { "Natural", "Natural a Corral", "Inseminacion c/celo", "Inseminacion c/celo y rep", "Inseminacion c/p y rep", "IATF c/rep" };
    DateTime FechaTemp = DateTime.Now;
    DateTime FechaDesde = DateTime.Now;
    DateTime FechaHasta = DateTime.Now;

    string tipoTemp = "";
    int totalPR = new();
    int totalVip = new();
    protected override async Task OnInitializedAsync()
    {
        var rta = await Http.GetFromJsonAsync<Respuesta<List<Socio>>>($"/api/socio");
        socios = rta.List.ToList();
        var rt = await Http.GetFromJsonAsync<Respuesta<List<Plantele>>>($"/api/Plantele");
        planteles = rt.List.ToList();
        if (Id != 0)
        {

            try
            {
                oRespuesta = await Http.GetFromJsonAsync<Respuesta<Desepla1>>($"/api/desepla1/{Id}");
                oDeclaracion = oRespuesta.List;

            }
            catch (Exception ex)
            {
                oRespuesta.Mensaje = ex.Message;
            }
        }
    }
    async Task Guardar()
    {
        if (Id == 0)
        {
            await Http.PostAsJsonAsync<Desepla1>("/api/desepla1", oDeclaracion);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await Http.PutAsJsonAsync<Desepla1>("/api/desepla1", oDeclaracion);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    private async Task<IEnumerable<Socio>> BusquedaSocios(string searchText)
    {
        return await Task.FromResult(socios.Where(x => x.NombreCompleto.ToLower().Contains(searchText.ToLower())).ToList());
    }
    private async Task<IEnumerable<Plantele>> BusquedaPlanteles(string searchText)
    {
        return await Task.FromResult(planteles.Where(x => x.CodSocio==socioSeleccionado.NroSocio && x.NroPlantel.ToLower().Contains(searchText.ToLower())).ToList());
    }
    private void HandleValueChanged(Plantele args)
    {
        plantelSeleccionado = args;
        totalPR = (args.Vacas ?? 0) + (args.VaquillNoServicio ?? 0) + (args.VaquillServicio ?? 0);
        totalVip = (args.VacasVip ?? 0) + (args.VaquillNoServicioVip ?? 0) + (args.PrenadasVip ?? 0);
    }
}

