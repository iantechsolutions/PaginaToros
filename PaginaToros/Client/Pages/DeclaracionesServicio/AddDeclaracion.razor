@page "/declaraciones/{Id:int}"


@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@inject IDesepla1Servicio _desepla1Servicio
@inject IDesepla3Servicio _desepla3Servicio
@inject ISocioServicio _socioServicio
@inject IPlantelServicio _plantelServicio
@inject ITorosServicio _torosServicio
@inject ICertifsemanServicio _certifsemanServicio
@inject HttpClient http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims


<style>
    .td {
        font-size: 11px !important;
    }

    .bm-title {
        font-size: 25px;
        font-weight: bold;
    }

    table span.rz-calendar input {
        color: yourDesiredColor;
    }

    }
</style>
<button class="bm-title" @onclick="ComeBack"><FeatherArrowLeft Color="Black"></FeatherArrowLeft></button>
@if (socios.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <EditForm Model="@oDeclaracion" OnSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="row" style="width=100%;">
                    <div class="col-sm">
                        @if (!esSocio )
                        {
                            <BlazoredTypeahead SearchMethod="BusquedaSocios"
                                               placeholder="Busque socio por nombre"
                                               EnableDropDown="true"
                                               TItem="SocioDTO"
                                               TValue="SocioDTO"
                                               Disabled="@(Id != 0)"
                                               Value="socioSeleccionado"
                                               ValueChanged="UpdateValores"
                                               ValueExpression="@(() => socioSeleccionado)">
                                <SelectedTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </SelectedTemplate>
                                <ResultTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        }
                        
                    </div>

                     <div class="col-sm text-end">
                 

                            @if (Id != 0)
                            {
                                <button type="button"
                                        class="btn btn-danger"
                                        @onclick="EliminarDeclaracion">
                                    Eliminar declaración
                                </button>
                            }
                        <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
                        

                    </div> 
                </div>
                <br />
                @if (socioSeleccionado != null)
                {
                    <div class="row" style="width=100%;">
                        <div class="col-sm">
                            <label>Numero de Folio</label>
                            <InputNumber class="form-control" @bind-Value="@oDeclaracion.NrFolio" placeholder="Folio"></InputNumber>
                            <ValidationMessage For="(()=> oDeclaracion.NrFolio)" style="color:red;" />
                        </div>
                        <div class="col-sm">
                            <label class="col-sm">Fecha de declaracion</label>
                            <RadzenDatePicker TValue="DateTime?" @bind-Value="@oDeclaracion.Fchrecepcion" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                        </div>
                        <div class="col-sm">
                            <label class="col-sm">Plantel</label>
                            <BlazoredTypeahead @bind-Value="@Plantelseleccionado" SearchMethod="BusquedaPlanteles" placeholder="Plantel - Año" EnableDropDown="true" Disabled="@(Id != 0)">
                                <SelectedTemplate Context="eleccion">
                                    @(@eleccion.Placod + " - " + @eleccion.Anioex)
                                </SelectedTemplate>
                                <ResultTemplate Context="eleccion">
                                    @(@eleccion.Placod + " - " + @eleccion.Anioex)
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                    <br />
                    @if (Plantelseleccionado != null)
                    {
                        <div class="row" style="width=100%">
                            <div class="col-sm">
                                <label>Cantidad de Vientres PR</label>
                                <div class="card">
                                    <div class="card-body">
                                        <a>@((Plantelseleccionado.Varede ?? 0) + (Plantelseleccionado.Vqssrd ?? 0) + (Plantelseleccionado.Vqcsrd ?? 0))</a>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm">
                                <label>Cantidad de Vientres VIP</label>
                                <div class="card">
                                    <div class="card-body">
                                        <a>@((Plantelseleccionado.Varepr ?? 0) + (Plantelseleccionado.Vqcsrp ?? 0) + (Plantelseleccionado.Vqssrp ?? 0))</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />
                    }
                    else
                    {
                        <div class="row" style="width=100%">
                            <div class="col-sm">
                                <label>Cantidad de Vientres PR</label>
                                <div class="card">
                                    <div class="card-body">
                                        <h5></h5>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm">
                                <label>Cantidad de Vientres VIP</label>
                                <div class="card">
                                    <div class="card-body">
                                        <h5></h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />
                    }
                    <div class="row" style="width=100%">
                        <div class="col-sm">
                            <label>Vientres de Servicio PR</label>
                            <RadzenNumeric @bind-Value="oDeclaracion.Cantv" class="w-100"></RadzenNumeric>
                        </div>
                        <div class="col-sm">
                            <label>Vientres de Servicio VIP</label>
                            <RadzenNumeric @bind-Value="oDeclaracion.Cantb" class="w-100"></RadzenNumeric>
                        </div>
                    </div>
                    <br />
                    <div class="row" style="width=100%">

                        <div class="col-sm">
                        </div>
                        <div class="col-sm">
                        </div>
                        <div class="col-sm">
                            <label>Tipo de servicio</label>
                            <RadzenDropDown @bind-Value=@tipoTemp
                                            Data=@tipos
                                            Change="@(args => CleanSelected())"
                                            Style="width: 100%; max-width: 400px;" />
                        </div>
                    </div>

                    <br />
                    if (tipoTemp == "Natural")
                    {
                        <label style="text-align:center">Periodo de servicio</label>
                        <div class="row">
                            <div class="col-sm">
                                <label>Desde</label>
                                <br />
                                <RadzenDatePicker TValue="DateTime?" @bind-Value="@oDeclaracion.Desde" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                            </div>
                            <div class="col-sm">
                                <label>Hasta</label>
                                <br />
                                <RadzenDatePicker TValue="DateTime?" @bind-Value="@oDeclaracion.Hasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div style="flex: 0 0 40%; max-width: 40%;">
                                <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Listado de Toros (Activos)</RadzenText>
                                <br />



                                <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@toros.Where(x=>x.Criador==socioSeleccionado.Scod).Where(x=>x.CodEstado=="1")" TItem="TorosuniDTO" SelectionMode="DataGridSelectionMode.Single"
                                                RowClick="@((args) => AddToSelectedToros(args))" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                                    <Columns>
                                        @* <RadzenDataGridColumn TItem="TorosuniDTO" Property="" Title="Estado" Width="3.6%">
                                            <Template Context="data">
                                                @switch (data.CodEstado)
                                                {
                                                    case "1":
                                                        <a style="color:darkgreen">Activo</a>
                                                        break;
                                                    case "2":
                                                        <a style="color:red">Inexistente</a>
                                                        break;
                                                    case "3":
                                                        <a style="color:red">Inactivo</a>
                                                        break;
                                                    case "4":
                                                        <a style="color:black">Muerto</a>
                                                        break;
                                                    case "5":
                                                        <a style="color:red">Vendido</a>
                                                        break;
                                                    default:
                                                        // Handle the default case if needed
                                                        break;
                                                }
                                            </Template>
                                        </RadzenDataGridColumn> *@
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="TipToro" Title="Tipo de toro" Width="5%">
                                            <Template Context="data">
                                                @traductorToros[data.TipToro]
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Hba" Title="HBA" Width="7.34%" />
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Tatpart" Title="Tatuaje" Width="4.6%" />
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Hasta" Title="Fecha Nac." Width="4.6%">
                                            <Template Context="data">
                                                @if (data.Nacido.HasValue)
                                                {
                                                    <a>@data.Nacido.Value.ToString("dd/MM/yyyy")</a>
                                                }
                                                else
                                                {

                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                            <div style="flex: 0 0 60%; max-width: 60%;">
                                <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Seleccionados</RadzenText>
                                <br />
                                <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@torosSeleccionados" TItem="Desepla3Data" ColumnWidth="3.33%"
                                                LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center" @ref="gridToro1">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="HBA" Width="4.6%">
                                            <Template Context="data">
                                                @data.original.Hardb
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Tipo" Width="4.6%">
                                            <Template Context="data">
                                                @if (!string.IsNullOrWhiteSpace(data.TipToro) && traductorToros.ContainsKey(data.TipToro))
                                                {
                                                    @traductorToros[data.TipToro]
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                       @*  <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Cantv" Width="4.6%">
                                            <Template Context="data">
                                                @data.original.Cantv
                                            </Template>
                                        </RadzenDataGridColumn> *@
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Tatuaje" Width="4.6%">
                                            <Template Context="data">
                                                @data.original.Tatpart
                                            </Template>
                                        </RadzenDataGridColumn>
                                       
                                        
                                        <RadzenDataGridColumn TItem="Desepla3Data" Title="Quitar" Width="3%">
                                            <Template Context="data">

                                                <button class="btn" type="button" title="Eliminar" @onclick="() => RemoveToro(data)"><FeatherTrash2 Size="16" Color="red" /></button>

                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                        </div>
                    }
                    if (tipoTemp == "Natural a Corral" || tipoTemp == "Inseminacion c/celo y rep" || tipoTemp == "Inseminacion c/p y rep" || tipoTemp == "IATF c/rep")
                    {

                        <div class="row">
                            <div style="flex: 0 0 40%; max-width: 40%;">
                                <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Listado de Toros</RadzenText>
                                <br />
                                <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@toros.Where(x=>x.Criador==socioSeleccionado.Scod).Where(x=>x.CodEstado=="1")" TItem="TorosuniDTO" ColumnWidth="3.33%" SelectionMode="DataGridSelectionMode.Single"
                                                RowClick="@((args) => AddToSelectedToros(args))" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                                    <Columns>
@*                                         <RadzenDataGridColumn TItem="TorosuniDTO" Property="" Title="Estado" Width="3.6%">
                                            <Template Context="data">
                                                @switch (data.CodEstado)
                                                {
                                                    case "1":
                                                        <a style="color:darkgreen">Activo</a>
                                                        break;
                                                    case "2":
                                                        <a style="color:red">Inexistente</a>
                                                        break;
                                                    case "3":
                                                        <a style="color:red">Inactivo</a>
                                                        break;
                                                    case "4":
                                                        <a style="color:black">Muerto</a>
                                                        break;
                                                    case "5":
                                                        <a style="color:red">Vendido</a>
                                                        break;
                                                    default:
                                                        // Handle the default case if needed
                                                        break;
                                                }
                                            </Template>
                                        </RadzenDataGridColumn> *@
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="TipToro" Title="Tipo de toro" Width="5%">
                                            <Template Context="data">
                                                @traductorToros[data.TipToro]
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Hba" Title="HBA" Width="7.34%" />
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Tatpart" Title="Tatuaje" Width="4.6%" />
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Hasta" Title="Fecha Nac." Width="4.6%">
                                            <Template Context="data">
                                                @if (data.Nacido.HasValue)
                                                {
                                                    <a>@data.Nacido.Value.ToString("dd/MM/yyyy")</a>
                                                }
                                                else
                                                {

                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                            <div style="flex: 0 0 60%; max-width: 60%;">
                                <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Seleccionados</RadzenText>
                                <br />
                                <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@torosSeleccionados" TItem="Desepla3Data" ColumnWidth="3.33%"
                                                LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center" @ref="gridToro2">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="HBA" Width="3%">
                                            <Template Context="data">
                                                @data.original.Hardb
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="TipToro" Title="Tipo de toro" Width="5%">
                                            <Template Context="data">
                                                @traductorToros[data.TipToro]
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Desde" Width="7%">
                                            <Template Context="data">
                                                <RadzenDatePicker TValue="DateTime" Style="color:white" @bind-Value="@data.Desde" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Hasta" Width="7%">
                                            <Template Context="data">
                                                <RadzenDatePicker TValue="DateTime" Style="color:white" @bind-Value="@data.Hasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Cant Vientres" Width="5%">
                                            <Template Context="data">
                                                <RadzenNumeric @bind-Value="data.original.Cantv" Min="0" class="w-100"></RadzenNumeric>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Title="Quitar" Width="4%">
                                            <Template Context="data">
                                                <button class="btn" type="button" title="Eliminar" @onclick="() => RemoveToro(data)"><FeatherTrash2 Size="16" Color="red" /></button>

                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                        </div>
                        <br />
                    }
                    if (tipoTemp == "Inseminacion c/celo" || tipoTemp == "Inseminacion c/celo y rep" || tipoTemp == "Inseminacion c/p y rep" || tipoTemp == "IATF c/rep")
                    {
                        <div class="row">
                            <div style="flex: 0 0 40%; max-width: 40%;">
                                <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Listado dosis de semen</RadzenText>
                                <br />
                                <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@certificados.Where(x=>x.Nrocri==socioSeleccionado.Scod).Where(x=>x.NrDosi>0)" SelectionMode="DataGridSelectionMode.Single" RowClick="@((args) => AddToSelectedCertif(args))"
                                                TItem="CertifsemanDTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Hba" Title="HBA" Width="7.34%" />
                                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="Tatpart" Title="Tatuaje" Width="7%" />
                                        <RadzenDataGridColumn TItem="CertifsemanDTO" Property="NrDosi" Title="Dosis Reman Totales" Width="7.34%" />
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                            <div style="flex: 0 0 60%; max-width: 60%;">
                                <RadzenText TextStyle="TextStyle.H5" Style="text-align:center">Seleccionados</RadzenText>
                                <br />
                                <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@certificadosSeleccionados" TItem="Desepla3Data" ColumnWidth="3.33%"
                                                LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center" @ref="gridCertif">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="HBA" Width="7.34%">
                                            <Template Context="data">
                                                @data.original.Hardb
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="Desepla3Data" Title="Dosis Reman" Width="5%">
                                            <Template Context="data">
                                                @{
                                                    var cert = certificados.FirstOrDefault(x => x.Hba == data.original.Hardb);
                                                }
                                                @((cert?.NrDosi ?? 0))
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Vientres" Width="6%">
                                            <Template Context="data">
                                                <RadzenNumeric @bind-Value="data.original.Cantv" class="w-100"></RadzenNumeric>
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="Desepla3Data" Property="" Title="Dosis Necesaria" Width="5%">
                                            <Template Context="data">
                                                @if (data.original.Cantv != null)
                                                {
                                                    @switch (tipoTemp)
                                                    {
                                                        case "Inseminacion c/celo":
                                                            <a>@Math.Round((decimal)(data.original.Cantv * 1.5))</a>
                                                            break;
                                                        case "Inseminacion c/celo y rep":
                                                        case "IATF c/rep":
                                                            <a>@data.original.Cantv</a>
                                                            break;
                                                        case "Inseminacion c/p y rep":
                                                            <a>@Math.Round((decimal)(data.original.Cantv * 0.8))</a>
                                                            break;
                                                    }
                                                }
                                                else
                                                {
                                                    <a>0</a>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="Desepla3Data" Title="Desde" Width="9%">
                                            <Template Context="data">
                                                <div style="min-width:100px">
                                                    <RadzenDatePicker TValue="DateTime"
                                                                      @bind-Value="data.Desde"
                                                                      DateFormat="dd/MM/yyyy"
                                                                      Class="w-100" />
                                                </div>
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="Desepla3Data" Title="Hasta" Width="9%">
                                            <Template Context="data">
                                                <div style="min-width:100px">
                                                    <RadzenDatePicker TValue="DateTime"
                                                                      @bind-Value="data.Hasta"
                                                                      DateFormat="dd/MM/yyyy"
                                                                      Class="w-100" />
                                                </div>
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="Desepla3Data" Title="Quitar" Width="4%">
                                            <Template Context="data">
                                                <button class="btn" type="button" title="Eliminar" @onclick="() => RemoveCertif(data)">
                                                    <FeatherTrash2 Size="16" Color="red" />
                                                </button>
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                        </div>
                        <br />
                    }
                    <br />


                }
            </EditForm>
        </div>
    </div>
}
else
{
    if (esSocio && socioSeleccionado == null)
    {
        <div class="alert alert-danger text-center mt-4">
            <h4>No se encontró un socio asociado a esta cuenta.</h4>
            <p>Por favor, cree un socio para poder continuar.</p>
        </div>
    }
    else
    {
        <br />
        <center>
            <div class="mb-2">
                <br />
                <RadzenProgressBar style="position:relative;width:93.5%"
                                   Value="100"
                                   ShowValue="false"
                                   ProgressBarStyle="ProgressBarStyle.Primary"
                                   Mode="ProgressBarMode.Indeterminate" />
            </div>
        </center>
    }
}

@code {
    Desepla1DTO oDeclaracion = new();
    List<SocioDTO> socios = new();
    List<PlantelDTO> Planteles = new();
    List<Desepla3DTO> seleccionFinal = new();
    RadzenDataGrid<Desepla3Data> gridToro1;
    RadzenDataGrid<Desepla3Data> gridToro2;
    RadzenDataGrid<Desepla3Data> gridCertif;

    [Parameter] public int Id { get; set; }


    bool esSocio = false;
    bool _isEdit => Id != 0;

    public string nrodec = "";
    SocioDTO? socioSeleccionado = null;
    PlantelDTO? Plantelseleccionado = null;
    List<string> tipos = new List<string> { "Natural", "Natural a Corral", "Inseminacion c/celo", "Inseminacion c/celo y rep", "Inseminacion c/p y rep", "IATF c/rep" };
    DateTime FechaTemp = DateTime.Now;
    List<TorosuniDTO> toros = new();
    List<Desepla3Data> torosSeleccionados = new();
    List<CertifsemanDTO> certificados = new();
    List<Desepla3Data> certificadosSeleccionados = new();
    List<Desepla3DTO> deseplasViejos = new();
    string tipoTemp = "";
    string previousTipoTemp = "";

    Dictionary<string, string> traductor = new Dictionary<string, string>
    {
        {"Natural","NA"},
        {"Natural a Corral","NC"},
        {"Santa Fe","IATFR"},
        {"Inseminacion c/p y rep","IAPR"},
        {"Inseminacion c/celo y rep","IACR"},
        {"Inseminacion c/celo","IA"},
        {"NA", "Natural"},
        {"NC", "Natural a Corral"},
        {"IR", "Inseminacion c/celo y rep"},
        {"IATFR", "Santa Fe"},
        {"IAPR", "Inseminacion c/p y rep"},
        {"IACR", "Inseminacion c/celo y rep"},
        {"IA", "Inseminacion c/celo"},
        {"ANUAL", "Inseminacion c/celo y rep"}
    };

    Dictionary<string, string> traductorToros = new Dictionary<string, string>{
        {"P","Puro Pedigree (SRA)"},
        {"S","S/"},
        {"GP","Ganador de prueba"},
        {"A","Patagonico"},
        {"1","Activo"},
        {"2","Inactivo"},
        {"3","Inexistente"},
        {"4","Muerto"},
        {"5","Vendido"}
    };
    private ClaimsPrincipal? user;


    Desepla3DTO CloneDesepla(Desepla3DTO s) => new Desepla3DTO
        {
            Id = s.Id,
            Tatpart = s.Tatpart,
            Hardb = s.Hardb,
            Cantv = s.Cantv,
            Nrodec = s.Nrodec,
            Tipo = s.Tipo,
            Servicio = s.Servicio,
            Desde = s.Desde,
            Hasta = s.Hasta,
            Apodo = s.Apodo
        };



    protected override async Task OnInitializedAsync()
    {
        torosSeleccionados.Clear();
        certificadosSeleccionados.Clear();
        seleccionFinal.Clear();
        deseplasViejos.Clear();


        var r = await _socioServicio.LimitadosFiltrados(0, 0);
        socios = r.List;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        esSocio = await UserHasRole("Socio");

        if (esSocio)
        {
            var socioIdClaim = user.Claims.FirstOrDefault(c => c.Type == "SocioId")?.Value;
            if (int.TryParse(socioIdClaim, out int socioId))
            {
                string filtro = $"Id == {socioId}";

                var socio = await _socioServicio.LimitadosFiltrados(0, 0, filtro);
                socioSeleccionado = socio.List.FirstOrDefault();

                if (socioSeleccionado != null)
                {
                    await UpdateValores(socioSeleccionado);
                }
                else
                {
                    Console.WriteLine("No se encontró un socio para el usuario actual.");
                }
            }
        }
        else
        {
            var res = await _socioServicio.LimitadosFiltrados(0, 0);
            socios = res.List;
        }


        if (Id != 0)
        {
            // 1) Cabecera
            var rtaD = await _desepla1Servicio.LimitadosFiltradosNoInclude(0, 1, $"Id = {Id}");
            oDeclaracion = rtaD.List.FirstOrDefault() ?? new();

            nrodec = oDeclaracion.Nrodec;
            socioSeleccionado = socios.FirstOrDefault(x => x.Scod == oDeclaracion.Nrocri);

            // 2) Listas dependientes del socio (NO pisar cabecera)
            if (socioSeleccionado != null)
                await UpdateValores(socioSeleccionado);

            // 3) Reponer selecciones de UI tomadas de la cabecera
            Plantelseleccionado = Planteles.FirstOrDefault(p => p.Placod == oDeclaracion.Nroplan);
            tipoTemp = ToLabel(oDeclaracion.Tipse);
            previousTipoTemp = tipoTemp; // por la lógica de multiplicadores

            // 4) Detalles (toros/certifs) y reconstrucción de seleccionados
            var rt = await _desepla3Servicio.LimitadosFiltrados(0, 0, $"Nrodec == \"{oDeclaracion.Nrodec}\"");
            deseplasViejos = rt.List?.ToList() ?? new();

            torosSeleccionados.Clear();
            certificadosSeleccionados.Clear();

            foreach (var desepla in deseplasViejos)
            {
                var data = new Desepla3Data
                    {
                        LineKey = Guid.NewGuid(),
                        original = CloneDesepla(desepla),
                        Id = desepla.Id
                    };

                if (DateTime.TryParseExact(desepla.Desde, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None, out var d1))
                    data.Desde = d1;
                if (DateTime.TryParseExact(desepla.Hasta, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None, out var d2))
                    data.Hasta = d2;

                if (string.Equals(desepla.Tipo, "insem", StringComparison.OrdinalIgnoreCase))
                {
                    certificadosSeleccionados.Add(data);
                }
                else
                {
                    // <- importante: recuperar el TipToro para mostrarlo
                    data.TipToro = GetTipToroByHba(desepla.Hardb);
                    torosSeleccionados.Add(data);
                }
            }

            try { if (gridToro1 != null) await gridToro1.Reload(); } catch { }
            try { if (gridToro2 != null) await gridToro2.Reload(); } catch { }
            try { if (gridCertif != null) await gridCertif.Reload(); } catch { }
            StateHasChanged();
        }
        else
        {
            var resp = await _desepla1Servicio.LimitadosFiltradosNoInclude(0, 0);
            var nroDecAnterior = resp.List.OrderByDescending(x => x.Id).First().Nrodec;
            nrodec = (Int32.Parse(nroDecAnterior) + 1).ToString();
            oDeclaracion.Fecdecl = DateTime.Now;
            oDeclaracion.Nrodec = nrodec;
            oDeclaracion.Desde = DateTime.Now;
            oDeclaracion.Hasta = DateTime.Now;
            oDeclaracion.Tipse = "NA";



        }
    }

    private string? GetTipToroByHba(string? hba)
    {
        if (string.IsNullOrWhiteSpace(hba)) return null;
        return toros.FirstOrDefault(t => t.Hba == hba)?.TipToro;
    }
    private async Task<bool> UserHasRole(string role)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User.IsInRole(role);
    }
    async Task GenerarOtra()
    {
        await Guardar();
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }






    double GetMultiplicador(string tipo) => tipo switch
    {
        "Inseminacion c/celo" => 1.5,
        "Inseminacion c/celo y rep" => 1.0,
        "IATF c/rep" => 1.0,
        "Inseminacion c/p y rep" => 0.8,
        _ => 0.0 // Natural no consume dosis
    };

    int DosisNecesarias(double? cantVientres, double multiplicador)
    {
        var v = cantVientres ?? 0.0;
        if (multiplicador <= 0) return 0;

        return (int)Math.Round(v * multiplicador, MidpointRounding.AwayFromZero);
    }
    Dictionary<string, string> errors = new();

    // Construye un mapa HBA -> dosis totales usadas en la declaración
    Dictionary<string, int> BuildUsoPorCert(IEnumerable<Desepla3DTO> items, double multiplicador)
    {
        return items
            .Where(x => x.Tipo == "insem")  // solo inseminación consume dosis
            .GroupBy(x => x.Hardb)
            .ToDictionary(
                g => g.Key,
                g => g.Sum(d => DosisNecesarias(d.Cantv, multiplicador))
            );
    }

    private string CampoLegible(string key) => key switch
    {
        "socio" => "Socio",
        "plantel" => "Plantel",
        "tipo" => "Tipo de servicio",
        "NrFolio" => "Nº de folio",
        "Fchrecepcion" => "Fecha de declaración",
        "cantv" => "Vientres PR",
        "cantb" => "Vientres VIP",
        "periodoNatural" => "Período (Natural)",
        "torosNatural" => "Toros (Natural)",
        "torosCorral" => "Toros (Natural a Corral)",
        "certifs" => "Certificados de semen",
        _ => key
    };


    private string ToCode(string label)
    {
        if (traductor.TryGetValue(label, out var code)) return code;
        // Fallback: si ya es código o es un label desconocido
        return label;
    }

    private string ToLabel(string code)
    {
        // Invertimos el diccionario en caliente (o creá otro diccionario inverso fijo)
        var pair = traductor.FirstOrDefault(kv => kv.Value == code);
        return string.IsNullOrWhiteSpace(pair.Key) ? code : pair.Key;
    }



    private string BuildErrorsHtml()
    {
        var items = errors
            .Select(kv => $"<li><b>{CampoLegible(kv.Key)}:</b> {System.Net.WebUtility.HtmlEncode(kv.Value)}</li>");
        return $"<ul style='text-align:left;margin-left:1rem'>{string.Join("", items)}</ul>";
    }

    private async Task HandleSubmit(EditContext _)
    {
        if (!ValidateManual())
        {
            // Alerta con resumen de errores
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Faltan datos para guardar",
                    Html = BuildErrorsHtml(),
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonText = "Revisar"
                });

            StateHasChanged(); // por si además mostrás mensajes rojos debajo
            return;
        }

        await Guardar();
    }

    private void ClearErrors() => errors.Clear();


    private bool ValidateManual()
    {
        ClearErrors();

        // 1) Requeridos básicos
        if (socioSeleccionado is null)
            errors["socio"] = "Debe seleccionar un socio.";

        if (Plantelseleccionado is null)
            errors["plantel"] = "Debe seleccionar un plantel.";

        if (string.IsNullOrWhiteSpace(tipoTemp))
            errors["tipo"] = "Seleccione el tipo de servicio.";

        if (oDeclaracion.NrFolio is null || (oDeclaracion.NrFolio ?? 0) <= 0)
            errors["NrFolio"] = "Ingrese un número de folio válido.";

        if (oDeclaracion.Fchrecepcion is null)
            errors["Fchrecepcion"] = "Ingrese la fecha de declaración.";

        // 2) Límites PR/VIP contra el plantel
        var prTotal = (Plantelseleccionado?.Varede ?? 0)
                    + (Plantelseleccionado?.Vqssrd ?? 0)
                    + (Plantelseleccionado?.Vqcsrd ?? 0);

        var vipTotal = (Plantelseleccionado?.Varepr ?? 0)
                     + (Plantelseleccionado?.Vqssrp ?? 0)
                     + (Plantelseleccionado?.Vqcsrp ?? 0);

        if ((oDeclaracion.Cantv ?? 0) < 0 || (oDeclaracion.Cantv ?? 0) > prTotal)
            errors["cantv"] = $"La cantidad PR no puede superar {prTotal}.";

        if ((oDeclaracion.Cantb ?? 0) < 0 || (oDeclaracion.Cantb ?? 0) > vipTotal)
            errors["cantb"] = $"La cantidad VIP no puede superar {vipTotal}.";

        // 3) Reglas por tipo
        bool esNatural = tipoTemp == "Natural";
        bool esNaturalCorral = tipoTemp == "Natural a Corral";
        bool esAlgunaInsemin = tipoTemp == "Inseminacion c/celo"
                               || tipoTemp == "Inseminacion c/celo y rep"
                               || tipoTemp == "Inseminacion c/p y rep"
                               || tipoTemp == "IATF c/rep";

        // Natural: requiere periodo y al menos 1 toro
        if (esNatural)
        {
            if (oDeclaracion.Desde == null || oDeclaracion.Hasta == null || oDeclaracion.Desde > oDeclaracion.Hasta)
                errors["periodoNatural"] = "Complete un periodo válido (Desde/Hasta).";

            if (torosSeleccionados.Count == 0)
                errors["torosNatural"] = "Debe seleccionar al menos un toro.";
        }

        // Natural a Corral: toros con fechas por fila
        if (esNaturalCorral)
        {
            bool algunaFilaInvalida = torosSeleccionados.Any(t => t.Desde == default || t.Hasta == default || t.Desde > t.Hasta);
            if (torosSeleccionados.Count == 0 || algunaFilaInvalida)
                errors["torosCorral"] = "Seleccione toros y complete fechas válidas en cada fila.";
        }

        // Inseminación: certificados con Cantv > 0 y fechas válidas
        if (esAlgunaInsemin)
        {
            bool faltan = certificadosSeleccionados.Count == 0;
            // bool cantErr = certificadosSeleccionados.Any(c => (c.original.Cantv ?? 0) <= 0);
            bool fechasErr = certificadosSeleccionados.Any(c => c.Desde == default || c.Hasta == default || c.Desde > c.Hasta);

            if (faltan  || fechasErr)
                errors["certifs"] = "Agregue certificados, con vientres mayores a 0 y fechas válidas por fila.";
        }

        return errors.Count == 0;
    }
    async Task Guardar()
    {
        Console.WriteLine("1");
        seleccionFinal.Clear();

        oDeclaracion.Nrocri = socioSeleccionado.Scod;
        oDeclaracion.Nroplan = Plantelseleccionado.Placod;
        oDeclaracion.Tipse = ToCode(tipoTemp);


        // --- Multiplicadores
        var multActual = GetMultiplicador(tipoTemp);
        var multPrevio = GetMultiplicador(string.IsNullOrWhiteSpace(previousTipoTemp) ? tipoTemp : previousTipoTemp);

        // --- Armo seleccionFinal como hacías
        foreach (var adaptacion in torosSeleccionados)
        {
            adaptacion.original.Desde = adaptacion.Desde.ToString("yyyy-MM-dd");
            adaptacion.original.Hasta = adaptacion.Hasta.ToString("yyyy-MM-dd");
            seleccionFinal.Add(adaptacion.original);

            if (tipoTemp != "Natural")
            {
                if (adaptacion.Desde < oDeclaracion.Desde) oDeclaracion.Desde = adaptacion.Desde;
                if (adaptacion.Hasta > oDeclaracion.Hasta) oDeclaracion.Hasta = adaptacion.Hasta;
            }
        }

        foreach (var adaptacion in certificadosSeleccionados)
        {
            adaptacion.original.Desde = adaptacion.Desde.ToString("yyyy-MM-dd");
            adaptacion.original.Hasta = adaptacion.Hasta.ToString("yyyy-MM-dd");
            seleccionFinal.Add(adaptacion.original);

            // Ajusto rango general si aplica
            oDeclaracion.Desde = adaptacion.Desde;
            oDeclaracion.Hasta = adaptacion.Hasta;
        }

        // --- USO INICIAL (lo que tenía la declaración al cargar)
        //     NOTA: usamos deseplasViejos (traídos de BD). Si estás creando, es lista vacía.
        var usoInicialPorCert = BuildUsoPorCert(deseplasViejos, multPrevio);

        // --- USO ACTUAL (lo que consumen hoy los seleccionados en pantalla)
        var usoActualPorCert = BuildUsoPorCert(seleccionFinal, multActual);

        // --- Union de HBAs para calcular delta
        var hbAs = new HashSet<string>(usoInicialPorCert.Keys);
        hbAs.UnionWith(usoActualPorCert.Keys);

        // --- Calcular delta y preparar edición de certificados
        var certificadosAlterados = new List<CertifsemanDTO>();

        foreach (var hba in hbAs)
        {
            var inicial = usoInicialPorCert.TryGetValue(hba, out var i) ? i : 0;
            var actual = usoActualPorCert.TryGetValue(hba, out var a) ? a : 0;
            var delta = actual - inicial; // + = restar del certificado; - = devolver al certificado

            if (delta == 0) continue;

            var cert = certificados.FirstOrDefault(x => x.Hba == hba);
            if (cert == null)
            {
                await Swal.FireAsync("Atención", $"No se encontró certificado para HBA {hba}", SweetAlertIcon.Warning);
                continue;
            }

            // Simulamos para validar
            var nuevoNrDosi = cert.NrDosi - delta; // delta positivo resta; delta negativo suma
            if (nuevoNrDosi < 0)
            {
                await Swal.FireAsync("Atención",
                    $"El certificado HBA {hba} no tiene suficientes dosis. " +
                    $"Intento consumir {delta} y quedan {cert.NrDosi}.",
                    SweetAlertIcon.Warning);
                return; // aborta el guardado
            }

            // Creamos un "snapshot" para enviar al Editar
            certificadosAlterados.Add(new CertifsemanDTO
                {
                    Id = cert.Id,
                    NrDosi = nuevoNrDosi,

                    // <<< IMPORTANTE >>>
                    // Copiá aquí cualquier otro campo NO NULLABLE que tu API espere en Editar
                    // (si tu Editar hace "update full", envía los mismos valores actuales del cert)
                    Hba = cert.Hba,
                    Tatpart = cert.Tatpart,
                    Nrocri = cert.Nrocri,
                    NomDad = cert.NomDad
                    // ... lo que corresponda en tu DTO
                });
        }

        // --- Persistencia de certificados primero (para asegurar stock coherente)
        foreach (var cert in certificadosAlterados)
        {
            var r = await _certifsemanServicio.UpdateNrDosi(cert.Id, cert.NrDosi ?? 0);
            if (r?.Exito != 1)
            {
                await Swal.FireAsync("Error", r?.Mensaje ?? "No se pudo actualizar NrDosi", SweetAlertIcon.Error);
                return; // abortar guardar si querés consistencia estricta
            }
        }

        // --- Persistir declaración y detalles (tu flujo original)
        if (!string.IsNullOrEmpty(oDeclaracion.Nrodec) && oDeclaracion.Nrodec.Length > 15)
        {
            oDeclaracion.Nrodec = oDeclaracion.Nrodec.Substring(0, 15);
        }
        else if (string.IsNullOrEmpty(oDeclaracion.Nrodec))
        {
            oDeclaracion.Nrodec = "0";
        }

        if (Id == 0)
        {
            // Crear
            foreach (var dese in seleccionFinal)
            {
                await _desepla3Servicio.Crear(dese);
            }
            await _desepla1Servicio.Crear(oDeclaracion);
            Navigation.NavigateTo("/declaraciones");
            return;
        }
        else
        {
            // Editar: borro viejos y recreo (como ya tenías)
            var nrodecLower = oDeclaracion.Nrodec.ToLower();
            var filtro = $"(Nrodec == null ? \"\" : Nrodec).ToLower() == \"{nrodecLower}\"";
            var existentes = await _desepla3Servicio.LimitadosFiltrados(0, 0, filtro);

            if (existentes?.List != null)
            {
                foreach (var d in existentes.List)
                    await _desepla3Servicio.Eliminar(d.Id);
            }

            foreach (var dese in seleccionFinal)
            {
                dese.Nrodec = oDeclaracion.Nrodec;
                await _desepla3Servicio.Crear(dese);
            }

            await _desepla1Servicio.Editar(oDeclaracion);
            Navigation.NavigateTo("/declaraciones");
            return;
        }
    }




    async Task ComeBack()
    {
        nav.NavigateTo("/declaraciones");
    }

    public class ChangeNotificationModel
    {
        public string Id { get; set; }
        public string Tipo { get; set; }
        public string Clase { get; set; }
        public string Detalle { get; set; }
    }


    async Task cancel()
    {
        Navigation.NavigateTo("/declaraciones");


    }
    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {
        return await Task.FromResult(socios.Where(x => x.Criador == "S" && x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }
    private async Task<IEnumerable<PlantelDTO>> BusquedaPlanteles(string searchText)
    {
        return await Task.FromResult(Planteles.Where(x => x.Nrocri == socioSeleccionado.Scod && x.Placod.ToLower().Contains(searchText.ToLower())).ToList());
    }

    protected async Task AddToSelectedToros(DataGridRowMouseEventArgs<TorosuniDTO> args)
    {
        var toro = args.Data;

        bool yaExiste = torosSeleccionados.Any(t => t.original.Hardb == toro.Hba);
        if (yaExiste) return;

        torosSeleccionados.Add(
            new Desepla3Data
                {
                    original = new Desepla3DTO
                    {
                        Hardb = toro.Hba,
                        Nrodec = nrodec,
                        Tatpart = toro.Tatpart,
                        Tipo = "toro"
                    },
                    TipToro = toro.TipToro
                }
        );

        try { await InvokeAsync(gridToro1.Reload); } catch { }
        try { await InvokeAsync(gridToro2.Reload); } catch { }
    }


    private async Task RemoveToro(Desepla3Data data)
    {
        torosSeleccionados = torosSeleccionados
            .Where(t => t.original.Hardb != data.original.Hardb)
            .ToList();

        if (Id != 0)
        {
            Console.WriteLine("ENTRO");
            try
            {
                // await _certifsemanServicio.Eliminar(data.Id);
                await _desepla3Servicio.Eliminar(data.Id);
            }
            catch
            {
                Console.WriteLine("error");

            }
        }

        try
        {
            await InvokeAsync(gridToro1.Reload);
        }
        catch { }

        try
        {
            await InvokeAsync(gridToro2.Reload);
        }
        catch { }
    }


    private async Task RemoveCertif(Desepla3Data data)
    {
        certificadosSeleccionados = certificadosSeleccionados
            .Where(c => c.LineKey != data.LineKey)
            .ToList();

        if (Id != 0 && data.Id > 0)
        {
            try { await _desepla3Servicio.Eliminar(data.Id); }
            catch { Console.WriteLine("Error al eliminar desepla3 (semen)"); }
        }

        try { await InvokeAsync(gridCertif.Reload); } catch { }
    }





    protected void AddToSelectedCertif(DataGridRowMouseEventArgs<CertifsemanDTO> args)
    {
        var certif = args.Data;

        certificadosSeleccionados.Add(
            new Desepla3Data
                {
                    LineKey = Guid.NewGuid(),
                    original = new Desepla3DTO
                    {
                        Hardb = certif.Hba,
                        Nrodec = nrodec,
                        Tatpart = certif.Tatpart,
                        Tipo = "insem",
                        Cantv = 0 
                    },
                    Desde = DateTime.Now,
                    Hasta = DateTime.Now
                }
        );

        InvokeAsync(gridCertif.Reload);
    }

    protected void CleanSelected()
    {
        torosSeleccionados = new List<Desepla3Data>();
        certificadosSeleccionados = new List<Desepla3Data>();
    }

    protected async Task UpdateValores(SocioDTO socio)
    {
        socioSeleccionado = socio;

        // si estoy editando, no quiero que me borre tipo/cantidades/fechas
        await ResetForSocioChange(preserveCabecera: _isEdit);

        var filtro = $"Nrocri == \"{socio.Scod}\"";
        var rt = await _plantelServicio.LimitadosFiltradosNoInclude(0, 0, filtro);
        Planteles = rt.List;

        filtro = $"Criador == \"{socio.Scod}\"";
        var rta = await _torosServicio.LimitadosFiltradosNoInclude(0, 0, filtro);
        toros = rta.List;

        filtro = $"Nrocri == \"{socio.Scod}\"";
        var rtaa = await _certifsemanServicio.LimitadosFiltradosNoInclude(0, 0, filtro);
        certificados = rtaa.List;

        StateHasChanged();
    }




    private async Task ResetForSocioChange(bool preserveCabecera = false)
    {
        torosSeleccionados.Clear();
        certificadosSeleccionados.Clear();
        seleccionFinal.Clear();
        deseplasViejos.Clear();

        Plantelseleccionado = null;

        if (!preserveCabecera)
        {
            tipoTemp = string.Empty;
            oDeclaracion.Cantv = 0;
            oDeclaracion.Cantb = 0;
            oDeclaracion.Desde = DateTime.Now;
            oDeclaracion.Hasta = DateTime.Now;
        }

        try { if (gridToro1 != null) await gridToro1.Reload(); } catch { }
        try { if (gridToro2 != null) await gridToro2.Reload(); } catch { }
        try { if (gridCertif != null) await gridCertif.Reload(); } catch { }

        StateHasChanged();
    }








    public class Desepla3Data
    {
        public Guid LineKey { get; set; } = Guid.NewGuid();
        public Desepla3DTO original { get; set; }
        public DateTime Desde { get; set; } = DateTime.Now;
        public DateTime Hasta { get; set; } = DateTime.Now;
        public string? TipToro { get; set; } = "";
        public int Id { get; set; }
    }


    double GetMultiplicadorForCode(string tipse) => tipse switch
    {
        // Códigos que usás en DB (oDeclaracion.Tipse)
        "IA" => 1.5, // Inseminacion c/celo
        "IACR" => 1.0, // Inseminacion c/celo y rep
        "IR" => 1.0, // (si lo usás como “IA con rep”)
        "ANUAL" => 1.0, // mapeado a insem con rep
        "IAPR" => 0.8, // Inseminacion c/p y rep
        "IATFR" => 1.0, // Santa Fe / IATF con rep
        _ => 0.0  // Natural/NC no consumen dosis
    };

    

 
    async Task EliminarDeclaracion()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Eliminar declaración?",
                Text = "Se eliminará la declaración y se restaurarán las dosis.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!result.IsConfirmed) return;

        if (oDeclaracion is null || string.IsNullOrWhiteSpace(oDeclaracion.Nrodec))
        {
            await Swal.FireAsync("Atención", "No se encontró la declaración a eliminar.", SweetAlertIcon.Warning);
            return;
        }

        try
        {
            // 1) Traer TODOS los detalles (Desepla3) por Nrodec
            var nrodecLower = oDeclaracion.Nrodec.ToLower();
            var filtro = $"(Nrodec == null ? \"\" : Nrodec).ToLower() == \"{nrodecLower}\"";
            var detallesResp = await _desepla3Servicio.LimitadosFiltrados(0, 0, filtro);
            var detalles = detallesResp?.List?.ToList() ?? new List<Desepla3DTO>();

            // 2) Calcular cuántas dosis devolver por HBA (solo líneas de inseminación)
            var mult = GetMultiplicadorForCode(oDeclaracion.Tipse ?? "");
            var devolverPorHba = detalles
                .Where(d => (d.Tipo ?? "").Equals("insem", StringComparison.OrdinalIgnoreCase))
                .GroupBy(d => d.Hardb)
                .ToDictionary(
                    g => g.Key,
                    g => g.Sum(d => DosisNecesarias(d.Cantv, mult))
                );

            // 3) Asegurar certificados en memoria (si está vacío, recargar)
            if (certificados == null || certificados.Count == 0)
            {
                // Si no hay socioSeleccionado, buscarlo por Nrocri de la declaración
                if (socioSeleccionado == null && !string.IsNullOrWhiteSpace(oDeclaracion.Nrocri))
                {
                    var socioFiltro = $"Id > 0"; // o el que uses; lo importante es tener certificados
                                                 // (si querés, también podés buscar socio por Scod == Nrocri)
                }

                if (!string.IsNullOrWhiteSpace(oDeclaracion.Nrocri))
                {
                    var certFiltro = $"(Nrocri == null ? \"\" : Nrocri).ToLower().Contains(\"{(oDeclaracion.Nrocri ?? "").ToLower()}\")";
                    var certrta = await _certifsemanServicio.LimitadosFiltradosNoInclude(0, 0, certFiltro);
                    certificados = certrta.List?.ToList() ?? new List<CertifsemanDTO>();
                }
            }

            // 4) Restaurar NrDosi por cada HBA involucrado
            foreach (var kvp in devolverPorHba)
            {
                var hba = kvp.Key;
                var cantidadADevolver = kvp.Value;

                if (string.IsNullOrWhiteSpace(hba) || cantidadADevolver <= 0) continue;

                var cert = certificados.FirstOrDefault(c => c.Hba == hba);
                if (cert == null)
                {
                    var f = $"(Hba == null ? \"\" : Hba).ToLower() == \"{hba.ToLower()}\"";
                    var uno = await _certifsemanServicio.LimitadosFiltradosNoInclude(0, 1, f);
                    cert = uno.List?.FirstOrDefault();
                    if (cert != null) certificados.Add(cert);
                }

                if (cert == null)
                {
                    await Swal.FireAsync("Atención", $"No se encontró certificado para HBA {hba} al restaurar dosis.", SweetAlertIcon.Warning);
                    continue;
                }

                var nuevo = (cert.NrDosi ?? 0) + cantidadADevolver;

                var r = await _certifsemanServicio.UpdateNrDosi(cert.Id, nuevo);
                if (r?.Exito != 1)
                {
                    await Swal.FireAsync("Error", r?.Mensaje ?? $"Error al restaurar dosis para HBA {hba}.", SweetAlertIcon.Error);
                    return;
                }

                cert.NrDosi = nuevo;
            }

            foreach (var d in detalles)
            {
                try { await _desepla3Servicio.Eliminar(d.Id); }
                catch { /* loggear si querés */ }
            }

            await _desepla1Servicio.Eliminar(oDeclaracion.Id);

            Navigation.NavigateTo("/declaraciones");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await Swal.FireAsync("Error", "Ocurrió un error al eliminar la declaración.", SweetAlertIcon.Error);
        }
    }
}

       