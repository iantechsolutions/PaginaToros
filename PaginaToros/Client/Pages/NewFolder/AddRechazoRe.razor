
<div class="card-body">
    <EditForm Model="@oRechazoRe" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="row" style="width=100%;">
            <div class="col-sm-4">
                <label>Motivo de rechazo</label>
                <RadzenDropDown @bind-Value=@motivo Placeholder="Seleccione el motivo" Data=@motivos Style="width: 100%; max-width: 400px;" />
            </div>
            <div class="col-sm-4">
                <label>Hembras:</label>
                <RadzenNumeric @bind-Value=@oRechazoRe.Hembras Style="width: 100%; max-width: 400px;" />
            </div>
            <div class="col-sm-4">
                <label>Machos:</label>
                <RadzenNumeric @bind-Value=@oRechazoRe.Machos Style="width: 100%; max-width: 400px;" />
            </div>
        </div>
        <br/>
        <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
        <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
    </EditForm>
</div>
@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public int nrores { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    RechazoRe oRechazoRe = new();
    Respuesta<RechazoRe> oRespuesta = new();
    List<string> motivos = new List<string> { "Pelaje", "Estado", "Desarrollo", "Aplomo", "Estructura", "Conformacion", "Pureza", "Sanidad", "Otros" };
    string motivo = "";
    Dictionary<string, int> traductorMotivos = new Dictionary<string, int>{
    {"Pelaje",1},
    {"Estado",2},
    {"Desarrollo",3},
    {"Aplomo",4},
    {"Estructura",5},
    {"Conformacion",6},
    {"Pureza",7},
    {"Sanidad",8},
    {"Otros",9}
    };

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            try
            {
                oRespuesta = await Http.GetFromJsonAsync<Respuesta<RechazoRe>>($"/api/RechazoRe/{Id}");
                oRechazoRe = oRespuesta.List;

            }
            catch (Exception ex)
            {
                oRespuesta.Mensaje = ex.Message;
            }
        }
    }

    async Task Guardar()
    {
        oRechazoRe.MotivoRechazo = traductorMotivos[motivo];
        if (Id == 0)
        {
            oRechazoRe.Nrores = nrores;
            await Http.PostAsJsonAsync<RechazoRe>("/api/RechazoRe", oRechazoRe);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await Http.PutAsJsonAsync<RechazoRe>("/api/RechazoRe", oRechazoRe);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}