@page "/toros"
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@inject HttpClient Http

<h3 style="position:relative;right:100px">Toros</h3>

<button style="position:relative;right:100px" class="btn btn-outline-primary" @onclick="()=>add(0)">Agregar Toro</button>

@if (oRespuesta.List != null)
{
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5"
        AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
        Data="@oRespuesta.List" TItem="Toro" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or" style="background-color:red">
        <Columns>
            <RadzenDataGridColumn TItem="Toro" Property="Id" Title="Id" Width="100px" />
            <RadzenDataGridColumn TItem="Toro" Property="Nombre" Title="Nombre" Width="100px" />
            <RadzenDataGridColumn TItem="Toro" Property="Calidad" Title="Calidad" Width="100px" />
            <RadzenDataGridColumn TItem="Toro" Property="NombreEst" Title="Establecimientos" Width="100px"/>
            <RadzenDataGridColumn TItem="Toro" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" position="absolute" title="Editar Transaccion" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Toro" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
        @*    <RadzenDataGridColumn TItem="Toro" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>*@

        </Columns>

    </RadzenDataGrid>

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar style="position:relative;right:100px;width:1300px;" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public bool allowFiltering = false;
    public RadzenDataGrid<Toro>? grid;
    int currentPage;
    public string Url = "/api/Toro";
    public Respuesta<List<Toro>> oRespuesta = new Respuesta<List<Toro>>();
    public List<string> oNombres = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var respuesta = await Http.GetFromJsonAsync<Respuesta<List<Toro>>>(Url);
        oRespuesta = respuesta;
        StateHasChanged();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        await Http.DeleteAsync($"/api/Toro/{id}");
        await Get();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este toro",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {

        if (Id != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddToro.id), Id);
                var formModal = Modal.Show<AddToro>("Editar Transaccion", parameters);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var formModal = Modal.Show<AddToro>("Agregar Transaccion");
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }

    //async Task gotoinfo(int id)
    //{
    //    currentPage = grid.CurrentPage;
    //    var parameters = new ModalParameters();
    //    var options = new ModalOptions()
    //        {
    //            HideHeader = true,
    //            HideCloseButton = true
    //        };
    //    parameters.Add(nameof(InfoToro.id), id);
    //    var formModal = Modal.Show<InfoToro>("", parameters, options);
    //    var result = await formModal.Result;

    //    if (result.Cancelled)
    //    {
    //        Console.WriteLine("Modal was cancelled");
    //        await grid.GoToPage(currentPage);
    //    }
    //    else
    //    {
    //        await Get();
    //        await grid.GoToPage(currentPage);
    //    }
    //}
}
