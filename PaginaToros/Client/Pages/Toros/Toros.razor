@page "/toros"
@using Blazored.Typeahead;
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@using PaginaToros.Client.Servicios.Contrato;
@inject ITorosServicio _torosServicio
@inject IJSRuntime _js
<style>
    @@media-print{
        .tablacontent{
            break-inside:avoid!important;
        }
        .no-print{
            display:none;
        }

        .page {
            position: relative;
            display: flex;
            flex-direction: column;
            margin: 0px;
            -webkit-print-color-adjust: exact;
        }
    }
    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>

<AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO">
    <Authorized>
<h3 class="pb-3 font-bold text-xl no-print" style="position:relative;left:3.33%">Toros</h3>


<button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="position:relative;left:3.33%" @onclick="()=>add(0)">Agregar Toro</button>



@if (oRespuesta.List != null)
{
    <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="outline:none; float: right;margin-right:3%;height:100%;" @onclick="()=>PaginaReporte()">Reporte x socio</button>
    <button style="outline:none; float: right;margin-right:3%;height:100%;" class="no-print px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br class="no-print" />
    <br class="no-print" />
    <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
        <RadzenDataGrid AllowFiltering="allowFiltering" IsLoading=@isLoading AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                        FilterDelay="0" Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                        Count="@cantidad" Data="@oRespuesta.List" LoadData="LoadData" TItem="TorosuniDTO" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Estado" Title="Estado" Width="3.6%">
                    <Template Context="data">
                        @traductor[data.CodEstado]
                    </Template>    
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="TipoToro" Title="Tipo de toro" Width="5%">
                    <Template Context="data">
                        @traductor[data.TipToro]
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Socio.Nombre" Title="Propietario" Width="7.34%">
                    <Template Context="data">
                        <a>
                            @data.Socio.Nombre
                        </a>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Variedad" Title="Variedad" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Sbcod" Title="Nro de orden" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Fechasba" Title="Fecha S/" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Hba" Title="HBA" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Tatpart" Title="Tatuaje" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="NrTsan" Title="Tip./ADN" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Nacido" Title="Fecha de Nacimiento" Filterable="true" Width="6%">
                    <Template Context="data">
                        @if(data.Nacido.HasValue){
                        <a>
                            @data.Nacido.Value.ToString("dd/MM/yyyy")
                        </a>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" title="Editar" @onclick="() => add(data.Id)"><FeatherEdit Size="16" Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Size="16" Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
                
                @*            <RadzenDataGridColumn TItem="Estable" Property="" Title="" Filterable="false" Width="30px">
            <Template Context="data">
            <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
            </Template>
            </RadzenDataGridColumn>*@
            </Columns>
        </RadzenDataGrid>
        
    </div>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
</Authorized>
</AuthorizeView>

<AuthorizeView Roles="Socio">
    <Authorized>
        <h3 class="pb-3 font-bold text-xl no-print" style="position:relative;left:3.33%">Toros</h3>

        @if (oRespuesta.List != null)
        {
            <button style="outline:none; float: right;margin-right:3%;height:100%;" class="no-print px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br class="no-print" />
            <br class="no-print" />
            <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
                <RadzenDataGrid AllowFiltering="allowFiltering" IsLoading=@isLoading AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                                FilterDelay="0" Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                                Count="@cantidad" Data="@oRespuesta.List" TItem="TorosuniDTO" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                    <Columns>
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Estado" Title="Estado" Width="3.6%">
                            <Template Context="data">
                                @traductor[data.CodEstado]
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="TipoToro" Title="Tipo de toro" Width="5%">
                            <Template Context="data">
                                @traductor[data.TipToro]
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Variedad" Title="Variedad" Width="4%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Sbcod" Title="Nro de orden" Width="4%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Fechasba" Title="Fecha S/" Width="4%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Hba" Title="HBA" Width="4%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Tatpart" Title="Tatuaje" Width="4%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Criador" Title="Criador" Width="4%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Socio.Nombre" Title="Propietario" Width="7.34%">
                            <Template Context="data">
                                <a>
                                    @data.Socio.Nombre
                                </a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="NrTsan" Title="Tip./ADN" Width="4%" />
                        <RadzenDataGridColumn TItem="TorosuniDTO" Property="Nacido" Title="Fecha de Nacimiento" Filterable="true" Width="6%">
                            <Template Context="data">
                                @if (data.Nacido.HasValue)
                                {
                                    <a>
                                        @data.Nacido.Value.ToString("dd/MM/yyyy")
                                    </a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

            </div>
            <br />
        }
        else
        {
            <br />
            <center>
                <div class="mb-2">
                    <br />
                    <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
                </div>
            </center>
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<TorosuniDTO>? grid;
    int currentPage;
    bool terminado = true;
    int cantidad = 0;
    Dictionary<string, string> traductor = new Dictionary<string, string>{
        {"P","Puro Pedigree (SRA)"},
        {"S","S/"},
        {"GP","Ganador de prueba"},
        {"A","Patagonico"},
        {"1","Activo"},
        {"2","Inactivo"},
        {"3","Inexistente"},
        {"4","Muerto"},
        {"5","Vendido"}
    };
    public bool isLoading = false;
    public bool allowFiltering = false;
    public Respuesta<List<TorosuniDTO>> oRespuesta = new Respuesta<List<TorosuniDTO>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var esSocio = await UserHasRole("Socio");

        if (!esSocio){

            var cant = await _torosServicio.CantidadTotal();
            cantidad = cant.List;
            oRespuesta = await _torosServicio.Lista(0, 15);
        }
        else
        {
            var usuarioId = 0;
            var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
            var user = authState.User;
            foreach (var claim in user.Claims)
            {
                if (claim.Type == "SocioId")
                {
                    usuarioId = Int32.Parse(claim.Value);
                    Console.WriteLine(usuarioId);
                }

            }

            //CAMBIAR ID
            oRespuesta = await _torosServicio.GetBySocioId(usuarioId);
            cantidad = oRespuesta.List.Count();
        }
    }

    private async Task<bool> UserHasRole(string role)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User.IsInRole(role);
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        var response = await _torosServicio.Eliminar(id);
        await grid.Reload();
        if (response){
            oRespuesta.List.Remove(oRespuesta.List.Where(x => x.Id == id).FirstOrDefault());

            if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
            {
                await grid.GoToPage(currentPage - 1);
            }
            else if (grid.Count != 0)
            {
                await grid.GoToPage(currentPage);
            }
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este toro",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {
        int numero = Id;
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddToro.Id), Id);
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge
                    };
                var formModal = Modal.Show<AddToro>("Editar Toro", parameters, options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            var formModal = Modal.Show<AddToro>("Agregar Toro", options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        if (!string.IsNullOrEmpty(args.Filter))
        {
            oRespuesta = await _torosServicio.LimitadosFiltrados(args.Skip.Value, args.Top.Value, args.Filter);
            // oRespuesta.List = oRespuesta.List.Where(args.Filter)
        }
        else
        {
            oRespuesta = await _torosServicio.Lista(args.Skip.Value,args.Top.Value);
        }

        isLoading = false;
    }

    public async Task PaginaReporte()
    {
        nav.NavigateTo($"/reporteprint/1");
    }

    // public async Task ChangeInfo()
    // {
    //     terminado = false;
    //     string filtro = $"(Socio.Scod == null ? \"\" : Socio.Scod).ToLower().Contains(\"{socioSeleccionado.Scod}\".ToLower())";
    //     oRespuesta = await _torosServicio.LimitadosFiltrados(0, 0, filtro);
    //     terminado = true;
    // }


    // async Task gotoinfo(int id)
    // {
    //     currentPage = grid.CurrentPage;
    //     var parameters = new ModalParameters();
    //     var options = new ModalOptions()
    //         {
    //             HideHeader = true,
    //             HideCloseButton = true,
    //             Size = ModalSize.ExtraLarge
    //         };
    //     parameters.Add(nameof(InfoEstablecimiento.id), id);
    //     var formModal = Modal.Show<InfoEstablecimiento>("", parameters, options);
    //     var result = await formModal.Result;

    //     if (result.Cancelled)
    //     {
    //         Console.WriteLine("Modal was cancelled");
    //         await grid.GoToPage(currentPage);
    //     }
    //     else
    //     {
    //         await Get();
    //         await grid.GoToPage(currentPage);
    //     }
    // }

    //public class TorosuniDTO
    //{
    //    public int Id { get; set; }
    //    public string? Estado { get; set; }
    //    public string? TipoToro { get; set; }
    //    public string? Variedad { get; set; }
    //    public string? NomDad { get; set; }
    //    public int? Sbcod { get; set; }
    //    public string? Fechasba { get; set; }
    //    public string? Hba { get; set; }
    //    public string? Tatpart { get; set; }
    //    public string? NombreSocio { get; set; }
    //    public DateTime? Nacido { get; set; }
    //    public string? CircEscrotal { get; set; }
    //}

}
