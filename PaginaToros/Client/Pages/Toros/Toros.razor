@page "/toros"
@using Blazored.Typeahead;
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@using PaginaToros.Client.Servicios.Contrato;
@inject ITorosServicio _torosServicio
@inject ISocioServicio _socioServicio
@inject IJSRuntime _js
<style>
    @@media-print{
        .tablacontent{
            break-inside:avoid!important;
        }
        .no-print{
            display:none;
        }

        .page {
            position: relative;
            display: flex;
            flex-direction: column;
            margin: 0px;
            -webkit-print-color-adjust: exact;
        }
    }
    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }

    .toros-toolbar {
              display: flex;
              align-items: center;
              gap: .75rem;
              margin: .5rem 3.33% 1rem;
              width: 93.5%;
            }
            .toros-toolbar-left { display: flex; align-items: center; gap: .5rem; }
            .toros-toolbar-right { margin-left: auto; } 
            .btn-compact { padding: .375rem .75rem; line-height: 1.1; border-radius: .75rem; }
            .btn-icon { width: 36px; height: 36px; display: inline-flex; align-items: center; justify-content: center; padding: 0; border-radius: .75rem; }
            .toros-typeahead { min-width: 360px; max-width: 520px; }
</style>

    

<h3 class="pb-3 font-bold text-xl no-print" style="position:relative;left:3.33%">Toros</h3>



   


@if (oRespuesta.List != null)
{

    <div class="toros-toolbar no-print">
        @if (!esSocio)
        {
            <div class="toros-toolbar-left">
                <button class="btn btn-light btn-compact rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent"
                         @onclick="()=>add(0)">
                    Agregar Toro
                </button>
                <BlazoredTypeahead class="toros-typeahead"
                                   SearchMethod="BusquedaSocios"
                                   placeholder="Buscar por socio"
                                   EnableDropDown="true"
                                   @bind-Value="socioSeleccionado">
                    <SelectedTemplate Context="eleccion">@eleccion.Nombre</SelectedTemplate>
                    <ResultTemplate Context="eleccion">@eleccion.Nombre</ResultTemplate>
                </BlazoredTypeahead>

                <button class="btn btn-light btn-compact rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent"
                        @onclick="()=>BuscarPorSocio()">
                    Buscar
                </button>

                <button class="btn btn-light btn-compact rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent"
                        @onclick="()=>PaginaReporte()">
                    Reporte x socio
                </button>
            </div>
        }

        <div class="toros-toolbar-right">
                        <button class="btn btn-light btn-icon" title="Filtros" @onclick="() => CambiarModoFiltro()">
                            <FeatherFilter Color="Black"></FeatherFilter>
                        </button>
                    </div>
    </div>
    
    <br class="no-print" />
    <br class="no-print" />
    <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
        <RadzenDataGrid AllowFiltering="allowFiltering" IsLoading=@isLoading AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                        FilterDelay="0" Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                        Count="@cantidad" Data="@oRespuesta.List" LoadData="LoadData" TItem="TorosuniDTO" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                @if (!esSocio)
                {
                    <RadzenDataGridColumn TItem="TorosuniDTO" Property="Estado" Title="Estado" Width="3.6%">
                        <Template Context="data">@traductor[data.CodEstado]</Template>
                    </RadzenDataGridColumn>
                }
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="TipToro" Title="Tipo de toro" Width="5%">
                    <Template Context="data">
                        @traductor[data.TipToro]
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Socio.Nombre" Title="Propietario" Width="7.34%">
                    <Template Context="data">
                        <a>
                            @data.Socio.Nombre
                        </a>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Variedad" Title="Variedad" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="NomDad" Title="Nombre del toro" Width="7.34%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Sbcod" Title="Nro de orden" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Fechasba" Title="Fecha S/" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Hba" Title="HBA" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Tatpart" Title="Tatuaje" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="NrTsan" Title="Tip./ADN" Width="4%" />
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="Nacido" Title="Fecha de Nacimiento" Filterable="true" Width="6%">
                    <Template Context="data">
                        @if(data.Nacido.HasValue){
                        <a>
                            @data.Nacido.Value.ToString("dd/MM/yyyy")
                        </a>
                        }
                    </Template>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="TorosuniDTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" title="Editar" @onclick="() => add(data.Id)"><FeatherEdit Size="16" Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                @if (!esSocio){
                <RadzenDataGridColumn TItem="TorosuniDTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Size="16" Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
                }
                
             
            </Columns>
        </RadzenDataGrid>
        
    </div>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}




@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<TorosuniDTO>? grid;
    int currentPage;
    bool terminado = true;
    int cantidad = 0;

    public bool esSocio = true;
    private int socioIdActual = 0;
    SocioDTO socioSeleccionado;
    List<SocioDTO> socios = new List<SocioDTO>();
    Dictionary<string, string> traductor = new Dictionary<string, string>{
        {"P","Puro Pedigree (SRA)"},
        {"S","S/"},
        {"GP","Ganador de prueba"},
        {"A","Patagonico"},
        {"1","Activo"},
        {"2","Inactivo"},
        {"3","Inexistente"},
        {"4","Muerto"},
        {"5","Vendido"}
    };
    public bool isLoading = false;
    public bool allowFiltering = false;
    public Respuesta<List<TorosuniDTO>> oRespuesta = new Respuesta<List<TorosuniDTO>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        esSocio = await UserHasRole("Socio");

        if (!esSocio)
        {
            var rta = await _socioServicio.LimitadosFiltrados(0, 0);
            socios = rta.List;
            var cant = await _torosServicio.CantidadTotal();
            cantidad = cant.List;
            oRespuesta = await _torosServicio.Lista(0, 15);
        }
        else
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            foreach (var claim in user.Claims)
            {
                if (claim.Type == "SocioId")
                {
                    socioIdActual = int.Parse(claim.Value);
                    break;
                }
            }

            oRespuesta = await _torosServicio.GetBySocioId(socioIdActual);

            oRespuesta.List = oRespuesta.List
                .Where(x => x.CodEstado == "1")
                .OrderBy(x => x.NomDad) 
                .ToList();

            cantidad = oRespuesta.List.Count();
        }
    }

    private async Task<bool> UserHasRole(string role)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User.IsInRole(role);
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        var response = await _torosServicio.Eliminar(id);
        await grid.Reload();
        if (response){
            oRespuesta.List.Remove(oRespuesta.List.Where(x => x.Id == id).FirstOrDefault());

            if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
            {
                await grid.GoToPage(currentPage - 1);
            }
            else if (grid.Count != 0)
            {
                await grid.GoToPage(currentPage);
            }
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este toro",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {
        int numero = Id;

        if (Id == 0 && esSocio)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Acción no permitida",
                    Text = "Como socio solo podés editar tus toros. No podés agregar nuevos.",
                    Icon = SweetAlertIcon.Info,
                    ConfirmButtonText = "Entendido"
                });
            return;
        }
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddToro.Id), Id);
                parameters.Add(nameof(AddToro.EsSocio), esSocio); 
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge
                    };
                var formModal = Modal.Show<AddToro>("Editar Toro", parameters, options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    if(socioSeleccionado==null){
                        await Get();
                        await grid.GoToPage(currentPage);
                    }
                    else
                    {
                        string filtro = $"Socio.Id={socioSeleccionado.Id}";
                        oRespuesta = await _torosServicio.LimitadosFiltrados(0, 600, filtro);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            var formModal = Modal.Show<AddToro>("Agregar Toro", options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                if (socioSeleccionado == null)
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    string filtro = $"Socio.Id={socioSeleccionado.Id}";
                    oRespuesta = await _torosServicio.LimitadosFiltrados(0, 60, filtro);
                }
            }
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var gridFilter = string.IsNullOrWhiteSpace(args?.Filter) ? null : args.Filter.Trim();

        string? serverFilter = null;

        if (esSocio)
        {
            serverFilter = $"Socio.Id=={socioIdActual} and CodEstado=='1'";
            if (!string.IsNullOrWhiteSpace(gridFilter))
                serverFilter = $"{serverFilter} and ({gridFilter})";
        }
        else if (socioSeleccionado != null)
        {
            serverFilter = $"Socio.Id=={socioSeleccionado.Id}";
            if (!string.IsNullOrWhiteSpace(gridFilter))
                serverFilter = $"{serverFilter} and ({gridFilter})";
        }
        else
        {
            serverFilter = gridFilter;
        }

        var skip = args?.Skip ?? 0;
        var take = args?.Top ?? 15;

        if (!string.IsNullOrWhiteSpace(serverFilter))
        {
            oRespuesta = await _torosServicio.LimitadosFiltrados(skip, take, serverFilter);
            var cantResp = await _torosServicio.CantidadFiltrada(serverFilter);
            cantidad = cantResp.List;
        }
        else
        {
            oRespuesta = await _torosServicio.Lista(skip, take);
            var cantResp = await _torosServicio.CantidadFiltrada(serverFilter);
            cantidad = cantResp.List;
        }

        isLoading = false;
    }


    public async Task PaginaReporte()
    {
        nav.NavigateTo($"/reporteprint/1");
    }

    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {
        var result = socios.Where(x => x.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }

    private async Task BuscarPorSocio(){
        if (socioSeleccionado != null)
        {
            var coso = new LoadDataArgs();
            await grid.Reload();
            await LoadData(coso);
        }
        else
        {
            var coso = new LoadDataArgs();
            coso.Skip = 0;
            coso.Top = 15;
            await LoadData(coso);
        }
    }
    

}
