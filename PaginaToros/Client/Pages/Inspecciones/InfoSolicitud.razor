@using PaginaToros.Client.Servicios.Contrato;
@inject ISolici1Servicio _solici1Servicio
@inject ISolici1AuxServicio _solici1AuxServicio
@inject IDesepla1Servicio _desepla1Servicio
@inject IEstableServicio _estableServicio
@inject IResin1Servicio _resin1Servicio
@inject IInspectServicio _inspectServicio
@inject ISocioServicio _socioServicio
@inject IJSRuntime _js
<style>
    @@page {
        margin: 0;
        size: auto; 
    }

  

    @@media-print {
        .row {
            break-inside: avoid;
        }

        table {
            break-inside: avoid;
        }

        .no-print {
            display: none !important;
        }

        br {
            display: none !important;
        }

       

        * {
            border: none !important;
            outline: none !important;
            box-shadow: none !important;
            margin: 0 !important;
            padding: 0 !important;
        }

        .modal-content {
            border: none;
        }
        body {
            margin: 0 !important;
        }
    }
</style>
@if(Inspector is not null){

<div class="m-3" style="height:max-content;">
        <div>
        <h3><strong>Solicitud id nro° @id</strong></h3>
            <button class="btn no-print" style="float:right" title="Imprimir" @onclick="() => Print()"><FeatherPrinter Color="Black" Size="24" /></button>
        </div>
    <div class="row">
        <div class="col-3">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Establecimiento</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oSolicitud.Establecimiento.Nombre</b></RadzenText>
        </div>
            <div class="col-3">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Nro Socio</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oSolicitud.Establecimiento.Socio.Scod</b></RadzenText>
        </div>

            <div class="col-3">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Plantel</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@socio.Placod</b></RadzenText>
        </div>
            <div class="col-3">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Nombre Socio</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oSolicitud.Establecimiento.Socio.Nombre</b></RadzenText>
        </div>
            <div class="col-3">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Control de Produccion?</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@(oSolicitud.Produc=="S" ? "SI" : "NO")</b></RadzenText>
        </div>
            <div class="col-3">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">ReInspeccion?</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@(oSolicitud.Reinsp=="S" ? "SI" : "NO")</b></RadzenText>
        </div>
            <div class="col-3">
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Inspeccion solicitada el</RadzenText>
            @if (oSolicitud.Fecsol.HasValue)
            {
                <RadzenText TextStyle="TextStyle.Body1"><b>@oSolicitud.Fecsol.Value.ToString("dd/MM/yyyy")</b></RadzenText>
            }
            else{
                <RadzenText TextStyle="TextStyle.Body1"><b></b></RadzenText>
            }
            </div>
            <div class="col-3">

        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Inspeccion autorizada el</RadzenText>
            @if (oSolicitud.Fecins.HasValue){
                <RadzenText TextStyle="TextStyle.Body1"><b>@oSolicitud.Fecins.Value.ToString("dd/MM/yyyy")</b></RadzenText>
            }
            else{
                <RadzenText TextStyle="TextStyle.Body1"><b></b></RadzenText>
            }
        </div>
    </div>
    <br class="no-print"/>
    <br/>
        @foreach (var soliAux in ListaSoliAux)
        {
            var declaracionesPorAnio = Declaraciones
            .Where(x =>
            (x.Desde.HasValue && x.Desde.Value.Year.ToString() == soliAux.Anio) ||
            (x.Hasta.HasValue && x.Hasta.Value.Year.ToString() == soliAux.Anio))
            .GroupBy(x => x.Id)
            .Select(x => x.First())
            .ToList();

            <center>
                <h3 style="font-weight:bold">Año de nacimiento: @soliAux.Anio</h3>
                <br />
            </center>
            <h3 style="font-weight:bold">Declaraciones</h3>
        <table class="table table-bordered text-center" bottom="middle" border="1" align="center">
            <tbody>
                <tr style="background-color: #82D682;font-size:12px">
                    <th>Nro Declaracion</th>
                    <th>Nro Plantel</th>
                    <th>Tipo Servicio</th>
                    <th>DESDE</th>
                    <th>HASTA</th>
                    <th>Vtres PR</th>
                    <th>Vtres VIP</th>
                    <th>Toros PR</th>
                    <th>Vq PR</th>
                </tr>
                @foreach (var decla in declaracionesPorAnio)
                {
                    var calculoToroVq = decla.Cantv.HasValue
                        ? (decla.Tipse == "IR" ? Math.Round((double)(decla.Cantv * 0.8) / 2) : Math.Round((double)(decla.Cantv * 0.85) / 2))
                        : 0;

                    <tr>
                        <td>@decla.Nrodec</td>
                        <td>@decla.Nroplan</td>
                        <td>@(traductor.ContainsKey(decla.Tipse) ? traductor[decla.Tipse] : "")</td>
                        <td>@(decla.Desde?.ToString("dd/MM/yyyy"))</td>
                        <td>@(decla.Hasta?.ToString("dd/MM/yyyy"))</td>
                        <td>@decla.Cantv</td>
                        <td>@decla.Cantb</td>
                        <td>@calculoToroVq</td>
                        <td>@calculoToroVq</td>
                    </tr>
                }
            </tbody>
        </table>

            var disponibles = Math.Round(declaracionesPorAnio.Sum(x =>
                x.Cantv.HasValue
                    ? (x.Tipse == "IR" ? Math.Round((double)(x.Cantv * 0.8) / 2) : Math.Round((double)(x.Cantv * 0.85) / 2))
                    : 0));

            var autorizadosToro = Math.Round(Math.Min((float)soliAux.Cantor, (float)disponibles));
            var autorizadosVq = Math.Round(Math.Min((float)soliAux.Cantvq, (float)disponibles));
            var remanenteToro = disponibles - autorizadosToro;
            var remanenteVq = disponibles - autorizadosVq;

        <table class="table table-bordered text-center" width="334" align="center">
            <tbody>
                <tr style="background-color:#CCCCCC">
                    <td style="background-color:#FFFFFF"></td>
                    <td><strong>Toros PR</strong></td>
                    <td><strong>Vq PR</strong></td>
                    <td><strong>Hembras VIP</strong></td>
                </tr>
                <tr>
                    <td><strong>Disponibles</strong></td>
                    <td>@disponibles</td>
                    <td>@disponibles</td>
                    <td>0</td>
                </tr>
                <tr style="background-color:#999999">
                    <td><strong>Pedidos</strong></td>
                    <td>@soliAux.Cantor</td>
                    <td>@soliAux.Cantvq</td>
                    <td>@(soliAux.Canvac + soliAux.Canvaq)</td>
                </tr>
                <tr>
                    <td><strong>Autorizados</strong></td>
                    <td>@autorizadosToro</td>
                    <td>@autorizadosVq</td>
                    <td>0</td>
                </tr>
                <tr style="background-color:#999999">
                    <td><strong>Remanentes</strong></td>
                    <td>@remanenteToro</td>
                    <td>@remanenteVq</td>
                    <td>0</td>
                </tr>
            </tbody>
        </table>

        <br class="no-print" />
        <br class="no-print" />
    }

   @*  }
    else
    {
        <table class="table table-bordered text-center" bottom="middle" width="334" bgcolor="#FFFFFF" align="center">
            <tbody>
                <tr style="background-color:#CCCCCC">
                    <td width="85" style="background-color:#FFFFFF"></td>
                    <td width="75"><strong style="font-size:12px">Toros PR</strong></td>
                    <td width="62"><strong style="font-size:12px">Vq PR</strong></td>
                    <td width="92"><strong style="font-size:12px">Hembras VIP</strong></td>
                </tr>
                <tr style="background-color:#999999">
                    <td style="font-size:12px;background-color:#999999"><strong>Pedidos</strong></td>
                    <td >@oSolicitud.Cantor</td>
                    <td >@oSolicitud.Cantvq</td>
                        <td>@(oSolicitud.Canvac + oSolicitud.Canvaq)</td>
                </tr>
                <tr>
                    <td style="font-size:12px"><strong>Autorizados</strong></td>
                    <td>0</td>
                    <td>0</td>
                    <td>0</td>
                </tr>
                    <tr>
                        <td style="font-size:12px" bgcolor="#999999"><strong>Remanentes</strong></td>
                        <td bgcolor="#999999"><p>0</p></td>
                        <td bgcolor="#999999"><p>0</p></td>
                        <td bgcolor="#999999"><p>0</p></td>
                    </tr>
            </tbody>
        </table>
    } *@
        <br class="no-print" />
        <br class="no-print" />
    <table class="table table-bordered text-center" bottom="middle" style="font-size:18px" align="center">
        <tbody>
            <tr>
                <th style="background-color:#82D682;font-size:12px" width="150">Nombre Establecimiento</th>
                <th style="background-color:#82D682;font-size:12px" width="100">Domicilio</th>
                <th style="background-color:#82D682;font-size:12px" width="150">Localidad</th>
                <th style="background-color:#82D682;font-size:12px"width="100">Cod Postal</th>
                <th style="background-color:#82D682;font-size:12px" width="100">Provincia</th>
            </tr>
            <tr>
                <td style="font-size:12px">@oSolicitud.Establecimiento.Nombre</td>
                <td style="font-size:12px">@oSolicitud.Establecimiento.Direcc</td>
                <td style ="font-size:12px">@oSolicitud.Establecimiento.Locali</td>
                <td style="font-size:12px">@oSolicitud.Establecimiento.Codpos</td>
                <td style="font-size:12px">@oSolicitud.Establecimiento.Provincia.Nombre</td>
            </tr>
            <tr>
                <th style="background-color:#82D682;font-size:12px" colspan="5" width="300"><p align="center">Plano</p></th>
            </tr>
            <tr>
                <td colspan="5" style="font-size:12">@oSolicitud.Establecimiento.Plano</td>
            </tr>
        </tbody>
    </table>
    <br class="no-print"/>
        <br class ="no-print" />
    <table class="table table-bordered text-center" bottom="middle" align="center">
        <tbody>
            <tr>
                <th style ="background-color:#82D682">Nro Zona</th>
                <th style="background-color:#82D682">Inspector</th>
            </tr>

            <tr>
                <td>@oSolicitud.Establecimiento.Codzon</td>
                <td>
                    @Inspector.Nombre
                </td>
            </tr>
        </tbody>
    </table>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    bool declaracion = false;
    Solici1DTO oSolicitud = new();
    Resin1DTO Resultado = new();
    List<Desepla1DTO> Declaraciones = new();
    SocioDTO socio = new();
    List<InspectDTO> Inspectores = new();
    double disponibles = 0;
    InspectDTO? Inspector = null;
    List<Solici1AuxDTO> ListaSoliAux = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    List<string> aniosSoli = new();
    Dictionary<string, string> traductor = new Dictionary<string, string>
    {
        {"Natural","NA"},
        {"Natural a Corral","NC"},
        {"Santa Fe","IATFR"},
        {"Inseminacion c/p y rep","IAPR"},
        {"Inseminacion c/celo y rep","IACR"},
        {"Inseminacion c/celo","IA"},
        {"NA", "Natural"},
        {"NC", "Natural a Corral"},
        {"IR", "Inseminacion c/celo y rep"},
        {"IATFR", "Santa Fe"},
        {"IAPR", "Inseminacion c/p y rep"},
        {"IACR", "Inseminacion c/celo y rep"},
        {"IA", "Inseminacion c/celo"},
        {"ANUAL", "Inseminacion c/celo y rep"}
    };
    protected override async Task OnInitializedAsync()
    {

        Console.WriteLine("Que es esot?");
        try{



            var r = await _inspectServicio.LimitadosFiltradosIncludeZonas(0, 0);
            Inspectores = r.List;

            if (id != 0)
            {
                string filtro = $"Id = {id}";
                var list = await _solici1Servicio.LimitadosFiltrados(0, 1, filtro);
                oSolicitud = list.List.FirstOrDefault();


                Console.WriteLine(id);
                var auxs = await _solici1AuxServicio.GetBySolId(id);
                ListaSoliAux = auxs.List;

                filtro = $"(Nrores == null ? \"\" : Nrores).ToLower().Contains(\"{oSolicitud.Nrosol}\".ToLower())";
                var rt = await _resin1Servicio.LimitadosFiltrados(0, 1, filtro);
                Console.WriteLine("ver");
                var socioId = oSolicitud.Establecimiento.Socio.Id;

                filtro = $"Id == {socioId}";
                var sociorta = await _socioServicio.LimitadosFiltrados(0,0,filtro);
                socio = sociorta.List.First();

                Console.WriteLine("Varr");
                foreach(var aux in ListaSoliAux){
                    aniosSoli.Add(aux.Anio);
                }
                var rta = await _desepla1Servicio.GetBySocioId(socioId);
                Declaraciones = rta.List;
                Declaraciones = Declaraciones.Where(x => x.Desde.HasValue && aniosSoli.Contains(x.Desde.Value.Year.ToString())
                || x.Hasta.HasValue && aniosSoli.Contains(x.Hasta.Value.Year.ToString())).ToList();

                Declaraciones = Declaraciones.GroupBy(x => x.Id).Select(x => x.FirstOrDefault()).Where(x => x != null).ToList();


                disponibles = Math.Round(Declaraciones.Sum(x => x.Cantv.HasValue ? (x.Tipse == "IR" ? Math.Round((double)(x.Cantv * 0.8) / 2) : Math.Round((double)(x.Cantv * 0.85) / 2)) : 0));

                Console.WriteLine(rt.List.Count());
                if (rt.List.Count > 0)
                {  
                    var inspecId = rt.List.FirstOrDefault().Icod;

                    Inspector = Inspectores.Where(x => x.Icod == inspecId).FirstOrDefault();
                }
                if (Inspector is null)
                {
                    Estable? est = oSolicitud.Establecimiento;
                    if (est != null)
                    {
                        
                        var inspec = Inspectores.FirstOrDefault(inspector => inspector.Zonas.Any(zona => zona.Zcod == est.Codzon));
                        if (inspec != null)
                        {
                            Inspector = inspec;
                        }
                        else
                        {
                            if (Inspectores.Any(x => x.Provincia.Pcod == socio.Provincia.Pcod))
                            {
                                Inspector = Inspectores.First(x => x.Provincia.Pcod == socio.Provincia.Pcod);
                            }
                            else
                            {
                                Inspector = new InspectDTO();
                            }
                        }
                    }
                    else{

                        if (Inspectores.Any(x => x.Provincia.Pcod == socio.Provincia.Pcod))
                        {
                            Inspector = Inspectores.Where(x => x.Provincia.Pcod == socio.Provincia.Pcod).First();
                        }
                        else
                        {
                            Inspector = new InspectDTO();
                        }
                    }
                }

            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}

