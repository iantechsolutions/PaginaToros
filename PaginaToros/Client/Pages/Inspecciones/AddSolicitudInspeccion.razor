@using Blazored.Typeahead

<div class="card" >
    <div class="card-body">
        <EditForm Model="@oSolici1" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm"/>
                    <div class="col-md-6">
                        <label>Socio</label>
                            <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Busque socio por nombre"  EnableDropDown="true" @bind-Value="socioSeleccionado">
                                <SelectedTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </SelectedTemplate>
                                <ResultTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </ResultTemplate>
                            </BlazoredTypeahead>
                    </div>
                <div class="col-sm"/>
            </div>
            <br/>
            @if(socioSeleccionado!=null){
                <div class="row" style="width=100%;">
                    <div class="col-sm">
                        <label class="col-sm">Establecimiento</label>
                            <BlazoredTypeahead SearchMethod="BusquedaEstablecimientos" placeholder="Busque establecimiento por nombre" EnableDropDown="true" @bind-Value="establecimientoSeleccionado">
                                <SelectedTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </SelectedTemplate>
                                <ResultTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </ResultTemplate>
                            </BlazoredTypeahead>
                    </div>
                    <div class="col-sm">
                        <label>Fecha de Solicitud</label><br/>
                        <RadzenDatePicker TValue="DateTime?" @bind-Value="@oSolici1.Fecsol" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                    <div class="col-sm">
                        <label>Fecha de Autorizacion</label><br/>
                        <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaTemp" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                </div>
                <br />
                <div class="row" style="width=100%;">
                    <div class="col-sm">
                        <label class="col-sm">Toros PR</label><br />
                        <InputNumber @bind-Value="@oSolici1.Cantor" class="form-control" placeholder="Cantidad"></InputNumber>
                        <ValidationMessage For="(()=> oSolici1.Cantor)" style="color:red;" />
                    </div>
                    <div class="col-sm">
                        <label class="col-sm">Vacas PR</label><br />
                        <InputNumber @bind-Value="@oSolici1.Cantvq" class="form-control" placeholder="Cantidad"></InputNumber>
                        <ValidationMessage For="(()=> oSolici1.Cantvq)" style="color:red;" />

                    </div>
                    <div class="col-sm">
                        <label class="col-sm">Vacas Vip</label><br />
                        <InputNumber @bind-Value="@oSolici1.Canvac" class="form-control" placeholder="Cantidad"></InputNumber>
                        <ValidationMessage For="(()=> oSolici1.Canvac)" style="color:red;" />

                    </div>
                    <div class="col-sm">
                        <label class="col-sm">Vaquillonas Vip</label>
                        <InputNumber @bind-Value="@oSolici1.Canvaq" class="form-control" placeholder="Cantidad"></InputNumber>
                        <ValidationMessage For="(()=> oSolici1.Canvaq)" style="color:red;" />

                    </div>
                </div>
                <br />
                <div class="row" style="width=100%;">
                    <div class="col-sm">
                        <label class="col-sm">Reinspeccion?</label><br/>
                        <input type="checkbox" @bind="@activoReInspeccion">
                    </div>
                    <div class="col-sm">
                        <label class="col-sm">Control de Produccion?</label><br/>
                        <input type="checkbox" @bind="@activoControl">
                    </div>
                    <div class="col-sm">
                    </div>
                </div>
                
                <br />
                <br />   
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            }
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
@code {
    Solici1 oSolici1 = new();
    List<Socio> socios = new();
    List<Estable> establecimientos = new();
    Respuesta<Solici1> oRespuesta = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    DateTime FechaTemp = DateTime.Now.Date;
    bool activoReInspeccion = false;
    bool activoControl = false;
    Socio? socioSeleccionado = null;
    Estable establecimientoSeleccionado = new();

    protected override async Task OnInitializedAsync()
    {
        var rta = await Http.GetFromJsonAsync<Respuesta<List<Socio>>>($"/api/socio");
        socios = rta.List.ToList();
        var respuesta = await Http.GetFromJsonAsync<Respuesta<List<Estable>>>($"/api/Establecimiento");
        establecimientos = respuesta.List;
        if (Id != 0)
        {
            try
            {
                oRespuesta = await Http.GetFromJsonAsync<Respuesta<Solici1>>($"/api/Solici1/{Id}");
                oSolici1 = oRespuesta.List;
                establecimientoSeleccionado = establecimientos.Where(x => x.Nombre == oSolici1.Codest).FirstOrDefault();
                socioSeleccionado = socios.Where(x => x.Nombre == establecimientoSeleccionado.Codsoc).FirstOrDefault();
                if (oSolici1.Reinsp=="S")
                {
                    activoReInspeccion = true;
                }
                else
                {
                    activoReInspeccion = false;
                }
                if (oSolici1.Produc=="S")
                {
                    activoControl = true;
                }
                else
                {
                    activoControl = false;
                }
                if (oSolici1.Fecins.HasValue)
                {
                    FechaTemp = oSolici1.Fecins.Value;
                }

            }
            catch (Exception ex)
            {
                oRespuesta.Mensaje = ex.Message;
            }
        }
    }
    async Task Guardar()
    {
        oSolici1.Fecins = FechaTemp;
        if (activoControl)
        {
            oSolici1.Produc = "S";
        }
        else
        {
            oSolici1.Produc = "N";
        }
        if (activoReInspeccion)
        {
            oSolici1.Reinsp = "S";
        }
        else
        {
            oSolici1.Reinsp = "N";
        }
        oSolici1.Codest = establecimientoSeleccionado.Ecod;

        if (Id == 0)
        {
            await Http.PostAsJsonAsync<Solici1>("/api/Solici1", oSolici1);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await Http.PutAsJsonAsync<Solici1>("/api/Solici1", oSolici1);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    

    private async Task<IEnumerable<Socio>> BusquedaSocios(string searchText)
    {
        return await Task.FromResult(socios.Where(x => x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Estable>> BusquedaEstablecimientos(string searchText)
    {
        return await Task.FromResult(establecimientos.Where(x => x.Codsoc==socioSeleccionado.Scod && x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }

}
