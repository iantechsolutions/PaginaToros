@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@inject ISolici1Servicio _solici1Servicio
@inject IEstableServicio _estableServicio
@inject ISocioServicio _socioServicio
@if(establecimientos.Count>0){
<div class="card" >
    <div class="card-body">
        <EditForm Model="@oSolici1" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm"/>
                    <div class="col-md-6">
                        <label>Socio</label>
                            <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Busque socio por nombre" Disabled="esSocio" EnableDropDown="true" @bind-Value="socioSeleccionado">
                                <SelectedTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </SelectedTemplate>
                                <ResultTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </ResultTemplate>
                            </BlazoredTypeahead>
                    </div>
                <div class="col-sm"/>
            </div>
            <br/>
            @if(socioSeleccionado!=null){
                <div class="row" style="width=100%;">
                    <div class="col-sm">
                        <label class="col-sm">Establecimiento</label>
                            <BlazoredTypeahead SearchMethod="BusquedaEstablecimientos" placeholder="Busque establecimiento por nombre" Disabled="esSocio" EnableDropDown="true" @bind-Value="establecimientoSeleccionado">
                                <SelectedTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </SelectedTemplate>
                                <ResultTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </ResultTemplate>
                            </BlazoredTypeahead>
                    </div>
                    <div class="col-sm">
                        <label>Fecha de Solicitud</label><br/>
                            <RadzenDatePicker TValue="DateTime?" @bind-Value="@oSolici1.Fecsol" ShowTime="false" Disabled="esSocio" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                    <div class="col-sm">
                        <label>Fecha de Autorizacion</label><br/>
                            <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaTemp" ShowTime="false" ShowSeconds="false" Disabled="esSocio" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                </div>

                    @foreach(var soli in listadoSolicitudes)
                    {

                        <br />
                        <div class="row" style="width=100%;">
                            <div class="col-sm">
                                <label class="col-sm">Toros PR</label><br />
                                <InputNumber @bind-Value="@soli.Cantor" class="form-control" placeholder="Cantidad" disabled="@esSocio"></InputNumber>
                                <ValidationMessage For="(()=> soli.Cantor)" style="color:red;" />
                            </div>
                            <div class="col-sm">
                                <label class="col-sm">Vacas PR</label><br />
                                <InputNumber @bind-Value="@soli.Cantvq" class="form-control" placeholder="Cantidad" disabled="@esSocio"></InputNumber>
                                <ValidationMessage For="(()=> soli.Cantvq)" style="color:red;" />
                            </div>
                            <div class="col-sm">
                                <label class="col-sm">Vacas Vip</label><br />
                                <InputNumber @bind-Value="@soli.Canvac" class="form-control" placeholder="Cantidad" disabled="@esSocio"></InputNumber>
                                <ValidationMessage For="(()=> soli.Canvac)" style="color:red;" />
                            </div>
                            <div class="col-sm">
                                <label class="col-sm">Vaquillonas Vip</label><br />
                                <InputNumber @bind-Value="@soli.Canvaq" class="form-control" placeholder="Cantidad" disabled="@esSocio"></InputNumber>
                                <ValidationMessage For="(()=> soli.Canvaq)" style="color:red;" />
                            </div>
                            <div class="col-sm">
                                <label>Año</label><br />
                                <InputText @bind-Value="@soli.Anio" class="form-control" placeholder="Año" disabled="@esSocio"></InputText>
                            </div>
                        </div>
                    }

                    <br/>
                @if(!esSocio){
                <center style="padding-right:20px">
                        <button type="button" class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="position:relative;left:3.33%" @onclick="()=>listadoSolicitudes.Add(new Solici1DTO())"><FeatherPlus Size="24" Color="Black" /></button>
                </center>
                    }
                <br />
                <div class="row" style="width=100%;">
                    <div class="col-sm">
                        <label class="col-sm">Reinspeccion?</label><br/>
                            <input type="checkbox" @bind="@activoReInspeccion" disabled="@esSocio">
                    </div>
                    <div class="col-sm">
                        <label class="col-sm">Control de Produccion?</label><br/>
                            <input type="checkbox" @bind="@activoControl" disabled="@esSocio">
                    </div>
                    <div class="col-sm">
                    </div>
                </div>
                
                <br />
                <br />   
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            }
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
}
else
    {
        <br />
        <center>
            <div class="mb-2">
                <br />
                <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
            </div>
        </center>
    }
@code {
    Solici1DTO oSolici1 = new();
    List<SocioDTO> socios = new();
    List<EstableDTO> establecimientos = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public bool esSocio { get; set; }
    
    List<Solici1DTO> listadoSolicitudes = new ();

    DateTime FechaTemp = DateTime.Now.Date;
    bool activoReInspeccion = false;
    bool activoControl = false;
    SocioDTO? socioSeleccionado = null;
    EstableDTO establecimientoSeleccionado = new();

    protected override async Task OnInitializedAsync()
    {
        var rta = await _socioServicio.LimitadosFiltrados(0,0);
        socios = rta.List;
        var respuesta = await _estableServicio.LimitadosFiltradosNoInclude(0, 0);
        establecimientos = respuesta.List;
        if (Id != 0)
        {
            try
            {
                string filtro = $"Id = {Id}";
                var coso = await _solici1Servicio.LimitadosFiltradosNoInclude(0,1,filtro);
                oSolici1 = coso.List.FirstOrDefault();
                establecimientoSeleccionado = establecimientos.Where(x => x.Ecod == oSolici1.Codest).FirstOrDefault();
                socioSeleccionado = socios.Where(x => x.Scod == establecimientoSeleccionado.Codsoc).FirstOrDefault();
                if (oSolici1.Reinsp=="S")
                {
                    activoReInspeccion = true;
                }
                else
                {
                    activoReInspeccion = false;
                }
                if (oSolici1.Produc=="S")
                {
                    activoControl = true;
                }
                else
                {
                    activoControl = false;
                }
                if (oSolici1.Fecins.HasValue)
                {
                    FechaTemp = oSolici1.Fecins.Value;
                }

            }
            catch (Exception ex)
            {
            }
        }
        listadoSolicitudes.Add(oSolici1);
    }
    async Task Guardar()
    {

        Solici1DTO soliPush = new();
        soliPush.Cantor = 0;
        soliPush.Cantvq = 0;
        soliPush.Canvac = 0;
        soliPush.Canvaq = 0;
        var anios = new List<string?>();

        foreach(var data in listadoSolicitudes)
        {

            soliPush.Cantor = soliPush.Cantor + (data.Cantor ?? 0);
            soliPush.Cantvq = soliPush.Cantvq + (data.Cantvq ?? 0);
            soliPush.Canvac = soliPush.Canvac + (data.Canvac ?? 0);
            soliPush.Canvaq = soliPush.Canvaq + (data.Canvaq ?? 0);
            anios.Add(data.Anio);
        }
        if (anios.Count() > 1)
        {
            soliPush.Anio = JsonSerializer.Serialize<List<string>>(anios);
        }
        else
        {
            soliPush.Anio = anios.First();
        }

        soliPush.Fecsol = listadoSolicitudes.First().Fecsol;
        soliPush.Fecins = FechaTemp;
        if (activoControl)
        {
            soliPush.Produc = "S";
        }
        else
        {
            soliPush.Produc = "N";
        }
        if (activoReInspeccion)
        {
            soliPush.Reinsp = "S";
        }
        else
        {
            soliPush.Reinsp = "N";
        }
        soliPush.Codest = establecimientoSeleccionado.Ecod;

        if (Id == 0)
        {
            await _solici1Servicio.Crear(soliPush);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await _solici1Servicio.Editar(soliPush);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    

    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {
        return await Task.FromResult(socios.Where(x => x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<EstableDTO>> BusquedaEstablecimientos(string searchText)
    {
        return await Task.FromResult(establecimientos.Where(x => x.Codsoc==socioSeleccionado.Scod && x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }

}
