@page "/reportes"
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@using PaginaToros.Client.Servicios.Contrato;
@inject IResin1Servicio _resin1Servicio

<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>



<AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO">
    <Authorized>
<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Reportes de Inspeccion</h3>

<button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="position:relative;left:3.33%" @onclick="()=>add(0,0)">Agregar Nuevo Reporte</button>

@if (oRespuesta.List != null)
{

    <button style="outline:none; float: right;margin-right:3%;height:100%;" class="px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
        <RadzenDataGrid IsLoading="isLoading" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
            Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
            Count="cantotal" LoadData="LoadData" Data="@oRespuesta.List" TItem="Resin1DTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Resin1DTO" Property="Nrores" Title="Nro Resultado" Width="21.7%">
                    <Template Context="data">
                        @if(data.Nrores.Length > 15)
                        {
                            <p>Sin solicitud</p>
                        }
                        else
                        {
                            @(data.Nrores)
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Resin1DTO" Property="Nropla" Title="Plantel" Width="21.7%" />
                <RadzenDataGridColumn TItem="Resin1DTO" Property="Socio.Nombre" Title="Socio" Width="21.7%"/>
                <RadzenDataGridColumn TItem="Resin1DTO" Property="Freali" Title="Fecha De Inspeccion" Width="21.7%">
                    <Template Context="data">
                        @if (data.Freali.HasValue)
                        {
                            @data.Freali.Value.ToString("dd/MM/yyyy")
                        }
                        else
                        {

                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Resin1DTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" title="Editar" @onclick="() => add(data.Id,0)"><FeatherEdit Size="16" Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Resin1DTO" Property="" Title="" Filterable="false" Width="3.33%">
                    <Template Context="data">
                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash Size="16" Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
                
            
            </Columns>

        </RadzenDataGrid>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

</Authorized>
</AuthorizeView>

<AuthorizeView Roles="Socio">
    <Authorized>
        <h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Reportes de Inspeccion</h3>

        @if (oRespuesta.List != null)
        {

            <button style="outline:none; float: right;margin-right:3%;height:100%;" class="px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br />
            <br />
            <div class="tablacontent" style="position:relative;width:93.5%;left:3.33%">
                <RadzenDataGrid IsLoading="isLoading" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                                Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                                Count="cantotal" Data="@oRespuesta.List" TItem="Resin1DTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Resin1DTO" Property="Nrores" Title="Nro Resultado" Width="21.7%" />
                        <RadzenDataGridColumn TItem="Resin1DTO" Property="Nropla" Title="Plantel" Width="21.7%" />
                        <RadzenDataGridColumn TItem="Resin1DTO" Property="Establecimiento.Nombre" Title="Establecimiento" Width="21.7%" />

                        <RadzenDataGridColumn TItem="Resin1DTO" Property="Freali" Title="Fecha De Inspeccion" Width="21.7%">
                            <Template Context="data">
                                @if (data.Freali.HasValue)
                                {
                                    @data.Freali.Value.ToString("dd/MM/yyyy")
                                }
                                else
                                {

                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Resin1DTO" Property="" Title="" Filterable="false" Width="3.33%">
                            <Template Context="data">
                                <button class="btn" title="Editar" @onclick="() => add(data.Id,1)"><FeatherEdit Size="16" Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>

                </RadzenDataGrid>
            </div>
        }
        else
        {
            <br />
            <center>
                <div class="mb-2">
                    <br />
                    <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
                </div>
            </center>
        }

    </Authorized>
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public bool allowFiltering = false;
    public RadzenDataGrid<Resin1DTO>? grid;
    int currentPage;
    int cantotal = 0;
    bool isLoading = false;
    public Respuesta<List<Resin1DTO>> oRespuesta = new Respuesta<List<Resin1DTO>>();
    List<Socio> socios = new();

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var esSocio = await UserHasRole("Socio");

        if (!esSocio){
            oRespuesta = await _resin1Servicio.Lista(0, 15);
            oRespuesta.List = RemoveDuplicates(oRespuesta.List);
            var cantidad = await _resin1Servicio.CantidadTotal();
            cantotal = cantidad.List;
            StateHasChanged();
        }
        else
        {
            //CAMBIAR ID
            var usuarioId = 0;
            var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
            var user = authState.User;
            foreach (var claim in user.Claims)
            {
                if (claim.Type == "SocioId")
                {
                    usuarioId = Int32.Parse(claim.Value);
                    Console.WriteLine(usuarioId);
                }

            }
            oRespuesta = await _resin1Servicio.GetBySocioId(usuarioId);
            cantotal = oRespuesta.List.Count();
        }
    }


    private async Task<bool> UserHasRole(string role)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User.IsInRole(role);
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        var response = await _resin1Servicio.Eliminar(id);
        await grid.Reload();
        if(response){
            oRespuesta.List.Remove(oRespuesta.List.Where(x => x.Id == id).FirstOrDefault());
            if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
            {
                await grid.GoToPage(currentPage - 1);
            }
            else if (grid.Count != 0)
            {
                await grid.GoToPage(currentPage);
            }
        }
    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará el reporte",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id,int esSocio)
    {
        //no se puede pasar bool por link, asi que esSocio = 1, si es socio
        nav.NavigateTo($"/inforeporte/{Id}/{esSocio}");
        // if (Id != 0)
        // {
        //     currentPage = grid.CurrentPage;
        //     try
        //     {
        //         var parameters = new ModalParameters();
        //         parameters.Add(nameof(AddReporte.Id), Id);
        //         var formModal = Modal.Show<AddReporte>("Editar Reporte", parameters);
        //         var result = await formModal.Result;
        //         if (result.Cancelled)
        //         {
        //             Console.WriteLine("Modal was cancelled");
        //             await grid.GoToPage(currentPage);
        //         }
        //         else
        //         {
        //             await Get();
        //             await grid.GoToPage(currentPage);
        //         }
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine(ex.Message);
        //     }
        // }
        // else
        // {
        //     var formModal = Modal.Show<AddReporte>("Agregar Reporte");
        //     var result = await formModal.Result;

        //     if (result.Cancelled)
        //     {
        //         Console.WriteLine("Modal was cancelled");
        //         await grid.GoToPage(currentPage);
        //     }
        //     else
        //     {
        //         await Get();
        //         await grid.GoToPage(currentPage);
        //     }
        // }
    }

    //async Task gotoinfo(int id)
    //{
    //    currentPage = grid.CurrentPage;
    //    var parameters = new ModalParameters();
    //    var options = new ModalOptions()
    //        {
    //            HideHeader = true,
    //            HideCloseButton = true
    //        };
    //    parameters.Add(nameof(InfoToro.id), id);
    //    var formModal = Modal.Show<InfoToro>("", parameters, options);
    //    var result = await formModal.Result;

    //    if (result.Cancelled)
    //    {
    //        Console.WriteLine("Modal was cancelled");
    //        await grid.GoToPage(currentPage);
    //    }
    //    else
    //    {
    //        await Get();
    //        await grid.GoToPage(currentPage);
    //    }
    //}
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        if (!string.IsNullOrEmpty(args.Filter))
        {
            oRespuesta = await _resin1Servicio.LimitadosFiltrados(args.Skip.Value, args.Top.Value, args.Filter);
            // oRespuesta.List = oRespuesta.List.Where(args.Filter)
            oRespuesta.List = RemoveDuplicates(oRespuesta.List);
        }
        else
        {
            oRespuesta = await _resin1Servicio.Lista(args.Skip.Value, args.Top.Value);
            oRespuesta.List = RemoveDuplicates(oRespuesta.List);
        }

        isLoading = false;
    }

    public static List<Resin1DTO> RemoveDuplicates(List<Resin1DTO> items)
    {
        var seenIds = new HashSet<int>();
        var uniqueItems = new List<Resin1DTO>();

        foreach (var item in items)
        {
            Console.WriteLine(item.Id);
            var boole = seenIds.Add(item.Id);
            Console.WriteLine(boole);
            if (boole)  // HashSet.Add returns false if the item was already in the set
            {
                uniqueItems.Add(item);
            }
        }
        Console.WriteLine(uniqueItems.Count());
        return uniqueItems;
    }
}
