@page "/animalescontrol"

@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato
@using PaginaToros.Shared.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISocioServicio _socioServicio
@inject IResin6Servicio _resin6Servicio

<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Animales marcables</h3>

<style>
    .inline-flex {
        display: inline-flex;
        align-items: center;
        gap: .5rem;
    }

    .card {
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        padding: 16px;
        margin: 8px auto;
        max-width: 640px;
        background: #fff;
    }

    .big {
        font-size: 28px;
        font-weight: 700;
    }

    .muted {
        color: #6b7280;
        font-size: 12px
    }
</style>

<AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO">
    <Authorized>
        @if (loading)
        {
            <center>
                <div class="mb-2">
                    <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false"
                                       ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
                </div>
            </center>
        }
        else
        {
            <div style="max-width: 900px; margin: 0 auto;">
                <div class="inline-flex" style="margin: 8px 0;">
                    <label class="font-semibold">Seleccionar socio:</label>
                    <BlazoredTypeahead TItem="SocioDTO"
                                       TValue="SocioDTO"
                                       Value="socioSeleccionado"
                                       ValueChanged="uploadSocio"
                                       ValueExpression="@(() => socioSeleccionado)"
                                       SearchMethod="BusquedaSocios"
                                       EnableDropDown="true"
                                       placeholder="Busque socio por nombre">
                        <SelectedTemplate Context="s">@s.Nombre</SelectedTemplate>
                        <ResultTemplate Context="s">@s.Nombre</ResultTemplate>
                    </BlazoredTypeahead>

                    <button class="font-bold px-4 py-2 rounded-2xl bg-gray-200 hover:bg-gray-300 transition ease-in duration-100"
                            disabled="@(string.IsNullOrWhiteSpace(scodSeleccionado))"
                            @onclick="CargarParaSocio">
                        Cargar datos
                    </button>
                </div>

                @if (string.IsNullOrWhiteSpace(scodSeleccionado))
                {
                    <div class="mt-4 p-4 rounded-xl border border-gray-200 bg-gray-50">
                        Elegí un socio para habilitar la consulta por año.
                    </div>
                }
                else
                {
                    <center>
                        <br />
                        <RadzenText TextStyle="TextStyle.H5">Ingrese año</RadzenText>
                        <br />
                        <div style="display:flex;flex-direction:row;align-items:center;justify-content:center">
                            <input type="number" class="form-control" @bind="anioTemp" style="width:10%" />
                            <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0"
                                    style="position:relative;left:3.33%;display:flex"
                                    @onclick="GenerarResultado">
                                <FeatherSearch Size="24" Color="Black" /> Consultar
                            </button>
                        </div>

                        <br /><br />
                        @if (generado)
                        {
                            <div class="card">
                                <div class="muted">Año</div>
                                <div class="big">@anioGenerado</div>
                                <div class="mt-3 grid" style="display:grid;grid-template-columns:1fr 1fr;gap:16px;">
                                    <div>
                                        <div class="muted">Hembras PR marcables</div>
                                        <div class="big">@HembrasMarcablesPR</div>
                                    </div>
                                    <div>
                                        <div class="muted">Machos marcables (SCP+CP)</div>
                                        <div class="big">@MachosMarcables</div>
                                    </div>
                                </div>
                            </div>

                            @if (!tuvoDatos)
                            {
                                <div class="mt-4 p-3 rounded-xl border border-gray-200 bg-gray-50" style="max-width:700px">
                                    No se encontraron inspecciones (Resin6) para el socio en @anioGenerado.
                                </div>
                            }
                        }
                    </center>
                }
            </div>
        }
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Socio">
    <Authorized>
        @if (loading)
        {
            <center>
                <div class="mb-2">
                    <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false"
                                       ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
                </div>
            </center>
        }
        else
        {
            <center>
                <br />
                <RadzenText TextStyle="TextStyle.H5">Ingrese año</RadzenText>
                <br />
                <div style="display:flex;flex-direction:row;align-items:center;justify-content:center">
                    <input type="number" class="form-control" @bind="anioTemp" style="width:10%" />
                    <button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0"
                            style="position:relative;left:3.33%;display:flex"
                            @onclick="GenerarResultado">
                        <FeatherSearch Size="24" Color="Black" /> Consultar
                    </button>
                </div>

                <br /><br />
                @if (generado)
                {
                    <div class="card">
                        <div class="muted">Año</div>
                        <div class="big">@anioGenerado</div>
                        <div class="mt-3 grid" style="display:grid;grid-template-columns:1fr 1fr;gap:16px;">
                            <div>
                                <div class="muted">Hembras PR marcables</div>
                                <div class="big">@HembrasMarcablesPR</div>
                            </div>
                            <div>
                                <div class="muted">Machos marcables (SCP+CP)</div>
                                <div class="big">@MachosMarcables</div>
                            </div>
                        </div>
                    </div>

                    @if (!tuvoDatos)
                    {
                        <div class="mt-4 p-3 rounded-xl border border-gray-200 bg-gray-50" style="max-width:700px">
                            No se encontraron inspecciones (Resin6) para tu usuario en @anioGenerado.
                        </div>
                    }
                }
            </center>
        }
    </Authorized>
</AuthorizeView>

@code {
    // Estado
    bool loading = true;
    bool generado = false;
    bool tuvoDatos = false;

    // Año
    int anioTemp = DateTime.Now.Year;
    int anioGenerado = DateTime.Now.Year;

    // Socio / SCOD
    SocioDTO? socioSeleccionado = null;
    string scodSeleccionado = "";
    List<SocioDTO> Socios = new();

    // Totales que pedís
    double HembrasMarcablesPR = 0;   // (Hdp + Hpp) - (HdpM + HppM + HdpAs + HppAs)
    double MachosMarcables = 0;      // (McpM + MspM)

    protected override async Task OnInitializedAsync()
    {
        await Inicializar();
    }

    private async Task Inicializar()
    {
        try
        {
            loading = true;
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;

            if (user.IsInRole("ADMINISTRADOR") || user.IsInRole("USUARIOMAESTRO"))
            {
                var r = await _socioServicio.LimitadosFiltrados(0, 0);
                Socios = r.List ?? new();
                Console.WriteLine($"[Init] Admin/Maestro: {Socios.Count} socios");
            }

            if (user.IsInRole("Socio"))
            {
                var socioId = user.Claims.FirstOrDefault(c => c.Type == "SocioId")?.Value;
                if (int.TryParse(socioId, out var id) && id > 0)
                {
                    var all = await _socioServicio.LimitadosFiltrados(0, 0);
                    var me = (all.List ?? new()).FirstOrDefault(s => s.Id == id);
                    scodSeleccionado = me?.Scod ?? "";
                    Console.WriteLine($"[Init] Socio Id={id} -> SCOD={scodSeleccionado}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Init] Error: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string q)
      => await Task.FromResult(
        Socios.Where(x => x.Criador == "S" && (x.Nombre ?? "").ToLower().Contains((q ?? "").ToLower()))
              .ToList()
      );

    public async Task uploadSocio(SocioDTO socio)
    {
        socioSeleccionado = socio;
        scodSeleccionado = socio?.Scod ?? "";
        Console.WriteLine($"[uploadSocio] {socioSeleccionado?.Nombre} - SCOD={scodSeleccionado}");
        generado = false;
        ResetTotals();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task CargarParaSocio()
    {
        if (socioSeleccionado is null) return;
        scodSeleccionado = socioSeleccionado.Scod ?? "";
        Console.WriteLine($"[CargarParaSocio] SCOD={scodSeleccionado}");
        generado = false;
        ResetTotals();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void ResetTotals()
    {
        HembrasMarcablesPR = 0;
        MachosMarcables = 0;
        tuvoDatos = false;
    }

    private async Task GenerarResultado()
    {
        generado = false;
        ResetTotals();

        anioGenerado = anioTemp;
        if (anioGenerado <= 0 || string.IsNullOrWhiteSpace(scodSeleccionado))
        {
            Console.WriteLine("[GenerarResultado] Año o SCOD inválidos");
            return;
        }

        var desde = new DateTime(anioGenerado, 1, 1);
        var hasta = new DateTime(anioGenerado, 12, 31);

        try
        {
            var r = await _resin6Servicio.ObtenerFechas(desde.Ticks, hasta.Ticks);
            var items = (r?.List ?? new List<Resin6DTO>())
              .Where(x =>
                (x.Resin1?.Freali?.Date ?? DateTime.MinValue) >= desde &&
                (x.Resin1?.Freali?.Date ?? DateTime.MaxValue) <= hasta &&
                string.Equals((x.Resin1?.Scod ?? "").Trim(),
                              (scodSeleccionado ?? "").Trim(),
                              StringComparison.OrdinalIgnoreCase))
              .ToList();

            Console.WriteLine($"[GenerarResultado] Año={anioGenerado} SCOD={scodSeleccionado} items={items.Count}");

            // Sum helpers (funciona si los DTO son double? o int?)
            double SumAny<T>(Func<Resin6DTO, T?> sel) where T : struct
            {
                double s = 0;
                foreach (var it in items)
                {
                    var v = sel(it);
                    if (v.HasValue) s += Convert.ToDouble(v.Value);
                }
                return s;
            }

            // HEMBRAS PR marcables = presentadas PR - (marcadas mochas + marcadas astadas)
            var hdp = SumAny<double>(x => x.Hdp);
            var hpp = SumAny<double>(x => x.Hpp);
            var hdpM = SumAny<double>(x => x.HdpM);
            var hppM = SumAny<double>(x => x.HppM);   // si fuese int? igual funciona
            var hdpAs = SumAny<double>(x => x.HdpAs);
            var hppAs = SumAny<double>(x => x.HppAs);

            var presentadasPR = hdp + hpp;
            var yaMarcadasPR = hdpM + hppM + hdpAs + hppAs;

            HembrasMarcablesPR = presentadasPR - yaMarcadasPR;
            if (HembrasMarcablesPR < 0) HembrasMarcablesPR = 0;

            // MACHOS marcables = mochos de SCP + CP
            var mcpM = SumAny<double>(x => x.McpM);
            var mspM = SumAny<double>(x => x.MspM);
            MachosMarcables = mcpM + mspM;

            tuvoDatos = items.Count > 0;

            Console.WriteLine($"[GenerarResultado] HembrasMarcablesPR={HembrasMarcablesPR}  MachosMarcables={MachosMarcables}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[GenerarResultado] Error: {ex.Message}");
        }
        finally
        {
            generado = true;
            StateHasChanged();
        }
    }
}
