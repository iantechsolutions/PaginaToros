@using PaginaToros.Client.Pages
<div class="card">
    <div class="card-body">
        <EditForm Model="@oTransaccione" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="row" style="width=100%;">
                <div class="col-sm-6">
                    <label>Nombre Comprador</label>
                    <RadzenAutoComplete style="" @bind-Value="@oTransaccione.NombreComprador" Data="@establecimientosPosbiles" Placeholder="" AllowClear="false" FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive />
                </div>
                <div class="col-sm-6">
                    <label class="col-sm">Nombre Vendedor</label>
                    <RadzenAutoComplete style="" @bind-Value="@oTransaccione.NombreVendedor" Data="@establecimientosPosbiles" Placeholder="" AllowClear="false" FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive />
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-sm-6">
                    <label class="col-sm">Total de Vaquillonas</label>
                    <InputNumber @bind-Value="@oTransaccione.TotalVaquillonas" class="form-control" placeholder="Total de vaquillonas"></InputNumber>
                    <ValidationMessage For="(()=> oTransaccione.TotalVaquillonas)" style="color:red;" />

                </div>
                <div class="col-sm-6">
                    <label class="col-sm">Total de Toros</label>
                    <InputNumber @bind-Value="@oTransaccione.TotalToros" class="form-control" placeholder="Total de toros"></InputNumber>
                    <ValidationMessage For="(()=> oTransaccione.TotalToros)" style="color:red;" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <label>Toros</label>
                    <MultiValueFill PossibleValues="@torosPosibles" SelectedItemsChanged="HandleSelectedItemsChanged" />
                </div>
                <div class="col-sm-6">
                    <label>Fecha</label><br/>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="@fechaTemp" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
                

            </div>
            <br />
            
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
@code {
    Transaccione oTransaccione = new();
    List<string?> torosPosibles = new();
    List<string> establecimientosPosbiles = new();
    Respuesta<Transaccione> oRespuesta = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    DateTime fechaTemp = DateTime.Now.Date;

    protected override async Task OnInitializedAsync()
    {
        Respuesta<List<Toro>> torosDB = await Http.GetFromJsonAsync<Respuesta<List<Toro>>>("/api/Toro");
        foreach (Toro oToro in torosDB.List)
        {
            torosPosibles.Add(oToro.Nombre);
        }
        var rta = await Http.GetFromJsonAsync<Respuesta<List<Establecimiento>>>("/api/Establecimiento");
        foreach (Establecimiento oEST in rta.List)
        {
            establecimientosPosbiles.Add(oEST.Nombre);
        }
        if (id != 0)
        {
            try{
                oRespuesta = await Http.GetFromJsonAsync<Respuesta<Transaccione>>($"/api/TransaccioneData/{id}");
                oTransaccione = oRespuesta.List;

            }
            catch(Exception ex){
                oRespuesta.Mensaje = ex.Message;
            }
        }
    }
    async Task Guardar()
    {
        oTransaccione.Fecha = fechaTemp;
        if (id == 0)
        {
            await Http.PostAsJsonAsync<Transaccione>("/api/TransaccioneData", oTransaccione);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await Http.PutAsJsonAsync<Transaccione>("/api/TransaccioneData", oTransaccione);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    private void HandleSelectedItemsChanged(List<string> selectedItems)
    {
        string torosElegidos = string.Join(", ", selectedItems);
        oTransaccione.Toros = torosElegidos;
    }
}
