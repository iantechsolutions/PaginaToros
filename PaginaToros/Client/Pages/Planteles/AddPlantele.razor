@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@inject IPlantelServicio _plantelServicio
@inject ISocioServicio _socioServicio

<div class="card" >
    <div class="card-body">
        <EditForm Model="@oPlantel" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Numero de Plantel</label>
                    <InputText class="form-control" @bind-Value="@oPlantel.Placod"
                               placeholder="Numero"></InputText>
                    <ValidationMessage For="(()=> oPlantel.Placod)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Fecha de existencia</label><br />
                    <RadzenDatePicker TValue="DateTime" @bind-Value="@FechaTempCreacion" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
                <div class="col-sm">
                    <label>Socio</label>
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Busque socio por nombre"  EnableDropDown="true" @bind-Value="socioSeleccionado">
                                <SelectedTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </SelectedTemplate>
                                <ResultTemplate Context="eleccion">
                                    @eleccion.Nombre
                                </ResultTemplate>
                            </BlazoredTypeahead>
                </div>
                <div class="col-sm">
                    <label class="col-sm">Activo?</label><br/>
                    <input type="checkbox" @bind="@activo">
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Numero de ultima inspeccion</label>
                    <InputText @bind-Value="@oPlantel.Nroins" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> oPlantel.Nroins)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Fecha ultima inspeccion</label><br/>
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="@oPlantel.Feulti" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
                <div class="col-sm">
                    <label>Fecha ultima reinspeccion</label><br/>
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="@oPlantel.Urein" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>

                
            </div>
            <br />
            <a style="margin:auto;">PURO REGISTRADO</a>
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Vacas</label>
                    <InputNumber class="form-control" @bind-Value="@oPlantel.Varede" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oPlantel.Varede)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Vaquillonas con servicio</label>
                    <InputNumber class="form-control" @bind-Value="@oPlantel.Vqcsrd" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oPlantel.Vqcsrd)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Vaquillonas sin servicio</label>
                    <InputNumber class="form-control" @bind-Value="@oPlantel.Vqssrd" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oPlantel.Vqssrd)" style="color:red;" />
                </div>
            </div>
            <br />
            <a style="margin:auto;">VIP</a>
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Vacas</label>
                    <InputNumber class="form-control" @bind-Value="@oPlantel.Varepr" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oPlantel.Varepr)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Vaquillonas con servicio</label>
                    <InputNumber class="form-control" @bind-Value="@oPlantel.Vqcsrp" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oPlantel.Vqcsrp)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Vaquillonas sin servicio</label>
                    <InputNumber class="form-control" @bind-Value="@oPlantel.Vqssrp" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oPlantel.Vqcsrp)" style="color:red;" />
                </div>
            </div>
            <br />
            <br />
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
else
{
<br />
<center>
    <div class="mb-2">
        <br />
        <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
    </div>
</center>
}
@code {
    List<SocioDTO> socios = new();
    SocioDTO? socioSeleccionado = null;
    PlantelDTO oPlantel = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    DateTime FechaTempInspeccion = DateTime.Now.Date;
    DateTime FechaTempReInspeccion = DateTime.Now.Date;
    DateTime FechaTempCreacion = DateTime.Now.Date;

    //string CodZona = "  ";
    bool activo = true;

    protected override async Task OnInitializedAsync()
    {
        var rta = await _socioServicio.Lista(0,1000000);
        socios = rta.List.ToList();
        if (Id != 0)
        {
            try
            {   
                var rt = await _plantelServicio.Lista(0, 1000000);
                oPlantel = rt.List.Where(x=>x.Id==Id).FirstOrDefault();
                if (oPlantel.Estado=="S")
                {
                    activo = true;
                }
                else
                {
                    activo = false;
                }
                socioSeleccionado = socios.Where(x => x.Scod == oPlantel.Nrocri).FirstOrDefault();


            }
            catch (Exception ex)
            {
            }
        }
    }
    async Task Guardar()
    {
        oPlantel.Nrocri = socioSeleccionado.Scod;
        oPlantel.Anioex = FechaTempCreacion.ToString("yyyy");
        if (activo)
        {
            oPlantel.Estado = "S";
        }
        else
        {
            oPlantel.Estado = "N";
        }
        if (Id == 0)
        {
            if(oPlantel.Fecing==null){
                oPlantel.Fecing = "";
            }
            await _plantelServicio.Crear(oPlantel);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await _plantelServicio.Editar(oPlantel);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    private async Task<IEnumerable<string>> SearchMethod(string searchText,List<string> lista)
    {
        var result = lista.Where(x => x.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }
    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {
        return await Task.FromResult(socios.Where(x => x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }
}

