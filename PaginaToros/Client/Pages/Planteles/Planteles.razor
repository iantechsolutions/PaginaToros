@page "/Planteles"
@using Blazored.Typeahead;
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@using PaginaToros.Client.Servicios.Contrato;
@inject ISocioServicio _socioServicio
@inject IPlantelServicio _plantelServicio
<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 12px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
        overflow-wrap: break-word;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>
<AuthorizeView Roles="ADMINISTRADOR,USUARIOMAESTRO">
    <Authorized>

<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Planteles</h3>


<button style="position:relative;left:3.33%" class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="()=>add(0,false)">Agregar Plantel</button>

@if (oRespuesta.List != null)
{
     <div class="row">
        <div class="col-3"/>
        <div class="col-4">
          @*   <BlazoredTypeahead SearchMethod="BusquedaSocios" class="max-w-sm" placeholder="Buscar por socio" EnableDropDown="true" @bind-Value="socioSeleccionado">
                <SelectedTemplate Context="eleccion">
                    @eleccion.Nombre
                </SelectedTemplate>
                <ResultTemplate Context="eleccion">
                    @eleccion.Nombre
                </ResultTemplate>
            </BlazoredTypeahead>
           <button style="outline:none; float: right;margin-right:3%;height:100%;" class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
           *@  
        </div>
        <div class="col-5">

            <button class="font-bold px-8 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="outline:none; float: right;margin-right:3%;height:100%;" @onclick="()=>BuscarPorSocio()">Buscar</button>

        </div>
     </div>
    <br />
    <br />
    <RadzenDataGrid class="tablacontent" style="position:relative;width:93.5%;left:3.33%" IsLoading="isLoading" LoadData="LoadData" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                    AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                    Density="Density.Compact" Data="@oRespuesta.List" Count="cantidad" TItem="PlantelDTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
        <Columns>
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Placod" Title="Nro Plantel" Width="3.6%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Activo" Title="Activo?" Width="3.33%">
                <Template Context="data">
                    @if (data.Estado == "S")
                    {
                            <a style="color:green">Si</a>
                    }
                    else
                    {
                        <a style="color:red">No</a>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Anioex" Title="Año de Existencia" Width="4.6%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Nroins" Title="Nro ultima inspeccion" Width="6.6%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Socio.Nombre" Title="Socio" Width="7.34%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Varede" Title="Vacas PR" Width="4%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqcsrd" Title="Vaquillonas PR C/S" Width="5%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqssrd" Title="Vaquillonas PR S/S" Width="5%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Varepr" Title="Vacas VIP" Width="4%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqcsrp" Title="Vaquillonas VIP C/S o preñadas" Width="6.6%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqssrp" Title="Vaquillonas VIP S/S" Width="4.6%" />
            <RadzenDataGridColumn TItem="PlantelDTO" Property="" Title="" Filterable="false" Width="2.3%">
                <Template Context="data">
                    <button class="btn" position="absolute" title="Editar Plantel @data.Id" @onclick="() => add(data.Id,false)"><FeatherEdit Size="16" Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PlantelDTO" Property="" Title="" Filterable="false" Width="2.3%">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Size="16" Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Plantel" Property="" Title="" Filterable="false" Width="2.3%">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Size="16" Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
</Authorized>
</AuthorizeView>
<AuthorizeView Roles="Socio">
    <Authorized>
        <h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Planteles</h3>
        @if (oRespuesta.List != null)
        {

            <button style="outline:none; float: right;margin-right:3%;height:100%;" class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br />
            <br />
            <RadzenDataGrid class="tablacontent" style="position:relative;width:93.5%;left:3.33%" IsLoading="isLoading" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                            AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                            Density="Density.Compact" Data="@oRespuesta.List" Count="cantidad" TItem="PlantelDTO" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                <Columns>
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Placod" Title="Nro Plantel" Width="3.6%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Activo" Title="Activo?" Width="3.33%">
                        <Template Context="data">
                            @if (data.Estado == "S")
                            {
                                <a style="color:green">Si</a>
                            }
                            else
                            {
                                <a style="color:red">No</a>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Anioex" Title="Año de Existencia" Width="4.6%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Nroins" Title="Nro ultima inspeccion" Width="6.6%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Varede" Title="Vacas PR" Width="4%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqcsrd" Title="Vaquillonas PR C/S" Width="5%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqssrd" Title="Vaquillonas PR S/S" Width="5%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Varepr" Title="Vacas VIP" Width="4%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqcsrp" Title="Vaquillonas VIP C/S o preñadas" Width="6.6%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="Vqssrp" Title="Vaquillonas VIP S/S" Width="4.6%" />
                    <RadzenDataGridColumn TItem="PlantelDTO" Property="" Title="" Filterable="false" Width="2.3%">
                        <Template Context="data">
                            <button class="btn" position="absolute" title="Editar Plantel @data.Id" @onclick="() => add(data.Id,true)"><FeatherEdit Size="16" Color="green" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>
            <br />
        }
        else
        {
            <br />
            <center>
                <div class="mb-2">
                    <br />
                    <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
                </div>
            </center>
        }
    </Authorized>
</AuthorizeView>
@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<PlantelDTO>? grid;
    int currentPage;
    bool isLoading = false;
    int cantidad;
    SocioDTO socioSeleccionado;
    public bool allowFiltering = false;
    List<SocioDTO> socios = new();
    public Respuesta<List<PlantelDTO>> oRespuesta = new Respuesta<List<PlantelDTO>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var esSocio = await UserHasRole("Socio");
        var rta = await _socioServicio.LimitadosFiltrados(0, 0);
        socios = rta.List;
        if (!esSocio){
            var c = await _plantelServicio.CantidadTotal();
            cantidad = c.List;
            oRespuesta = await _plantelServicio.Lista(0,15);

            StateHasChanged();
        }
        else
        {
            var usuarioId = 0;
            var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
            var user = authState.User;
            foreach (var claim in user.Claims)
            {
                if (claim.Type == "SocioId")
                {
                    usuarioId = Int32.Parse(claim.Value);
                    Console.WriteLine(usuarioId);
                }

            }
            //CAMBIAR ID
            oRespuesta = await _plantelServicio.GetBySocioId(usuarioId);
            cantidad = oRespuesta.List.Count;
        }
    }


    private async Task<bool> UserHasRole(string role)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User.IsInRole(role);
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        await _plantelServicio.Eliminar(id);
        await grid.Reload();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará al plantel",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id, bool esSocio)
    {
        int numero = Id;
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddPlantele.Id), Id);
                parameters.Add(nameof(AddPlantele.esSocio), esSocio);
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge,
                        DisableBackgroundCancel = true
                    };
                var formModal = Modal.Show<AddPlantele>("Editar Plantel", parameters, options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    if (socioSeleccionado == null)
                    {
                        await Get();
                        await grid.GoToPage(currentPage);
                    }
                    else
                    {
                        string filtro = $"Socio.Id={socioSeleccionado.Id}";
                        oRespuesta = await _plantelServicio.LimitadosFiltrados(0, 60, filtro);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            var formModal = Modal.Show<AddPlantele>("Agregar Plantel", options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                if (socioSeleccionado == null)
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    string filtro = $"Socio.Id={socioSeleccionado.Id}";
                    oRespuesta = await _plantelServicio.LimitadosFiltrados(0, 60, filtro);
                }
            }
        }
    }
    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true,
                Size = ModalSize.ExtraLarge
            };
        parameters.Add(nameof(InfoPlantel.id), id);
        var formModal = Modal.Show<InfoPlantel>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
        }
    }
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        if (socioSeleccionado == null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                oRespuesta = await _plantelServicio.LimitadosFiltrados(args.Skip.Value, args.Top.Value, args.Filter);

                oRespuesta.List = oRespuesta.List.OrderBy(x => x.Id).ToList(); ;
            }
            else
            {
                oRespuesta = await _plantelServicio.Lista(args.Skip.Value, args.Top.Value);
            }
        }
        else
        {
            if (args != null && !string.IsNullOrEmpty(args.Filter))
            {
                oRespuesta = await _plantelServicio.LimitadosFiltrados(0, args.Top.Value, args.Filter);
                // oRespuesta.List = oRespuesta.List.Where(args.Filter)
            }
            else
            {
                string filtro = $"Socio.Id={socioSeleccionado.Id}";
                oRespuesta = await _plantelServicio.LimitadosFiltrados(0, 60, filtro);
            }
        }




        isLoading = false;
    }

    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {
        var result = socios.Where(x => x.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }

    private async Task BuscarPorSocio()
    {
        if (socioSeleccionado != null)
        {
            var coso = new LoadDataArgs();
            coso.Filter = "";
            await LoadData(coso);
        }
        else
        {
            var coso = new LoadDataArgs();
            coso.Skip = 0;
            coso.Top = 15;
            await LoadData(coso);
        }
    }
}
