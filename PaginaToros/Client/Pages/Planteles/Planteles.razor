@page "/Planteles"
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@inject HttpClient Http

<h3 class="pb-3 font-bold text-xl" style="position:relative;left:3.33%">Planteles</h3>


<button style="position:relative;left:3.33%" class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="()=>add(0)">Agregar Plantel</button>
<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 12px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
        overflow-wrap: break-word;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }

    .rz-paginator {
        border-top: solid #E0E0E0 1px;
    }
</style>

@if (oRespuesta.List != null)
{

    <button style="outline:none; float: right;margin-right:3%;height:100%;" class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <RadzenDataGrid class="tablacontent" style="position:relative;width:93.5%;left:3.33%" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                    AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                    Density="Density.Compact" Data="@listaMerged" TItem="ClaseTabla" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
        <Columns>
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Placod" Title="Nro Plantel" Width="3.6%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Activo" Title="Activo?" Width="3.33%">
                <Template Context="data">
                    @if (data.Activo)
                    {
                            <a style="color:green">Si</a>
                    }
                    else
                    {
                        <a style="color:red">No</a>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Anioex" Title="Año de Existencia" Width="4.6%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Nroins" Title="Nro ultima inspeccion" Width="6.6%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="NombreSocio" Title="Socio" Width="7.34%"/>
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Varede" Title="Vacas PR" Width="4%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Vqcsrd" Title="Vaquillonas PR C/S" Width="5%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Vqssrd" Title="Vaquillonas PR S/S" Width="5%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Varepr" Title="Vacas VIP" Width="4%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Vqcsrp" Title="Vaquillonas VIP C/S o preñadas" Width="6.6%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="Vqssrp" Title="Vaquillonas VIP S/S" Width="4.6%" />
            <RadzenDataGridColumn TItem="ClaseTabla" Property="" Title="" Filterable="false" Width="2.3%">
                <Template Context="data">
                    <button class="btn" position="absolute" title="Editar Plantel" @onclick="() => add(data.Id)"><FeatherEdit Size="16" Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Plantel" Property="" Title="" Filterable="false" Width="2.3%">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Size="16" Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Plantel" Property="" Title="" Filterable="false" Width="2.3%">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Size="16" Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<ClaseTabla>? grid;
    List<ClaseTabla> listaMerged = new();
    int currentPage;
    public bool allowFiltering = false;
    public string Url = "/api/Plantel";
    List<Socio> socios = new();
    public Respuesta<List<Plantel>> oRespuesta = new Respuesta<List<Plantel>>();
    protected override async Task OnInitializedAsync()
    {
        var rta = await Http.GetFromJsonAsync<Respuesta<List<Socio>>>("/api/Socio");
        socios = rta.List;
        await Get();
    }
    async Task Get()
    {
        var respuesta = await Http.GetFromJsonAsync<Respuesta<List<Plantel>>>(Url);
        respuesta.List = respuesta.List.OrderByDescending(x => x.Id).ToList();
        oRespuesta = respuesta;
        listaMerged = oRespuesta.List.Select(plan => new ClaseTabla
            {
                Id = plan.Id,
                Placod = plan.Placod,
                Activo = plan.Estado=="S",
                Anioex = plan.Anioex,
                Nroins = plan.Nroins,
                NombreSocio = socios.Where(x => x.Scod == plan.Nrocri).Count()>0?socios.Where(x => x.Scod == plan.Nrocri).First().Nombre:"",
                Varede = plan.Varede,
                Vqcsrd = plan.Vqcsrd,
                Vqssrd = plan.Vqssrd,
                Varepr = plan.Varepr,
                Vqcsrp = plan.Vqcsrp,
                Vqssrp = plan.Vqssrp,
            }).ToList();

        StateHasChanged();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        await Http.DeleteAsync($"/api/Plantel/{id}");
        await Get();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará al plantel",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {
        int numero = Id;
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddPlantele.Id), Id);
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge
                    };
                var formModal = Modal.Show<AddPlantele>("Editar Plantel", parameters, options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            var formModal = Modal.Show<AddPlantele>("Agregar Plantel", options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }
    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true,
                Size = ModalSize.ExtraLarge
            };
        parameters.Add(nameof(InfoPlantel.id), id);
        var formModal = Modal.Show<InfoPlantel>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
        }
    }


    public class ClaseTabla
    {
        public int Id{ get; set; }
        public string? Placod { get; set; }
        public bool Activo { get; set; }
        public string? Anioex { get; set; }
        public string? Nroins { get; set; }
        public string? NombreSocio  { get; set; }
        public double? Varede { get; set; }
        public double? Vqcsrd { get; set; }
        public double? Vqssrd { get; set; }
        public double? Varepr { get; set; }
        public double? Vqcsrp { get; set; }
        public double? Vqssrp { get; set; }
    }
}
