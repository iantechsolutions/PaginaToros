@page "/establecimientos"
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@inject HttpClient Http

<h3>Establecimientos</h3>


<button class="btn btn-outline-primary" @onclick="()=>add(0)">Agregar Establecimiento</button>


@if (oRespuesta.List != null)
{
    
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5"
                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                Data="@oRespuesta.List" TItem="Establecimiento" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Establecimiento" Property="Id" Title="Id" Width="100px" />
            <RadzenDataGridColumn TItem="Establecimiento" Property="Nombre" Title="Nombre" Width="100px" />
            <RadzenDataGridColumn TItem="Establecimiento" Property="ConsultasRealizadas" Title="Veces Certificado" Width="80px" />
            <RadzenDataGridColumn TItem="Establecimiento" Property="Fecha" Title="Fecha Agregado" Width="100px" />
            <RadzenDataGridColumn TItem="Establecimiento" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" position="absolute" title="Editar Establecimiento" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Establecimiento" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Establecimiento" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<Establecimiento>? grid;
    int currentPage;
    public bool allowFiltering = false;
    public string Url = "/api/Establecimiento";
    public Respuesta<List<Establecimiento>> oRespuesta = new Respuesta<List<Establecimiento>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var respuesta = await Http.GetFromJsonAsync<Respuesta<List<Establecimiento>>>(Url);
        oRespuesta = respuesta;
        StateHasChanged();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        await Http.DeleteAsync($"/api/Establecimiento/{id}");
        await Get();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este establecimiento y sus toros",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {

        if (Id != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddEstablecimiento.id), Id);
                var formModal = Modal.Show<AddEstablecimiento>("Editar Establecimiento", parameters);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var formModal = Modal.Show<AddEstablecimiento>("Agregar Establecimiento");
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }
    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true
            };
        parameters.Add(nameof(InfoEstablecimiento.id), id);
        var formModal = Modal.Show<InfoEstablecimiento>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
        }
    }



}
