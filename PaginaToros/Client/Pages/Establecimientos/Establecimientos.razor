@page "/establecimientos"
@using PaginaToros.Shared.Models.Response
@using PaginaToros.Shared.Models
@inject HttpClient Http
<style>

    .rz-cell-data,
    .rz-column-title-content {
        font-size: 13px !important;
    }

    .rz-cell-data {
        overflow: visible !important;
        white-space: normal !important;
    }

    .tablacontent th.rz-unselectable-text.rz-text-align-left {
        background-color: #82D682;
    }
    .rz-paginator{
        border-top: solid #E0E0E0 1px;
    }
    
</style>
<h3 class="pb-3 font-bold text-xl" style="position:relative">Establecimientos</h3>


<button class="font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" style="position:relative" @onclick="()=>add(0)">Agregar Establecimiento</button>



@if (oRespuesta.List != null)
{

    <button style="outline:none; float: right;margin-right:15px;height:100%;" class="px-3 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <div class="tablacontent" style="position:relative;width:1500px;">
        <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="15"
                    Density="Density.Compact" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                    Data="@oRespuesta.List" TItem="Establecimiento" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="Establecimiento" Property="CodigoSocio" Title="NroSocio" Width="55px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="NombreSocio" Title="Socio" Width="110px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="Activo" Title="Activo?" Width="55px">
                    <Template Context="data">
                        @if(data.Activo.HasValue){
                            @if(data.Activo.Value){
                                <a style="color:darkgreen">Si</a>
                            }
                            else
                            {
                                <a style="color:red">No</a>
                            }
                        }
                        else
                        {
                        
                        }
                    </Template>    
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Establecimiento" Property="Nombre" Title="Nombre" Width="100px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="Encargado" Title="Encargado" Width="70px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="Domicilio" Title="Domicilio" Width="70px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="Telefono" Title="Telefono" Width="75px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="Localidad" Title="Localidad" Width="75px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="CodPostal" Title="Codigo Postal" Width="85px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="Provincia" Title="Provincia" Width="90px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="Informacion" Title="Informacion" Width="80px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="CodZona" Title="Cod. zona" Width="80px" />
                <RadzenDataGridColumn TItem="Establecimiento" Property="FechaExistencia" Title="Año Creacion" Width="90px">
                    <Template Context="data">
                        @if(data.FechaExistencia.HasValue){
                            <a>@data.FechaExistencia.Value.ToString("yyyy")</a>
                        }
                        else
                        {
                            <a>NRAA</a>
                        }
                    </Template>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="Establecimiento" Property="" Title="" Filterable="false" Width="50px">
                    <Template Context="data">
                        <button class="btn" position="absolute" title="Editar Establecimiento" @onclick="() => add(data.Id)"><FeatherEdit Size="16" Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Establecimiento" Property="" Title="" Filterable="false" Width="50px">
                    <Template Context="data">
                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Size="16" Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
    @*            <RadzenDataGridColumn TItem="Establecimiento" Property="" Title="" Filterable="false" Width="30px">
                    <Template Context="data">
                        <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                    </Template>
                </RadzenDataGridColumn>*@
            </Columns>

        </RadzenDataGrid>
    </div>
    <br/>
}
else
{
    <br />  
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:1500px;" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public RadzenDataGrid<Establecimiento>? grid;
    int currentPage;
    public bool allowFiltering = false;
    public string Url = "/api/Establecimiento";
    public Respuesta<List<Establecimiento>> oRespuesta = new Respuesta<List<Establecimiento>>();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task Get()
    {
        var respuesta = await Http.GetFromJsonAsync<Respuesta<List<Establecimiento>>>(Url);
        respuesta.List = respuesta.List.OrderByDescending(x => x.Id).ToList();
        oRespuesta = respuesta;
        StateHasChanged();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        await Http.DeleteAsync($"/api/Establecimiento/{id}");
        await Get();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este establecimiento y sus toros",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int Id)
    {
        int numero = Id;
        if (numero != 0)
        {
            currentPage = grid.CurrentPage;
            try
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddEstablecimiento.Id), Id);
                var options = new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge
                    };
                var formModal = Modal.Show<AddEstablecimiento>("Editar Establecimiento",parameters,options);
                var result = await formModal.Result;
                if (result.Cancelled)
                {
                    Console.WriteLine("Modal was cancelled");
                    await grid.GoToPage(currentPage);
                }
                else
                {
                    await Get();
                    await grid.GoToPage(currentPage);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge
                };
            var formModal = Modal.Show<AddEstablecimiento>("Agregar Establecimiento",options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }
    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true,
                Size=ModalSize.ExtraLarge
            };
        parameters.Add(nameof(InfoEstablecimiento.Id), id);
        var formModal = Modal.Show<InfoEstablecimiento>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
        }
    }



}
