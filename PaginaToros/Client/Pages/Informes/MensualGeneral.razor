@page "/reportegeneral"
@using PaginaToros.Client.Servicios.Contrato;
@using Blazored.Typeahead;
@inject IResin1Servicio _resin1Servicio;
@inject IResin6Servicio _resin6Servicio;
@inject IInspectServicio _inspectServicio;
@using Newtonsoft.Json;

@inject IJSRuntime _js

@using OfficeOpenXml
@using OfficeOpenXml.Style
@using System.Drawing


<style>
    @@page {
        margin: 0;
    }

    @@media-print {
        .row {
            break-inside: avoid
        }
        .no-print{
            display:none;
        }
    }

    .col-sm {
        display: block;
        min-height: 100px; /* Ajusta según sea necesario */
    }
</style>


<div class="row no-print">
    <div class="col-sm">
        <label>Seleccionar Fecha Inicial</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaInicial Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
    <div class="col-sm">
        <label>Seleccionar Fecha Final</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaFinal Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
</div>

<div class="row no-print">
    <div class="col-sm">
        <label>Selecciona Inspectores a cubrir</label>

        <div class="flex items-center gap-2">
            <BlazoredTypeahead SearchMethod="BuscarInspector" @ref="selectIns"
                               @bind-Values="inspectoresSeleccionados"
                               EnableDropDown="true"
                               Disabled="terminado && confirmado"
                               placeholder="Busque por Nombre">
                <SelectedTemplate Context="data">
                    @data.Nombre
                </SelectedTemplate>
                <ResultTemplate Context="data">
                    @data.Nombre
                </ResultTemplate>
            </BlazoredTypeahead>

            <div class="flex items-center gap-2 ml-2">
                <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                        transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                        @onclick="SeleccionarTodos">
                    <FeatherCheck Color="green" Width="18" Height="18"></FeatherCheck>
                </button>
                <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                        transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                        @onclick="DeseleccionarTodos">
                    <FeatherX Color="red" Width="18" Height="18"></FeatherX>
                </button>
            </div>
        </div>
    </div>

    <div class="col-sm-2"></div>

    <div class="col-sm">
        <label>Selecciona Provincias a cubrir</label>

        <div class="flex items-center gap-2">
            <BlazoredTypeahead SearchMethod="BuscarProvincia" @ref="selectProv"
                               Disabled="terminado && confirmado"
                               @bind-Values="provinciasSeleccionadas"
                               EnableDropDown="true"
                               placeholder="Busque por Nombre">
                <SelectedTemplate Context="data">
                    @traductorProvinciaInverso[data]
                </SelectedTemplate>
                <ResultTemplate Context="data">
                    @traductorProvinciaInverso[data]
                </ResultTemplate>
            </BlazoredTypeahead>

            <div class="flex items-center gap-2 ml-2">
                <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                        transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                        @onclick="SeleccionarTodasProvincias">
                    <FeatherCheck Color="green" Width="18" Height="18"></FeatherCheck>
                </button>
                <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                        transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                        @onclick="DeseleccionarTodasProvincias">
                    <FeatherX Color="red" Width="18" Height="18"></FeatherX>
                </button>
            </div>
        </div>
    </div>
</div>

<br class="no-print" />
<div class="flex items-center gap-2 ml-2">
<button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2"
        style="position:relative;width:20%; margin-bottom:5px;"
        @onclick="()=>ConfirmarDatos()"
        disabled="@(!terminado || confirmado)">
    @if (loading)
    {
        <span>
            <i class="fa fa-spinner fa-spin"></i> Cargando...
        </span>
    }
    Generar Reporte
</button>
<button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2"
        style="position:relative;width:20%; margin-bottom:5px;"
    @onclick="() =>DescargarExcel()">
    Exportar Excel
    @if (download)
    {
        <span>
            <i class="fa fa-spinner fa-spin"></i> Cargando...
        </span>
    }
</button>
</div>

<br class="no-print"/>
<br class="no-print"/>

@if (confirmado && terminado)
{
    <br />
    <RadzenText TextStyle="Radzen.Blazor.TextStyle.H5">
        Resumen del periodo
    </RadzenText>

    <!-- Primera tabla -->
    <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@datos"
                    TItem="Resin6DTO" SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or" Style="margin-bottom:18px" PagerHorizontalAlign="HorizontalAlign.Center">
        <Columns>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="Hdp" Title="Vaq PR Presentadas">
                <Template Context="data">
                    @data.Hdp
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="HdpM" Title="Vaq PR Marcadas">
                <Template Context="data">
                    @data.HdpM
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="HdpAs" Title="Vaq PR Astadas">
                <Template Context="data">
                    @data.HdpAs
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <!-- Segunda tabla -->
    <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@datos"
                    TItem="Resin6DTO" SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or" Style="margin-bottom:18px" PagerHorizontalAlign="HorizontalAlign.Center">
        <Columns>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="Hgvp" Title="Vacas VIP Presentadas">
                <Template Context="data">
                    @data.Hgvp
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="Hgvb" Title="Vacas VIP Total">
                <Template Context="data">
                    @data.Hgvb
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="Hgqp" Title="Vaq VIP Presentadas">
                <Template Context="data">
                    @data.Hgqp
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <!-- Tercera tabla -->
    <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@datos"
                    TItem="Resin6DTO" SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or" Style="margin-bottom:18px" PagerHorizontalAlign="HorizontalAlign.Center">
        <Columns>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="Mcp" Title="SCP Presentados">
                <Template Context="data">
                    @data.Mcp
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="Mcvp" Title="SCP Totales">
                <Template Context="data">
                    @data.McpM
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <!-- Tabla de Totales -->
    <RadzenDataGrid PageSize="25" Density="Density.Compact" Data="@datos" TItem="Resin6DTO"
                    SelectionMode="DataGridSelectionMode.Single" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Resin6DTO" Property="Hdp" Title="Total Vaquillas PR Presentadas">
                <Template Context="data">
                    @data.Hdp
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}




@code {
    bool showDataLabels = false;
    bool confirmado = false;
    public BlazoredTypeahead<string,string> selectProv;
    public BlazoredTypeahead<InspectDTO, InspectDTO> selectIns;
    public DateTime FechaInicial { get; set; } = DateTime.Now.AddDays(-700);
    public DateTime FechaFinal { get; set; } = DateTime.Now;
    bool terminado = false;
    bool loading = false;

    bool download = false;
    List<Resin6DTO> filteredData = new List<Resin6DTO>();

    List<Resin1DTO> reportes = new();
    List<Resin6DTO> datos = new ();
    Dictionary<string,List<Resin6DTO>> listaDatos = new();
    List<Resin6DTO> datosActuales = new();
    List<InspectDTO> Inspects = null;
    List<string> provincias = new List<string> { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23","24" };
    IList<string>? provinciasSeleccionadas;
    IList<InspectDTO>? inspectoresSeleccionados;
    Dictionary<string, string> traductorProvinciaInverso = new Dictionary<string, string>
    {
        {"01", "Chaco"},
        {"02", "Corrientes"},
        {"03", "Entre Rios"},
        {"04", "Santa Fe"},
        {"05", "Cordoba"},
        {"06", "La pampa"},
        {"07", "San Luis"},
        {"08", "Santa Cruz"},
        {"09", "Tierra del fuego"},
        {"10", "Chubut"},
        {"11", "Neuquen"},
        {"12", "Rio negro"},
        {"13", "Buenos Aires"},
        {"14", "Capital Federal"},
        {"15", "Catamarca"},
        {"16", "Formosa"},
        {"17", "Jujuy"},
        {"18", "La rioja"},
        {"19", "Mendoza"},
        {"20", "Misiones"},
        {"21", "Salta"},
        {"22", "San Juan"},
        {"23", "Santiago Del Estero"},
        {"24", "Tucuman"},
        {"",""}
    };


    protected override async Task OnInitializedAsync()
    {
        try{
            var rt = await _resin6Servicio.ObtenerFechas(FechaInicial.Ticks,FechaFinal.Ticks);
            datos = rt.List;
            var rtaa = await _inspectServicio.LimitadosFiltrados(0, 0);
            Inspects = rtaa.List;
            terminado = true;


            Console.WriteLine(7);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    private async Task<IEnumerable<InspectDTO>> BuscarInspector(string searchText)
    {
        return await Task.FromResult(Inspects.Where(x => x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void SeleccionarTodos()
    {
        inspectoresSeleccionados = Inspects.ToList();
    }

    private void DeseleccionarTodos()
    {
        inspectoresSeleccionados.Clear(); 
    }



    private async Task<IEnumerable<string>> BuscarProvincia(string searchText)
    {
        return await Task.FromResult(provincias.Where(x => traductorProvinciaInverso[x].Contains(searchText.ToLower())).ToList());
    }

    private void SeleccionarTodasProvincias()
    {
        provinciasSeleccionadas = provincias.ToList(); 
    }

    private void DeseleccionarTodasProvincias()
    {
        provinciasSeleccionadas.Clear(); 
    }



  private void ConfirmarDatos()
{
    loading = true;
    Console.WriteLine("");

    // Filtrado de datos
    datos = listaDatos
        .Where(item =>
            item.Value.Any(d =>
                d.Resin1.Freali >= FechaInicial &&
                d.Resin1.Freali <= FechaFinal 
                && (provinciasSeleccionadas.Contains(d.Resin1.Establecimiento.Codpro)) &&
                (inspectoresSeleccionados?.Any(i => i.Icod == d.Resin1.Icod) ?? true) // Si inspectoresSeleccionados es null, no filtra por inspectores
            )
        )
        .SelectMany(item => item.Value)
        .ToList();

    Console.WriteLine(datos.Count);

    confirmado = true;
    terminado = true;
    loading = false;
}








    private async Task DescargarExcel()
    {
        var elements = datos;

        if (!elements.Any())
        {
            Console.WriteLine($"No se encontraron elementos para el tipo.");
            return;
        }

        Console.WriteLine("Generando Excel...");

        Stream stream = new MemoryStream();
        using (var excelPackage = new ExcelPackage())
        {
            // Crear primera tabla con encabezados: "Vaq PR"
            var worksheet1 = excelPackage.Workbook.Worksheets.Add("Reporte Vaq PR");

            string[] headers1 = { "Vaq PR Presentadas", "Vaq PR Marcadas", "Vaq PR Astadas" };
            for (int col = 0; col < headers1.Length; col++)
            {
                worksheet1.Cells[1, col + 1].Value = headers1[col];
                worksheet1.Cells[1, col + 1].Style.Font.Bold = true;
                worksheet1.Cells[1, col + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet1.Cells[1, col + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet1.Cells[1, col + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            }

            int row = 2;
            double? total1 = 0, total2 = 0, total3 = 0;
            foreach (var dato in elements)
            {
                worksheet1.Cells[row, 1].Value = dato.Hdp;
                worksheet1.Cells[row, 2].Value = dato.HdpM;
                worksheet1.Cells[row, 3].Value = dato.HdpAs;

                total1 += dato.Hdp;
                total2 += dato.HdpM;
                total3 += dato.HdpAs;

                row++;
            }

            // Mostrar los totales en la fila 2
            worksheet1.Cells[2, 4].Value = "Totales";
            worksheet1.Cells[2, 4].Style.Font.Bold = true;
            worksheet1.Cells[2, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            worksheet1.Cells[2, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
            worksheet1.Cells[2, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

            worksheet1.Cells[2, 1].Value = total1;
            worksheet1.Cells[2, 2].Value = total2;
            worksheet1.Cells[2, 3].Value = total3;

            // Crear segunda tabla con encabezados: "Vacas VIP"
            var worksheet2 = excelPackage.Workbook.Worksheets.Add("Reporte Vacas VIP");

            string[] headers2 = { "Vacas VIP Presentadas", "Vacas VIP Total", "Vaq VIP Presentadas", "Vaq VIP Total" };
            for (int col = 0; col < headers2.Length; col++)
            {
                worksheet2.Cells[1, col + 1].Value = headers2[col];
                worksheet2.Cells[1, col + 1].Style.Font.Bold = true;
                worksheet2.Cells[1, col + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet2.Cells[1, col + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet2.Cells[1, col + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            }

            row = 2;
            double? totalVacasVIP1 = 0, totalVacasVIP2 = 0, totalVaqVIP1 = 0, totalVaqVIP2 = 0;
            foreach (var dato in elements)
            {
                worksheet2.Cells[row, 1].Value = dato.Hgvp;
                worksheet2.Cells[row, 2].Value = dato.Hgvb;
                worksheet2.Cells[row, 3].Value = dato.Hgqp;
                worksheet2.Cells[row, 4].Value = dato.Hgqb;

                totalVacasVIP1 += dato.Hgvp;
                totalVacasVIP2 += dato.Hgvb;
                totalVaqVIP1 += dato.Hgqp;
                totalVaqVIP2 += dato.Hgqb;

                row++;
            }

            // Mostrar los totales en la fila 2
            worksheet2.Cells[2, 5].Value = "Totales";
            worksheet2.Cells[2, 5].Style.Font.Bold = true;
            worksheet2.Cells[2, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            worksheet2.Cells[2, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
            worksheet2.Cells[2, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

            worksheet2.Cells[2, 1].Value = totalVacasVIP1;
            worksheet2.Cells[2, 2].Value = totalVacasVIP2;
            worksheet2.Cells[2, 3].Value = totalVaqVIP1;
            worksheet2.Cells[2, 4].Value = totalVaqVIP2;

            // Crear tercera tabla con encabezados: "SCP & CP"
            var worksheet3 = excelPackage.Workbook.Worksheets.Add("Reporte SCP & CP");

            string[] headers3 = { "SCP Presentados", "SCP Mochos", "SCP Astados", "CP Presentados", "CP Mochos", "CP Astados", "CP Control S" };
            for (int col = 0; col < headers3.Length; col++)
            {
                worksheet3.Cells[1, col + 1].Value = headers3[col];
                worksheet3.Cells[1, col + 1].Style.Font.Bold = true;
                worksheet3.Cells[1, col + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet3.Cells[1, col + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet3.Cells[1, col + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            }

            row = 2;
            double? totalSCP1 = 0, totalSCP2 = 0, totalSCP3 = 0, totalCP1 = 0, totalCP2 = 0, totalCP3 = 0, totalCPControlS = 0;
            foreach (var dato in elements)
            {
                worksheet3.Cells[row, 1].Value = dato.Mcp;
                worksheet3.Cells[row, 2].Value = dato.McpM;
                worksheet3.Cells[row, 3].Value = dato.McpAs;
                worksheet3.Cells[row, 4].Value = dato.Msp;
                worksheet3.Cells[row, 5].Value = dato.MspM;
                worksheet3.Cells[row, 6].Value = dato.MspAs;
                worksheet3.Cells[row, 7].Value = dato.Mspsb;

                totalSCP1 += dato.Mcp;
                totalSCP2 += dato.McpM;
                totalSCP3 += dato.McpAs;
                totalCP1 += dato.Msp;
                totalCP2 += dato.MspM;
                totalCP3 += dato.MspAs;
                totalCPControlS += dato.Mspsb;

                row++;
            }

            // Mostrar los totales en la fila 2
            worksheet3.Cells[2, 8].Value = "Totales";
            worksheet3.Cells[2, 8].Style.Font.Bold = true;
            worksheet3.Cells[2, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            worksheet3.Cells[2, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
            worksheet3.Cells[2, 8].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

            worksheet3.Cells[2, 1].Value = totalSCP1;
            worksheet3.Cells[2, 2].Value = totalSCP2;
            worksheet3.Cells[2, 3].Value = totalSCP3;
            worksheet3.Cells[2, 4].Value = totalCP1;
            worksheet3.Cells[2, 5].Value = totalCP2;
            worksheet3.Cells[2, 6].Value = totalCP3;
            worksheet3.Cells[2, 7].Value = totalCPControlS;

            // Aplicar bordes a todas las celdas de cada hoja
            foreach (var worksheet in new[] { worksheet1, worksheet2, worksheet3 })
            {
                int colCount = worksheet.Dimension.End.Column;
                using (var range = worksheet.Cells[1, 1, row - 1, colCount])
                {
                    range.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    range.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    range.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    range.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                }
            }

            // Ajustar automáticamente el tamaño de las columnas
            worksheet1.Cells.AutoFitColumns();
            worksheet2.Cells.AutoFitColumns();
            worksheet3.Cells.AutoFitColumns();

            // Guardar y descargar
            var fileContents = excelPackage.GetAsByteArray();
            DateTime fechaHoy = DateTime.Now;
            var fileName = $"Reporte_{fechaHoy:dd_MM}.xlsx";
            var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            string url = $"data:{contentType};base64,{Convert.ToBase64String(fileContents)}";

            await _js.InvokeVoidAsync("saveAsFile", fileName, url);
        }
    }




    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}

