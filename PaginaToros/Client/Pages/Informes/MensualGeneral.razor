@page "/reportegeneral"
@using PaginaToros.Client.Servicios.Contrato
@using Radzen
@using Radzen.Blazor
@inject IResin1Servicio _resin1Servicio
@inject IResin6Servicio _resin6Servicio
@inject IInspectServicio _inspectServicio
@inject IJSRuntime _js

@using OfficeOpenXml
@using OfficeOpenXml.Style
@using System.Drawing

<style>
    @@page {
        margin: 0;
    }

    @@media-print {
        .row {
            break-inside: avoid
        }

        .no-print {
            display: none;
        }
    }

    button[disabled] {
        opacity: .6;
        cursor: not-allowed !important;
        pointer-events: none;
    }

    /* Pulso suave mientras está ocupado */
    .btn-busy {
        animation: pulse 0.9s ease-in-out infinite;
        transform-origin: center;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(0.985);
        }

        100% {
            transform: scale(1);
        }
    }

    .col-sm {
        display: block;
        min-height: 100px;
    }

    /* Altura máx + scroll en los paneles de dropdown Radzen */
    .rz-dropdown-panel {
        max-height: 320px !important;
        overflow: auto !important;
    }
</style>

<h2 class="font-bold text-2xl mb-4 text-center">
    Resumen General de Inspecciones
</h2>

<div class="row no-print">
    <div class="col-sm">
        <label>Seleccionar Fecha Inicial</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaInicial Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
    <div class="col-sm">
        <label>Seleccionar Fecha Final</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaFinal Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
    <div class="col-sm"></div>
</div>

<div class="row no-print">
    <div class="row no-print">
        <!-- Inspectores -->
        <div class="col-sm">
            <label>Selecciona Inspectores</label>
            <RadzenDropDown Data="@inspectOpts"
                            Multiple="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            TextProperty="Nombre"
                            ValueProperty="Icod"
                            Style="width:100%"
                            TValue="IEnumerable<string>"
                            @bind-Value="inspectoresSeleccionadosCods"
                            Placeholder="Busque por nombre" />
            <div class="flex gap-2 mt-1">
                <button class="no-print" @onclick="SeleccionarTodosInspectores"><FeatherCheck Color="green" Width="18" Height="18" /></button>
                <button class="no-print" @onclick="DeseleccionarTodosInspectores"><FeatherX Color="red" Width="18" Height="18" /></button>
            </div>
        </div>

        <!-- Provincias -->
        <div class="col-sm">
            <label>Selecciona Provincias</label>
            <RadzenDropDown Data="@provinciasOpts"
                            Multiple="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            TextProperty="Name"
                            ValueProperty="Code"
                            Style="width:100%"
                            TValue="IEnumerable<string>"
                            @bind-Value="provinciasSeleccionadas"
                            Placeholder="Busque por nombre" />
            <div class="flex gap-2 mt-1">
                <button class="no-print" @onclick="SeleccionarTodasProvincias"><FeatherCheck Color="green" Width="18" Height="18" /></button>
                <button class="no-print" @onclick="DeseleccionarTodasProvincias"><FeatherX Color="red" Width="18" Height="18" /></button>
            </div>
        </div>
    </div>
</div>

<br class="no-print" />
<div class="flex items-center gap-2 ml-2">
    <button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2 @(loading ? "btn-busy" : "")"
            style="position:relative;width:20%; margin-bottom:5px;"
            @onclick="OnGenerarClick"
            disabled="@(!terminado || confirmado || loading)">
        @if (loading)
        {
            <span><i class="fa fa-spinner fa-spin"></i> Cargando...</span>
        }
        else
        {
            <span>Generar Reporte</span>
        }
    </button>

    <button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2 @(download ? "btn-busy" : "")"
            style="position:relative;width:20%; margin-bottom:5px;"
            @onclick="OnDescargarClick"
            disabled="@(download || !(listaDatos?.Any() ?? false))">
        @if (download)
        {
            <span><i class="fa fa-spinner fa-spin"></i> Cargando...</span>
        }
        else
        {
            <span>Exportar Excel</span>
        }
    </button>

    <button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-100 hover:bg-gray-300 transition ease-in duration-100"
            style="position:relative;width:20%; margin-bottom:5px;"
            @onclick="ReiniciarFiltros"
            disabled="@loading">
        Reiniciar Filtros
    </button>
</div>

<br class="no-print" />
<br class="no-print" />

@if (confirmado)
{
    <div class="mt-4">
        @if (listaDatos != null)
        {
            double? vaqPRPresentadasTotal = 0;
            double? vaqPRMarcadasTotal = 0;
            double? vaqPRAstadasTotal = 0;
            double? vacasVIPPresentadasTotal = 0;
            double? vacasVIPTotal = 0;
            double? vaqVIPPresentadasTotal = 0;
            double? vaqVIPTotal = 0;
            double? scpPresentadosTotal = 0;
            double? scpMochosTotal = 0;
            double? scpAstadosTotal = 0;
            double? cpPresentadosTotal = 0;
            double? cpMochosTotal = 0;
            double? cpAstadosTotal = 0;
            double? cpControlSTotal = 0;

            @foreach (var grupo in listaDatos)
            {
                var datosFiltrados = grupo.Value;

                vaqPRPresentadasTotal += datosFiltrados.Sum(x => x.Hdp);
                vaqPRMarcadasTotal += datosFiltrados.Sum(x => x.HdpM);
                vaqPRAstadasTotal += datosFiltrados.Sum(x => x.HdpAs);

                vacasVIPPresentadasTotal += datosFiltrados.Sum(x => x.Hgvp);
                vacasVIPTotal += datosFiltrados.Sum(x => x.Hgvb);
                vaqVIPPresentadasTotal += datosFiltrados.Sum(x => x.Hgqp);
                vaqVIPTotal += datosFiltrados.Sum(x => x.Hgqb);

                scpPresentadosTotal += datosFiltrados.Sum(x => x.Mcp);
                scpMochosTotal += datosFiltrados.Sum(x => x.McpM);
                scpAstadosTotal += datosFiltrados.Sum(x => x.McpAs);
                cpPresentadosTotal += datosFiltrados.Sum(x => x.Msp);
                cpMochosTotal += datosFiltrados.Sum(x => x.MspM);
                cpAstadosTotal += datosFiltrados.Sum(x => x.MspAs);
                cpControlSTotal += datosFiltrados.Sum(x => x.Mspsb);
            }

            <div class="mt-4">
                <h3 class="font-bold text-xl mb-3">Resumen General de inspecciones Agrupado por @seleccion</h3>

                <h5 class="font-semibold text-sm mt-2 mb-1">Vaquillas PR</h5>
                <table class="table-auto w-full text-xs border mb-2">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="border px-2 py-1">Presentadas</th>
                            <th class="border px-2 py-1">Marcadas</th>
                            <th class="border px-2 py-1">Astadas</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border px-2 py-1">@vaqPRPresentadasTotal</td>
                            <td class="border px-2 py-1">@vaqPRMarcadasTotal</td>
                            <td class="border px-2 py-1">@vaqPRAstadasTotal</td>
                        </tr>
                    </tbody>
                </table>

                <h5 class="font-semibold text-sm mt-2 mb-1">Vacas VIP</h5>
                <table class="table-auto w-full text-xs border mb-2">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="border px-2 py-1">Vacas Presentadas</th>
                            <th class="border px-2 py-1">Vacas Total</th>
                            <th class="border px-2 py-1">Vaquillonas Presentadas</th>
                            <th class="border px-2 py-1">Vaquillonas Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border px-2 py-1">@vacasVIPPresentadasTotal</td>
                            <td class="border px-2 py-1">@vacasVIPTotal</td>
                            <td class="border px-2 py-1">@vaqVIPPresentadasTotal</td>
                            <td class="border px-2 py-1">@vaqVIPTotal</td>
                        </tr>
                    </tbody>
                </table>

                <h5 class="font-semibold text-sm mt-2 mb-1">SCP / CP</h5>
                <table class="table-auto w-full text-xs border mb-6">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="border px-2 py-1">SCP Presentados</th>
                            <th class="border px-2 py-1">SCP Mochos</th>
                            <th class="border px-2 py-1">SCP Astados</th>
                            <th class="border px-2 py-1">CP Presentados</th>
                            <th class="border px-2 py-1">CP Mochos</th>
                            <th class="border px-2 py-1">CP Astados</th>
                            <th class="border px-2 py-1">CP Control S</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border px-2 py-1">@scpPresentadosTotal</td>
                            <td class="border px-2 py-1">@scpMochosTotal</td>
                            <td class="border px-2 py-1">@scpAstadosTotal</td>
                            <td class="border px-2 py-1">@cpPresentadosTotal</td>
                            <td class="border px-2 py-1">@cpMochosTotal</td>
                            <td class="border px-2 py-1">@cpAstadosTotal</td>
                            <td class="border px-2 py-1">@cpControlSTotal</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>
}

@code {
    /* ======== MODELOS DE OPCIÓN ======== */
    public class ProvinceOption
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
    }

    /* ======== ESTADO ======== */
    bool showDataLabels = false;
    bool confirmado = false;

    public DateTime FechaInicial { get; set; } = DateTime.Now.AddDays(-700);
    public DateTime FechaFinal { get; set; } = DateTime.Now;
    bool terminado = false;
    bool loading = false;
    string seleccion = "";
    bool download = false;
    string agruparPor { get; set; } = "Inspectores";

    List<string> opciones = new() { "Inspectores", "Provincias" };
    List<Resin1DTO> reportes = new();
    List<Resin6DTO> datos = new();
    Dictionary<string, List<Resin6DTO>> listaDatos = new();
    List<Resin6DTO> datosActuales = new();
    List<InspectDTO>? Inspects = null;

    // Opciones para los dropdowns
    IEnumerable<InspectDTO> inspectOpts => Inspects ?? Enumerable.Empty<InspectDTO>();
    List<ProvinceOption> provinciasOpts = new();

    // Selecciones (códigos)
    IEnumerable<string> provinciasSeleccionadas { get; set; } = Array.Empty<string>();
    IEnumerable<string> inspectoresSeleccionadosCods { get; set; } = Array.Empty<string>();


    // Diccionario de códigos de provincia a nombre
    Dictionary<string, string> traductorProvinciaInverso = new()
    {
        {"01", "Chaco"},
        {"02", "Corrientes"},
        {"03", "Entre Rios"},
        {"04", "Santa Fe"},
        {"05", "Cordoba"},
        {"06", "La pampa"},
        {"07", "San Luis"},
        {"08", "Santa Cruz"},
        {"09", "Tierra del fuego"},
        {"10", "Chubut"},
        {"11", "Neuquen"},
        {"12", "Rio negro"},
        {"13", "Buenos Aires"},
        {"14", "Capital Federal"},
        {"15", "Catamarca"},
        {"16", "Formosa"},
        {"17", "Jujuy"},
        {"18", "La rioja"},
        {"19", "Mendoza"},
        {"20", "Misiones"},
        {"21", "Salta"},
        {"22", "San Juan"},
        {"23", "Santiago Del Estero"},
        {"24", "Tucuman"},
        {"",""}
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var rt = await _resin6Servicio.ObtenerFechas(FechaInicial.Ticks, FechaFinal.Ticks);
            datos = rt.List;

            var rtaa = await _inspectServicio.LimitadosFiltrados(0, 0);
            Inspects = rtaa.List ?? new List<InspectDTO>();

            provinciasOpts = traductorProvinciaInverso
                .Where(kv => !string.IsNullOrWhiteSpace(kv.Key))
                .Select(kv => new ProvinceOption { Code = kv.Key, Name = kv.Value })
                .OrderBy(p => p.Name)
                .ToList();

            terminado = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    /* ==== Botones seleccionar / deseleccionar ==== */
    private void SeleccionarTodosInspectores()
    {
        inspectoresSeleccionadosCods = (Inspects ?? new List<InspectDTO>())
            .Select(i => (i?.Icod ?? "").Trim())
            .Where(s => s != "")
            .Distinct()
            .ToList(); 
    }

    private void DeseleccionarTodosInspectores()
    {
        inspectoresSeleccionadosCods = Array.Empty<string>();
    }

    private void SeleccionarTodasProvincias()
    {
        provinciasSeleccionadas = provinciasOpts.Select(p => p.Code).ToList();
    }

    private void DeseleccionarTodasProvincias()
    {
        provinciasSeleccionadas = Array.Empty<string>();
    }

    public void ConfirmarDatos()
    {
        loading = true;
        try
        {
            // 1) Fecha (inclusiva)
            var q = datos.Where(x =>
                x.Resin1.Freali.HasValue &&
                x.Resin1.Freali.Value.Date >= FechaInicial.Date &&
                x.Resin1.Freali.Value.Date <= FechaFinal.Date);

            // 2) Filtros múltiples por códigos seleccionados
            var icodsSel = (inspectoresSeleccionadosCods ?? new List<string>())
                .Select(s => (s ?? "").Trim())
                .Where(s => s != "")
                .ToHashSet();

            var provSel = (provinciasSeleccionadas ?? new List<string>())
                .Select(p => (p ?? "").Trim())
                .Where(s => s != "")
                .ToHashSet();

            if (icodsSel.Count > 0)
                q = q.Where(x => icodsSel.Contains((x.Resin1.Icod ?? "").Trim()));

            if (provSel.Count > 0)
                q = q.Where(x => provSel.Contains((x.Resin1.Establecimiento?.Codpro ?? "").Trim()));

            var lista = q.ToList();

            listaDatos.Clear();
            if (agruparPor == "Inspectores")
            {
                foreach (var g in lista.GroupBy(x => (x.Resin1.Icod ?? "").Trim()))
                    listaDatos[g.Key] = g.ToList();
            }
            else if (agruparPor == "Provincias")
            {
                foreach (var g in lista.GroupBy(x => (x.Resin1.Establecimiento?.Codpro ?? "").Trim()))
                    listaDatos[g.Key] = g.ToList();
            }
            else
            {
                foreach (var g in lista.GroupBy(x => new
                {
                    I = (x.Resin1.Icod ?? "").Trim(),
                    P = (x.Resin1.Establecimiento?.Codpro ?? "").Trim()
                }))
                {
                    var key = $"{g.Key.I} | {g.Key.P}";
                    listaDatos[key] = g.ToList();
                }
            }

            confirmado = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al confirmar los datos: {ex.Message}");
        }
        loading = false;
    }

    private async Task DescargarExcel()
    {
        var elements = listaDatos.Values;

        if (!elements.Any())
        {
            Console.WriteLine("No se encontraron elementos.");
            return;
        }

        using var stream = new MemoryStream();
        using var excelPackage = new ExcelPackage();
        var ws = excelPackage.Workbook.Worksheets.Add("Reporte");

        // Acumuladores
        double? hdp = 0, hdpM = 0, hdpAs = 0;
        double? hgvp = 0, hgvb = 0, hgqp = 0, hgqb = 0;
        double? mcp = 0, mcpM = 0, mcpAs = 0;
        double? msp = 0, mspM = 0, mspAs = 0, mspsb = 0;

        foreach (var dato in elements)
        {
            hdp += dato.Sum(x => x.Hdp);
            hdpM += dato.Sum(x => x.HdpM);
            hdpAs += dato.Sum(x => x.HdpAs);

            hgvp += dato.Sum(x => x.Hgvp);
            hgvb += dato.Sum(x => x.Hgvb);
            hgqp += dato.Sum(x => x.Hgqp);
            hgqb += dato.Sum(x => x.Hgqb);

            mcp += dato.Sum(x => x.Mcp);
            mcpM += dato.Sum(x => x.McpM);
            mcpAs += dato.Sum(x => x.McpAs);

            msp += dato.Sum(x => x.Msp);
            mspM += dato.Sum(x => x.MspM);
            mspAs += dato.Sum(x => x.MspAs);
            mspsb += dato.Sum(x => x.Mspsb);
        }

        int row = 1;

        void AddSection(string title, string[] headers, object?[] values)
        {
            ws.Cells[row, 1].Value = title;
            ws.Cells[row, 1, row, headers.Length].Merge = true;
            ws.Cells[row, 1].Style.Font.Bold = true;
            ws.Cells[row, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            row++;

            for (int i = 0; i < headers.Length; i++)
            {
                ws.Cells[row, i + 1].Value = headers[i];
                ws.Cells[row, i + 1].Style.Font.Bold = true;
                ws.Cells[row, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                ws.Cells[row, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                ws.Cells[row, i + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            }
            row++;

            for (int i = 0; i < values.Length; i++)
            {
                ws.Cells[row, i + 1].Value = values[i] ?? "-";
            }

            row += 2; // Espacio entre secciones
        }

        AddSection("Vaquillas PR",
            new[] { "Presentadas", "Marcadas", "Astadas" },
            new object?[] { hdp, hdpM, hdpAs });

        AddSection("Vacas y Vaquillonas VIP",
            new[] { "Vacas Presentadas", "Vacas Total", "Vaquillonas Presentadas", "Vaquillonas Total" },
            new object?[] { hgvp, hgvb, hgqp, hgqb });

        AddSection("SCP / CP",
            new[] { "SCP Presentados", "SCP Mochos", "SCP Astados", "CP Presentados", "CP Mochos", "CP Astados", "CP Control S" },
            new object?[] { mcp, mcpM, mcpAs, msp, mspM, mspAs, mspsb });

        ws.Cells[1, 1, row - 1, 10].AutoFitColumns();

        // ===== Hoja 2: Inspecciones tomadas en cuenta =====
        var ws2 = excelPackage.Workbook.Worksheets.Add("Inspecciones");

        var resin1ConDetalles = listaDatos.Values
            .SelectMany(v => v)
            .Where(x => x.Resin1 != null)
            .GroupBy(x => x.Resin1.Id)
            .Select(g => new
            {
                Inspeccion = g.First().Resin1,
                Detalles = g.ToList()
            })
            .OrderBy(x => x.Inspeccion.Freali)
            .ToList();

        var mapInspect = (Inspects ?? new List<InspectDTO>())
            .GroupBy(i => i.Icod)
            .ToDictionary(g => g.Key, g => g.First().Nombre ?? "");

        // Encabezados
        ws2.Cells[1, 1].Value = "Nro Inspección (Id)";
        ws2.Cells[1, 2].Value = "Nro Solicitud";
        ws2.Cells[1, 3].Value = "Fecha";
        ws2.Cells[1, 4].Value = "Inspector";
        ws2.Cells[1, 5].Value = "Provincia";
        ws2.Cells[1, 6].Value = "Establecimiento (Codest)";
        ws2.Cells[1, 7].Value = "PR Presentadas (Hdp)";
        ws2.Cells[1, 8].Value = "VIP Vacas Presentadas (Hgvp)";
        ws2.Cells[1, 9].Value = "VIP Vaquillonas Presentadas (Hgqp)";
        ws2.Cells[1, 10].Value = "SCP Presentados (Mcp)";
        ws2.Cells[1, 11].Value = "CP Presentados (Msp)";

        int r2 = 2;
        foreach (var item in resin1ConDetalles)
        {
            var r = item.Inspeccion;
            var det = item.Detalles;

            var totalHdp = det.Sum(x => x.Hdp);
            var totalHgvp = det.Sum(x => x.Hgvp);
            var totalHgqp = det.Sum(x => x.Hgqp);
            var totalMcp = det.Sum(x => x.Mcp);
            var totalMsp = det.Sum(x => x.Msp);

            ws2.Cells[r2, 1].Value = r.Id;

            if (!string.IsNullOrWhiteSpace(r.Nrores) && r.Nrores.Trim().Length <= 10)
                ws2.Cells[r2, 2].Value = r.Nrores.Trim();
            else
                ws2.Cells[r2, 2].Value = "Sin solicitud";

            ws2.Cells[r2, 3].Value = r.Freali?.ToString("dd/MM/yyyy");
            ws2.Cells[r2, 4].Value = mapInspect.TryGetValue(r.Icod ?? "", out var nomInspector) ? nomInspector : "";
            ws2.Cells[r2, 5].Value = traductorProvinciaInverso.TryGetValue(r.Establecimiento?.Codpro ?? "", out var nomProv) ? nomProv : "";
            ws2.Cells[r2, 6].Value = r.Establecimiento?.Ecod;
            ws2.Cells[r2, 7].Value = totalHdp;
            ws2.Cells[r2, 8].Value = totalHgvp;
            ws2.Cells[r2, 9].Value = totalHgqp;
            ws2.Cells[r2, 10].Value = totalMcp;
            ws2.Cells[r2, 11].Value = totalMsp;

            r2++;
        }

        ws2.Cells[1, 1, 1, 11].Style.Font.Bold = true;
        ws2.Cells[1, 1, r2 - 1, 11].AutoFitColumns();

        var fileContents = excelPackage.GetAsByteArray();
        var fileName = $"Reporte_{DateTime.Now:dd_MM}.xlsx";
        var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        var url = $"data:{contentType};base64,{Convert.ToBase64String(fileContents)}";

        await _js.InvokeVoidAsync("saveAsFile", fileName, url);
    }

    private void ReiniciarFiltros()
    {
        FechaInicial = DateTime.Now.AddDays(-700);
        FechaFinal = DateTime.Now;

        seleccion = "";
        provinciasSeleccionadas = new List<string>();
        inspectoresSeleccionadosCods = new List<string>();

        listaDatos.Clear();
        datosActuales.Clear();
        reportes.Clear();
        confirmado = false;
        terminado = true;
        loading = false;
    }

    private async Task OnGenerarClick()
    {
        if (loading || confirmado) return;
        loading = true; StateHasChanged();
        try { ConfirmarDatos(); }
        finally { loading = false; StateHasChanged(); }
    }

    private async Task OnDescargarClick()
    {
        if (download) return;
        download = true; StateHasChanged();
        try { await DescargarExcel(); }
        finally { download = false; StateHasChanged(); }
    }

    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}
