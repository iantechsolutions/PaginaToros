@page "/reportegeneral"
@using PaginaToros.Client.Servicios.Contrato
@using Radzen
@using Radzen.Blazor
@inject IResin1Servicio _resin1Servicio
@inject IResin6Servicio _resin6Servicio
@inject IInspectServicio _inspectServicio
@inject IJSRuntime _js

@using OfficeOpenXml
@using OfficeOpenXml.Style
@using System.Drawing

<style>
    @@page {
        margin: 0;
    }

    @@media-print {
        .row {
            break-inside: avoid
        }

        .no-print {
            display: none;
        }
    }

    button[disabled] {
        opacity: .6;
        cursor: not-allowed !important;
        pointer-events: none;
    }

    .btn-busy {
        animation: pulse 0.9s ease-in-out infinite;
        transform-origin: center;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(0.985);
        }

        100% {
            transform: scale(1);
        }
    }

    .col-sm {
        display: block;
        min-height: 100px;
    }

    .rz-dropdown-panel {
        max-height: 320px !important;
        overflow: auto !important;
    }
</style>

<h2 class="font-bold text-2xl mb-4 text-center">
    Resumen General de Inspecciones
</h2>

<div class="row no-print">
    <div class="col-sm">
        <label>Seleccionar Fecha Inicial</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaInicial Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
    <div class="col-sm">
        <label>Seleccionar Fecha Final</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaFinal Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
    <div class="col-sm"></div>
</div>

<div class="row no-print">
    <div class="row no-print">
        <!-- Inspectores -->
        <div class="col-sm">
            <label>Selecciona Inspectores</label>
            <RadzenDropDown Data="@inspectOpts"
                            Multiple="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            TextProperty="Nombre"
                            ValueProperty="Icod"
                            Style="width:100%"
                            TValue="IEnumerable<string>"
                            @bind-Value="inspectoresSeleccionadosCods"
                            Placeholder="Busque por nombre" />
            <div class="flex gap-2 mt-1">
                <button class="no-print" @onclick="SeleccionarTodosInspectores"><FeatherCheck Color="green" Width="18" Height="18" /></button>
                <button class="no-print" @onclick="DeseleccionarTodosInspectores"><FeatherX Color="red" Width="18" Height="18" /></button>
            </div>
        </div>

        <!-- Provincias -->
        <div class="col-sm">
            <label>Selecciona Provincias</label>
            <RadzenDropDown Data="@provinciasOpts"
                            Multiple="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            TextProperty="Name"
                            ValueProperty="Code"
                            Style="width:100%"
                            TValue="IEnumerable<string>"
                            @bind-Value="provinciasSeleccionadas"
                            Placeholder="Busque por nombre" />
            <div class="flex gap-2 mt-1">
                <button class="no-print" @onclick="SeleccionarTodasProvincias"><FeatherCheck Color="green" Width="18" Height="18" /></button>
                <button class="no-print" @onclick="DeseleccionarTodasProvincias"><FeatherX Color="red" Width="18" Height="18" /></button>
            </div>
        </div>
    </div>
</div>

<br class="no-print" />
<div class="flex items-center gap-2 ml-2">
    <button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2 @(loading ? "btn-busy" : "")"
            style="position:relative;width:20%; margin-bottom:5px;"
            @onclick="OnGenerarClick"
            disabled="@(!terminado || confirmado || loading)">
        @if (loading)
        {
            <span><i class="fa fa-spinner fa-spin"></i> Cargando...</span>
        }
        else
        {
            <span>Generar Reporte</span>
        }
    </button>

    <button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2 @(download ? "btn-busy" : "")"
            style="position:relative;width:20%; margin-bottom:5px;"
            @onclick="OnDescargarClick"
            disabled="@(download || !(confirmado && (byProvince.Any() || byInspector.Any() || byMonth.Any())))">
        @if (download)
        {
            <span><i class="fa fa-spinner fa-spin"></i> Cargando...</span>
        }
        else
        {
            <span>Exportar Excel</span>
        }
    </button>

    <button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-100 hover:bg-gray-300 transition ease-in duration-100"
            style="position:relative;width:20%; margin-bottom:5px;"
            @onclick="ReiniciarFiltros"
            disabled="@loading">
        Reiniciar Filtros
    </button>
</div>

<br class="no-print" />
<br class="no-print" />

@if (confirmado)
{
    <div class="mt-4">
        <h3 class="font-bold text-xl mb-3">
            Resumen General — @FechaInicial.ToString("dd/MM/yyyy") a @FechaFinal.ToString("dd/MM/yyyy")
            (@listaFiltrada.Count inspecciones)
        </h3>

        <!-- HEMBRAS: PR y VIP en una sola fila -->
        <h5 class="font-semibold text-sm mt-2 mb-1">Hembras</h5>
        <div class="grid" style="grid-template-columns: repeat(2,minmax(0,1fr)); gap:10px;">
            <!-- PR -->
            <table class="table-auto w-full text-xs border mb-2">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border px-2 py-1" colspan="3">PR</th>
                    </tr>
                    <tr class="bg-gray-50">
                        <th class="border px-2 py-1">Presentadas</th>
                        <th class="border px-2 py-1">Marcadas</th>
                        <th class="border px-2 py-1">Rechazadas</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border px-2 py-1">@totalesGeneral.prPres</td>
                        <td class="border px-2 py-1">@totalesGeneral.prMarc</td>
                        <td class="border px-2 py-1">@totalesGeneral.prRech</td>
                    </tr>
                </tbody>
            </table>

            <!-- VIP -->
            <table class="table-auto w-full text-xs border mb-2">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border px-2 py-1" colspan="3">VIP</th>
                    </tr>
                    <tr class="bg-gray-50">
                        <th class="border px-2 py-1">Presentadas</th>
                        <th class="border px-2 py-1">Marcadas</th>
                        <th class="border px-2 py-1">Rechazadas</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border px-2 py-1">@totalesGeneral.vipPres</td>
                        <td class="border px-2 py-1">@totalesGeneral.vipMarc</td>
                        <td class="border px-2 py-1">@totalesGeneral.vipRech</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- MACHOS: SCP y CP en una sola fila -->
        <h5 class="font-semibold text-sm mt-3 mb-1">Machos</h5>
        <div class="grid" style="grid-template-columns: repeat(2,minmax(0,1fr)); gap:10px;">
            <!-- SCP -->
            <table class="table-auto w-full text-xs border mb-2">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border px-2 py-1" colspan="3">SCP (Sin Control de Producción)</th>
                    </tr>
                    <tr class="bg-gray-50">
                        <th class="border px-2 py-1">Presentados</th>
                        <th class="border px-2 py-1">Marcados</th>
                        <th class="border px-2 py-1">Rechazados</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border px-2 py-1">@totalesGeneral.scpPres</td>
                        <td class="border px-2 py-1">@totalesGeneral.scpMarc</td>
                        <td class="border px-2 py-1">@totalesGeneral.scpRech</td>
                    </tr>
                </tbody>
            </table>

            <!-- CP con S/ -->
            <table class="table-auto w-full text-xs border mb-2">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border px-2 py-1" colspan="4">CP (Con Control de Producción)</th>
                    </tr>
                    <tr class="bg-gray-50">
                        <th class="border px-2 py-1">Presentados</th>
                        <th class="border px-2 py-1">Marcados</th>
                        <th class="border px-2 py-1">Rechazados</th>
                        <th class="border px-2 py-1">S/</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border px-2 py-1">@totalesGeneral.cpPres</td>
                        <td class="border px-2 py-1">@totalesGeneral.cpMarc</td>
                        <td class="border px-2 py-1">@totalesGeneral.cpRech</td>
                        <td class="border px-2 py-1">@totalesGeneral.cpSBarra</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- ===================== POR PROVINCIA ===================== -->
        <h5 class="font-semibold text-sm mt-4 mb-1">Por Provincia</h5>
        <table class="table-auto w-full text-xs border mb-2">
            <thead>
                <tr class="bg-gray-100">
                    <th class="border px-2 py-1">Provincia</th>
                    <th class="border px-2 py-1">PR Pres</th>
                    <th class="border px-2 py-1">PR Marc</th>
                    <th class="border px-2 py-1">PR Rech</th>
                    <th class="border px-2 py-1">VIP Pres</th>
                    <th class="border px-2 py-1">VIP Marc</th>
                    <th class="border px-2 py-1">VIP Rech</th>
                    <th class="border px-2 py-1">SCP Pres</th>
                    <th class="border px-2 py-1">SCP Marc</th>
                    <th class="border px-2 py-1">SCP Rech</th>
                    <th class="border px-2 py-1">CP Pres</th>
                    <th class="border px-2 py-1">CP Marc</th>
                    <th class="border px-2 py-1">CP Rech</th>
                    <th class="border px-2 py-1">CP S/</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var kv in byProvince
               .Where(kv => !kv.Value.IsAllZero)
               .OrderByDescending(kv => kv.Value.TotalPresentadas))
                {
                    var code = kv.Key;
                    var c = kv.Value;
                    <tr>
                        <td class="border px-2 py-1">@SafeProvName(code)</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.prPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.prMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.prRech</td>

                        <td class="border px-2 py-1" style="text-align:right">@c.vipPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.vipMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.vipRech</td>

                        <td class="border px-2 py-1" style="text-align:right">@c.scpPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.scpMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.scpRech</td>

                        <td class="border px-2 py-1" style="text-align:right">@c.cpPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.cpMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.cpRech</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.cpSBarra</td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- ===================== POR INSPECTOR ===================== -->
        <h5 class="font-semibold text-sm mt-4 mb-1">Por Inspector</h5>
        <table class="table-auto w-full text-xs border mb-2">
            <thead>
                <tr class="bg-gray-100">
                    <th class="border px-2 py-1">Inspector</th>
                    <th class="border px-2 py-1">PR Pres</th>
                    <th class="border px-2 py-1">PR Marc</th>
                    <th class="border px-2 py-1">PR Rech</th>
                    <th class="border px-2 py-1">VIP Pres</th>
                    <th class="border px-2 py-1">VIP Marc</th>
                    <th class="border px-2 py-1">VIP Rech</th>
                    <th class="border px-2 py-1">SCP Pres</th>
                    <th class="border px-2 py-1">SCP Marc</th>
                    <th class="border px-2 py-1">SCP Rech</th>
                    <th class="border px-2 py-1">CP Pres</th>
                    <th class="border px-2 py-1">CP Marc</th>
                    <th class="border px-2 py-1">CP Rech</th>
                    <th class="border px-2 py-1">CP S/</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var kv in byInspector
               .Where(kv => !kv.Value.IsAllZero)
               .OrderByDescending(kv => kv.Value.TotalPresentadas))
                {
                    var code = kv.Key;
                    var c = kv.Value;
                    <tr>
                        <td class="border px-2 py-1">@SafeInspName(code)</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.prPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.prMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.prRech</td>

                        <td class="border px-2 py-1" style="text-align:right">@c.vipPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.vipMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.vipRech</td>

                        <td class="border px-2 py-1" style="text-align:right">@c.scpPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.scpMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.scpRech</td>

                        <td class="border px-2 py-1" style="text-align:right">@c.cpPres</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.cpMarc</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.cpRech</td>
                        <td class="border px-2 py-1" style="text-align:right">@c.cpSBarra</td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- ===== Resumen del inspector seleccionado (si hay 1) ===== -->
        @{
            var icodsSel = (inspectoresSeleccionadosCods ?? Array.Empty<string>())
            .Select(s => (s ?? "").Trim()).Where(s => s != "").Distinct().ToList();
        }
        @if (icodsSel.Count == 1)
        {
            var inspCode = icodsSel[0];
            var nombreInsp = SafeInspName(inspCode);
            var c = byInspector.TryGetValue(inspCode, out var vv) ? vv : new Counters();

            <h5 class="font-semibold text-sm mt-4 mb-1">Resumen del Inspector: @nombreInsp</h5>

            <div class="grid" style="grid-template-columns: repeat(2,minmax(0,1fr)); gap:10px;">
                <!-- General del inspector -->
                <table class="table-auto w-full text-xs border mb-2">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="border px-2 py-1" colspan="7">General</th>
                        </tr>
                        <tr class="bg-gray-50">
                            <th class="border px-2 py-1">PR Pres</th>
                            <th class="border px-2 py-1">PR Marc</th>
                            <th class="border px-2 py-1">PR Rech</th>
                            <th class="border px-2 py-1">VIP Pres</th>
                            <th class="border px-2 py-1">VIP Marc</th>
                            <th class="border px-2 py-1">VIP Rech</th>
                            <th class="border px-2 py-1">CP S/</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border px-2 py-1" style="text-align:right">@c.prPres</td>
                            <td class="border px-2 py-1" style="text-align:right">@c.prMarc</td>
                            <td class="border px-2 py-1" style="text-align:right">@c.prRech</td>
                            <td class="border px-2 py-1" style="text-align:right">@c.vipPres</td>
                            <td class="border px-2 py-1" style="text-align:right">@c.vipMarc</td>
                            <td class="border px-2 py-1" style="text-align:right">@c.vipRech</td>
                            <td class="border px-2 py-1" style="text-align:right">@c.cpSBarra</td>
                        </tr>
                    </tbody>
                </table>

                <!-- Por provincia del inspector -->
                <table class="table-auto w-full text-xs border mb-2">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="border px-2 py-1" colspan="14">Por Provincia (del inspector)</th>
                        </tr>
                        <tr class="bg-gray-50">
                            <th class="border px-2 py-1">Provincia</th>
                            <th class="border px-2 py-1">PR Pres</th>
                            <th class="border px-2 py-1">PR Marc</th>
                            <th class="border px-2 py-1">PR Rech</th>
                            <th class="border px-2 py-1">VIP Pres</th>
                            <th class="border px-2 py-1">VIP Marc</th>
                            <th class="border px-2 py-1">VIP Rech</th>
                            <th class="border px-2 py-1">SCP Pres</th>
                            <th class="border px-2 py-1">SCP Marc</th>
                            <th class="border px-2 py-1">SCP Rech</th>
                            <th class="border px-2 py-1">CP Pres</th>
                            <th class="border px-2 py-1">CP Marc</th>
                            <th class="border px-2 py-1">CP Rech</th>
                            <th class="border px-2 py-1">CP S/</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in listaFiltrada.Where(x => (x.Resin1.Icod ?? "").Trim() == inspCode)
                       .GroupBy(x => (x.Resin1.Establecimiento?.Codpro ?? "").Trim())
                       .Select(g => new { prov = g.Key, c = Aggregate(g) })
                       .Where(r => !r.c.IsAllZero)
                       .OrderByDescending(r => r.c.TotalPresentadas))
                        {
                            <tr>
                                <td class="border px-2 py-1">@SafeProvName(row.prov)</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.prPres</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.prMarc</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.prRech</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.vipPres</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.vipMarc</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.vipRech</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.scpPres</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.scpMarc</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.scpRech</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.cpPres</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.cpMarc</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.cpRech</td>
                                <td class="border px-2 py-1" style="text-align:right">@row.c.cpSBarra</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}

@code {
    /* ======== MODELOS DE OPCIÓN ======== */
    public class ProvinceOption
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
    }

    /* ======== ESTADO ======== */
    bool showDataLabels = false;
    bool confirmado = false;

    public DateTime FechaInicial { get; set; } = DateTime.Now.AddDays(-700);
    public DateTime FechaFinal { get; set; } = DateTime.Now;
    bool terminado = false;
    bool loading = false;
    bool download = false;

    List<Resin1DTO> reportes = new();
    List<Resin6DTO> datos = new();
    List<Resin6DTO> listaFiltrada = new();
    List<InspectDTO>? Inspects = null;

    // Opciones para los dropdowns
    IEnumerable<InspectDTO> inspectOpts => Inspects ?? Enumerable.Empty<InspectDTO>();
    List<ProvinceOption> provinciasOpts = new();

    // Selecciones (códigos)
    IEnumerable<string> provinciasSeleccionadas { get; set; } = Array.Empty<string>();
    IEnumerable<string> inspectoresSeleccionadosCods { get; set; } = Array.Empty<string>();

    // Diccionario de códigos de provincia a nombre
    Dictionary<string, string> traductorProvinciaInverso = new()
    {
        {"01", "Chaco"},
        {"02", "Corrientes"},
        {"03", "Entre Rios"},
        {"04", "Santa Fe"},
        {"05", "Cordoba"},
        {"06", "La pampa"},
        {"07", "San Luis"},
        {"08", "Santa Cruz"},
        {"09", "Tierra del fuego"},
        {"10", "Chubut"},
        {"11", "Neuquen"},
        {"12", "Rio negro"},
        {"13", "Buenos Aires"},
        {"14", "Capital Federal"},
        {"15", "Catamarca"},
        {"16", "Formosa"},
        {"17", "Jujuy"},
        {"18", "La rioja"},
        {"19", "Mendoza"},
        {"20", "Misiones"},
        {"21", "Salta"},
        {"22", "San Juan"},
        {"23", "Santiago Del Estero"},
        {"24", "Tucuman"},
        {"",""}
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var rt = await _resin6Servicio.ObtenerFechas(FechaInicial.Ticks, FechaFinal.Ticks);
            datos = rt.List;

            var rtaa = await _inspectServicio.LimitadosFiltrados(0, 0);
            Inspects = rtaa.List ?? new List<InspectDTO>();

            provinciasOpts = traductorProvinciaInverso
                .Where(kv => !string.IsNullOrWhiteSpace(kv.Key))
                .Select(kv => new ProvinceOption { Code = kv.Key, Name = kv.Value })
                .OrderBy(p => p.Name)
                .ToList();

            terminado = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    /* ==== Botones seleccionar / deseleccionar ==== */
    private void SeleccionarTodosInspectores()
    {
        inspectoresSeleccionadosCods = (Inspects ?? new List<InspectDTO>())
            .Select(i => (i?.Icod ?? "").Trim())
            .Where(s => s != "")
            .Distinct()
            .ToList();
    }

    private void DeseleccionarTodosInspectores()
    {
        inspectoresSeleccionadosCods = Array.Empty<string>();
    }

    private void SeleccionarTodasProvincias()
    {
        provinciasSeleccionadas = provinciasOpts.Select(p => p.Code).ToList();
    }

    private void DeseleccionarTodasProvincias()
    {
        provinciasSeleccionadas = Array.Empty<string>();
    }

    public void ConfirmarDatos()
    {
        loading = true;
        try
        {
            // 1) Filtrado por fecha
            var q = datos.Where(x =>
                x.Resin1.Freali.HasValue &&
                x.Resin1.Freali.Value.Date >= FechaInicial.Date &&
                x.Resin1.Freali.Value.Date <= FechaFinal.Date);

            // 2) Filtros múltiples por códigos
            var icodsSel = (inspectoresSeleccionadosCods ?? Enumerable.Empty<string>())
                .Select(s => (s ?? "").Trim()).Where(s => s != "").ToHashSet();

            var provSel = (provinciasSeleccionadas ?? Enumerable.Empty<string>())
                .Select(s => (s ?? "").Trim()).Where(s => s != "").ToHashSet();

            if (icodsSel.Count > 0)
                q = q.Where(x => icodsSel.Contains((x.Resin1.Icod ?? "").Trim()));

            if (provSel.Count > 0)
                q = q.Where(x => provSel.Contains((x.Resin1.Establecimiento?.Codpro ?? "").Trim()));

            // 3) Materializamos la lista filtrada
            listaFiltrada = q.ToList();

            // 4) Limpiamos pivotes y acumulamos en O(n)
            totalesGeneral = new();
            byProvince.Clear();
            byInspector.Clear();
            byMonth.Clear();
            byMonthProvince.Clear();
            byMonthInspector.Clear();

            foreach (var x in listaFiltrada)
            {
                totalesGeneral.AddFrom(x);

                var provKey = NormalizeProvKey(x.Resin1.Establecimiento?.Codpro);
                var inspKey = NormalizeInspKey(x.Resin1.Icod);
                var mKey = MonthKey(x.Resin1.Freali);

                GetOrCreate(byProvince, provKey).AddFrom(x);
                GetOrCreate(byInspector, inspKey).AddFrom(x);
                GetOrCreate(byMonth, mKey).AddFrom(x);
                GetOrCreate(byMonthProvince, (mKey, provKey)).AddFrom(x);
                GetOrCreate(byMonthInspector, (mKey, inspKey)).AddFrom(x);
            }

            confirmado = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al confirmar los datos: {ex.Message}");
        }
        loading = false;
    }

    private async Task DescargarExcel()
    {
        if (!byProvince.Any() && !byInspector.Any() && !byMonth.Any())
        {
            Console.WriteLine("No hay datos para exportar.");
            return;
        }

        using var stream = new MemoryStream();
        using var excel = new ExcelPackage();
        var wb = excel.Workbook;

        // ==== Sheet 1: General ====
        {
            var ws = wb.Worksheets.Add("General");
            int r = 1;

            void AddSection(string title, string[] headers, object?[] values)
            {
                ws.Cells[r, 1].Value = title;
                ws.Cells[r, 1, r, headers.Length].Merge = true;
                ws.Cells[r, 1].Style.Font.Bold = true;
                ws.Cells[r, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                r++;

                for (int i = 0; i < headers.Length; i++)
                {
                    ws.Cells[r, i + 1].Value = headers[i];
                    ws.Cells[r, i + 1].Style.Font.Bold = true;
                    ws.Cells[r, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[r, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                    ws.Cells[r, i + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                }
                r++;

                for (int i = 0; i < values.Length; i++)
                    ws.Cells[r, i + 1].Value = values[i] ?? "-";

                r += 2;
            }

            var g = totalesGeneral;

            // Hembras
            AddSection("Hembras PR",
                new[] { "Presentadas", "Marcadas", "Rechazadas" },
                new object?[] { g.prPres, g.prMarc, g.prRech });

            AddSection("Hembras VIP",
                new[] { "Presentadas", "Marcadas", "Rechazadas" },
                new object?[] { g.vipPres, g.vipMarc, g.vipRech });

            // Machos
            AddSection("Machos SCP (Sin Control)",
                new[] { "Presentados", "Marcados", "Rechazados" },
                new object?[] { g.scpPres, g.scpMarc, g.scpRech });

            AddSection("Machos CP (Con Control)",
                new[] { "Presentados", "Marcados", "Rechazados", "S/" },
                new object?[] { g.cpPres, g.cpMarc, g.cpRech, g.cpSBarra });

            ws.Cells[1, 1, r - 1, 10].AutoFitColumns();
        }

        // ==== Sheet 2: Por Provincia ====
        {
            var ws = wb.Worksheets.Add("Por Provincia");
            string[] headers = {
                "Provincia",
                "PR Pres","PR Marc","PR Rech",
                "VIP Pres","VIP Marc","VIP Rech",
                "SCP Pres","SCP Marc","SCP Rech",
                "CP Pres","CP Marc","CP Rech","CP S/",
                "Total Presentadas"
        };

            for (int i = 0; i < headers.Length; i++)
            {
                ws.Cells[1, i + 1].Value = headers[i];
                ws.Cells[1, i + 1].Style.Font.Bold = true;
                ws.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                ws.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            }

            int r = 2;
            foreach (var kv in byProvince
                .Where(kv => !kv.Value.IsAllZero)
                .OrderByDescending(kv => kv.Value.TotalPresentadas))
            {
                var name = SafeProvName(kv.Key);
                var c = kv.Value;
                int col = 1;

                ws.Cells[r, col++].Value = name;
                ws.Cells[r, col++].Value = c.prPres;
                ws.Cells[r, col++].Value = c.prMarc;
                ws.Cells[r, col++].Value = c.prRech;

                ws.Cells[r, col++].Value = c.vipPres;
                ws.Cells[r, col++].Value = c.vipMarc;
                ws.Cells[r, col++].Value = c.vipRech;

                ws.Cells[r, col++].Value = c.scpPres;
                ws.Cells[r, col++].Value = c.scpMarc;
                ws.Cells[r, col++].Value = c.scpRech;

                ws.Cells[r, col++].Value = c.cpPres;
                ws.Cells[r, col++].Value = c.cpMarc;
                ws.Cells[r, col++].Value = c.cpRech;
                ws.Cells[r, col++].Value = c.cpSBarra;

                ws.Cells[r, col++].Value = c.TotalPresentadas;
                r++;
            }

            ws.Cells[1, 1, Math.Max(2, r - 1), headers.Length].AutoFitColumns();
        }

        // ==== Sheet 3: Por Inspector ====
        // {
        //     var ws = wb.Worksheets.Add("Por Inspector");
        //     string[] headers = {
        //         "Inspector",
        //         "PR Pres","PR Marc","PR Rech",
        //         "VIP Pres","VIP Marc","VIP Rech",
        //         "SCP Pres","SCP Marc","SCP Rech",
        //         "CP Pres","CP Marc","CP Rech","CP S/",
        //         "Total Presentadas"
        // };

        //     for (int i = 0; i < headers.Length; i++)
        //     {
        //         ws.Cells[1, i + 1].Value = headers[i];
        //         ws.Cells[1, i + 1].Style.Font.Bold = true;
        //         ws.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
        //         ws.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
        //     }

        //     int r = 2;
        //     foreach (var kv in byInspector
        //         .Where(kv => !kv.Value.IsAllZero)
        //         .OrderByDescending(kv => kv.Value.TotalPresentadas))
        //     {
        //         var name = SafeInspName(kv.Key);
        //         var c = kv.Value;
        //         int col = 1;

        //         ws.Cells[r, col++].Value = name;
        //         ws.Cells[r, col++].Value = c.prPres;
        //         ws.Cells[r, col++].Value = c.prMarc;
        //         ws.Cells[r, col++].Value = c.prRech;

        //         ws.Cells[r, col++].Value = c.vipPres;
        //         ws.Cells[r, col++].Value = c.vipMarc;
        //         ws.Cells[r, col++].Value = c.vipRech;

        //         ws.Cells[r, col++].Value = c.scpPres;
        //         ws.Cells[r, col++].Value = c.scpMarc;
        //         ws.Cells[r, col++].Value = c.scpRech;

        //         ws.Cells[r, col++].Value = c.cpPres;
        //         ws.Cells[r, col++].Value = c.cpMarc;
        //         ws.Cells[r, col++].Value = c.cpRech;
        //         ws.Cells[r, col++].Value = c.cpSBarra;

        //         ws.Cells[r, col++].Value = c.TotalPresentadas;
        //         r++;
        //     }

        //     ws.Cells[1, 1, Math.Max(2, r - 1), headers.Length].AutoFitColumns();
        // }

        // ==== Sheet 4: Mensual (General) ====
        {
            var ws = wb.Worksheets.Add("Mensual - General");
            string[] headers = {
                "Mes (YYYY-MM)",
                "PR Pres","PR Marc","PR Rech",
                "VIP Pres","VIP Marc","VIP Rech",
                "SCP Pres","SCP Marc","SCP Rech",
                "CP Pres","CP Marc","CP Rech","CP S/",
                "Total Presentadas"
        };

            for (int i = 0; i < headers.Length; i++)
            {
                ws.Cells[1, i + 1].Value = headers[i];
                ws.Cells[1, i + 1].Style.Font.Bold = true;
                ws.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                ws.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            }

            int r = 2;
            foreach (var kv in byMonth
                .Where(kv => !kv.Value.IsAllZero)
                .OrderBy(kv => kv.Key))
            {
                var key = kv.Key;
                var c = kv.Value;
                int col = 1;

                ws.Cells[r, col++].Value = key;
                ws.Cells[r, col++].Value = c.prPres;
                ws.Cells[r, col++].Value = c.prMarc;
                ws.Cells[r, col++].Value = c.prRech;

                ws.Cells[r, col++].Value = c.vipPres;
                ws.Cells[r, col++].Value = c.vipMarc;
                ws.Cells[r, col++].Value = c.vipRech;

                ws.Cells[r, col++].Value = c.scpPres;
                ws.Cells[r, col++].Value = c.scpMarc;
                ws.Cells[r, col++].Value = c.scpRech;

                ws.Cells[r, col++].Value = c.cpPres;
                ws.Cells[r, col++].Value = c.cpMarc;
                ws.Cells[r, col++].Value = c.cpRech;
                ws.Cells[r, col++].Value = c.cpSBarra;

                ws.Cells[r, col++].Value = c.TotalPresentadas;
                r++;
            }

            ws.Cells[1, 1, Math.Max(2, r - 1), headers.Length].AutoFitColumns();
        }

        // ==== Sheet 5: Mensual por Provincia ====
        {
            var ws = wb.Worksheets.Add("Mensual - Provincia");
            string[] headers = {
                "Mes (YYYY-MM)","Provincia",
                "PR Pres","PR Marc","PR Rech",
                "VIP Pres","VIP Marc","VIP Rech",
                "SCP Pres","SCP Marc","SCP Rech",
                "CP Pres","CP Marc","CP Rech","CP S/",
                "Total Presentadas"
        };

            for (int i = 0; i < headers.Length; i++)
            {
                ws.Cells[1, i + 1].Value = headers[i];
                ws.Cells[1, i + 1].Style.Font.Bold = true;
                ws.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                ws.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            }

            int r = 2;
            foreach (var kv in byMonthProvince
                .Where(kv => !kv.Value.IsAllZero)
                .OrderBy(kv => kv.Key.month)
                .ThenByDescending(kv => kv.Value.TotalPresentadas))
            {
                var (month, prov) = kv.Key;
                var c = kv.Value;
                int col = 1;

                ws.Cells[r, col++].Value = month;
                ws.Cells[r, col++].Value = SafeProvName(prov);

                ws.Cells[r, col++].Value = c.prPres;
                ws.Cells[r, col++].Value = c.prMarc;
                ws.Cells[r, col++].Value = c.prRech;

                ws.Cells[r, col++].Value = c.vipPres;
                ws.Cells[r, col++].Value = c.vipMarc;
                ws.Cells[r, col++].Value = c.vipRech;

                ws.Cells[r, col++].Value = c.scpPres;
                ws.Cells[r, col++].Value = c.scpMarc;
                ws.Cells[r, col++].Value = c.scpRech;

                ws.Cells[r, col++].Value = c.cpPres;
                ws.Cells[r, col++].Value = c.cpMarc;
                ws.Cells[r, col++].Value = c.cpRech;
                ws.Cells[r, col++].Value = c.cpSBarra;

                ws.Cells[r, col++].Value = c.TotalPresentadas;
                r++;
            }

            ws.Cells[1, 1, Math.Max(2, r - 1), headers.Length].AutoFitColumns();
        }

        // ==== Sheet 6: Mensual por Inspector ====
        {
            var ws = wb.Worksheets.Add("Mensual - Inspector");
            string[] headers = {
                "Mes (YYYY-MM)","Inspector",
                "PR Pres","PR Marc","PR Rech",
                "VIP Pres","VIP Marc","VIP Rech",
                "SCP Pres","SCP Marc","SCP Rech",
                "CP Pres","CP Marc","CP Rech","CP S/",
                "Total Presentadas"
        };

            for (int i = 0; i < headers.Length; i++)
            {
                ws.Cells[1, i + 1].Value = headers[i];
                ws.Cells[1, i + 1].Style.Font.Bold = true;
                ws.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                ws.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            }

            int r = 2;
            foreach (var kv in byMonthInspector
                .Where(kv => !kv.Value.IsAllZero)
                .OrderBy(kv => kv.Key.month)
                .ThenByDescending(kv => kv.Value.TotalPresentadas))
            {
                var (month, insp) = kv.Key;
                var c = kv.Value;
                int col = 1;

                ws.Cells[r, col++].Value = month;
                ws.Cells[r, col++].Value = SafeInspName(insp);

                ws.Cells[r, col++].Value = c.prPres;
                ws.Cells[r, col++].Value = c.prMarc;
                ws.Cells[r, col++].Value = c.prRech;

                ws.Cells[r, col++].Value = c.vipPres;
                ws.Cells[r, col++].Value = c.vipMarc;
                ws.Cells[r, col++].Value = c.vipRech;

                ws.Cells[r, col++].Value = c.scpPres;
                ws.Cells[r, col++].Value = c.scpMarc;
                ws.Cells[r, col++].Value = c.scpRech;

                ws.Cells[r, col++].Value = c.cpPres;
                ws.Cells[r, col++].Value = c.cpMarc;
                ws.Cells[r, col++].Value = c.cpRech;
                ws.Cells[r, col++].Value = c.cpSBarra;

                ws.Cells[r, col++].Value = c.TotalPresentadas;
                r++;
            }

            ws.Cells[1, 1, Math.Max(2, r - 1), headers.Length].AutoFitColumns();
        }

        var fileBytes = excel.GetAsByteArray();
        var fileName = $"Reporte_{DateTime.Now:yyyyMMdd_HHmm}.xlsx";
        var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        var url = $"data:{contentType};base64,{Convert.ToBase64String(fileBytes)}";
        await _js.InvokeVoidAsync("saveAsFile", fileName, url);
    }

    private void ReiniciarFiltros()
    {
        FechaInicial = DateTime.Now.AddDays(-700);
        FechaFinal = DateTime.Now;

        provinciasSeleccionadas = new List<string>();
        inspectoresSeleccionadosCods = new List<string>();

        listaFiltrada.Clear();
        totalesGeneral = new();
        byProvince.Clear();
        byInspector.Clear();
        byMonth.Clear();
        byMonthProvince.Clear();
        byMonthInspector.Clear();

        confirmado = false;
        terminado = true;
        loading = false;
    }

    private async Task OnGenerarClick()
    {
        if (loading || confirmado) return;
        loading = true; StateHasChanged();
        try { ConfirmarDatos(); }
        finally { loading = false; StateHasChanged(); }
    }

    private async Task OnDescargarClick()
    {
        if (download) return;
        download = true; StateHasChanged();
        try { await DescargarExcel(); }
        finally { download = false; StateHasChanged(); }
    }

    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");

    /* ======== MÉTRICAS NORMALIZADAS ======== */
    class Counters
    {
        // PR
        public double prPres, prMarc;
        // VIP
        public double vipPres, vipMarc;
        // SCP
        public double scpPres, scpMarc;
        // CP
        public double cpPres, cpMarc, cpSBarra;

        public double prRech => Math.Max(0, prPres - prMarc);
        public double vipRech => Math.Max(0, vipPres - vipMarc);
        public double scpRech => Math.Max(0, scpPres - scpMarc);
        public double cpRech => Math.Max(0, cpPres - cpMarc);

        public double TotalPresentadas => prPres + vipPres + scpPres + cpPres;

        public void AddFrom(Resin6DTO x)
        {
            prPres += x.Hdp ?? 0;
            prMarc += (x.HdpM ?? 0) + (x.HdpAs ?? 0);

            vipPres += (x.Hgvp ?? 0) + (x.Hgqp ?? 0);
            vipMarc += (x.Hgvb ?? 0) + (x.Hgqb ?? 0);

            scpPres += x.Mcp ?? 0;
            scpMarc += (x.McpM ?? 0) + (x.McpAs ?? 0);

            cpPres += x.Msp ?? 0;
            cpMarc += (x.MspM ?? 0) + (x.MspAs ?? 0);
            cpSBarra += x.Mspsb ?? 0;
        }

        public bool IsAllZero =>
            prPres == 0 && prMarc == 0 &&
            vipPres == 0 && vipMarc == 0 &&
            scpPres == 0 && scpMarc == 0 &&
            cpPres == 0 && cpMarc == 0 && cpSBarra == 0;
    }

    /* ======== DICCIONARIOS DE PIVOTE ======== */
    Counters totalesGeneral = new();
    Dictionary<string, Counters> byProvince = new();             // provCode -> Counters
    Dictionary<string, Counters> byInspector = new();            // inspCode -> Counters
    Dictionary<string, Counters> byMonth = new();                // "yyyy-MM" -> Counters
    Dictionary<(string month, string prov), Counters> byMonthProvince = new();
    Dictionary<(string month, string insp), Counters> byMonthInspector = new();

    /* ======== HELPERS ======== */
    static TTarget GetOrCreate<TKey, TTarget>(Dictionary<TKey, TTarget> dict, TKey key)
        where TKey : notnull
        where TTarget : new()
    {
        if (!dict.TryGetValue(key, out var val))
        {
            val = new TTarget();
            dict[key] = val;
        }
        return val;
    }

    string MonthKey(DateTime? dt)
    {
        if (!dt.HasValue) return "(Sin fecha)";
        return dt.Value.ToString("yyyy-MM");
    }

    string SafeProvName(string? code)
    {
        var c = (code ?? "").Trim();
        if (traductorProvinciaInverso.TryGetValue(c, out var name) && !string.IsNullOrWhiteSpace(name))
            return name;
        return "(Sin provincia)";
    }

    string SafeInspName(string? code)
    {
        var mapInspect = (Inspects ?? new List<InspectDTO>()).GroupBy(i => i.Icod)
            .ToDictionary(g => g.Key ?? "", g => g.First().Nombre ?? "");
        return mapInspect.TryGetValue((code ?? "").Trim(), out var n) && !string.IsNullOrWhiteSpace(n)
            ? n : "(Sin inspector)";
    }
    string NormalizeProvKey(string? code)
    {
        var c = (code ?? "").Trim();
        // Si existe en el traductor y tiene nombre, uso el código real
        if (traductorProvinciaInverso.TryGetValue(c, out var name) && !string.IsNullOrWhiteSpace(name))
            return c;
        // Si no, mando a una clave canónica
        return "__NONE_PROV__";
    }

    string NormalizeInspKey(string? code)
    {
        var c = (code ?? "").Trim();
        var exists = (Inspects ?? new List<InspectDTO>())
            .Any(i => ((i.Icod ?? "").Trim()) == c && !string.IsNullOrWhiteSpace(i.Nombre));
        return (exists && c != "") ? c : "__NONE_INSP__";
    }
    // Helper para “Por Provincia (del inspector)”
    Counters Aggregate(IEnumerable<Resin6DTO> items)
    {
        var c = new Counters();
        foreach (var x in items) c.AddFrom(x);
        return c;
    }
}
