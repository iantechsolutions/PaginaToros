@page "/reportegeneral"
@using PaginaToros.Client.Servicios.Contrato;
@using Blazored.Typeahead;
@inject IResin1Servicio _resin1Servicio;
@inject IResin6Servicio _resin6Servicio;
@inject IInspectServicio _inspectServicio;
@inject IJSRuntime _js

@using OfficeOpenXml
@using OfficeOpenXml.Style
@using System.Drawing


<style>
    @@page {
        margin: 0;
    }

    @@media-print {
        .row {
            break-inside: avoid
        }
        .no-print{
            display:none;
        }
    }

    .col-sm {
        display: block;
        min-height: 100px; 
    }
</style>


<div class="row no-print">
    <div class="col-sm">
        <label>Seleccionar Forma de agrupacion</label>
        <br />
        <RadzenDropDown @bind-Value=@seleccion Data=@opciones Disabled="terminado && confirmado" Style="width: 100%; max-width: 400px;" Change="OnSeleccionChange" />
    </div>

    <!-- Fecha Inicial y Final a la misma altura -->
    <div class="col-sm">
        <label>Seleccionar Fecha Inicial</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaInicial Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
    <div class="col-sm">
        <label>Seleccionar Fecha Final</label>
        <RadzenDatePicker TValue="DateTime" @bind-Value=@FechaFinal Disabled="terminado && confirmado" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
    </div>
</div>

<div class="row no-print">
    <!-- Condición para mostrar inspectores o provincias -->
    @if (seleccion == "Inspectores" && !confirmado)
    {
        <div class="col-sm">
            <label>Selecciona Inspectores a cubrir</label>

            <div class="flex items-center gap-2">
                <BlazoredTypeahead SearchMethod="BuscarInspector" @ref="selectIns"
                                   @bind-Values="inspectoresSeleccionados"
                                   EnableDropDown="true"
                                   Disabled="terminado && confirmado"
                                   placeholder="Busque por Nombre">
                    <SelectedTemplate Context="data">
                        @data.Nombre
                    </SelectedTemplate>
                    <ResultTemplate Context="data">
                        @data.Nombre
                    </ResultTemplate>
                </BlazoredTypeahead>

                <div class="flex items-center gap-2 ml-2">
                    <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                            transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                            @onclick="SeleccionarTodos">
                        <FeatherCheck Color="green" Width="18" Height="18"></FeatherCheck>
                    </button>
                    <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                            transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                            @onclick="DeseleccionarTodos">
                        <FeatherX Color="red" Width="18" Height="18"></FeatherX>
                    </button>
                </div>
            </div>
        </div>
    }
    else if (seleccion == "Provincias" && !confirmado)
    {
        <div class="col-sm">
            <label>Selecciona Provincias a cubrir</label>

            <div class="flex items-center gap-2">
                <BlazoredTypeahead SearchMethod="BuscarProvincia" @ref="selectProv"
                                   Disabled="terminado && confirmado"
                                   @bind-Values="provinciasSeleccionadas"
                                   EnableDropDown="true"
                                   placeholder="Busque por Nombre">
                    <SelectedTemplate Context="data">
                        @traductorProvinciaInverso[data]
                    </SelectedTemplate>
                    <ResultTemplate Context="data">
                        @traductorProvinciaInverso[data]
                    </ResultTemplate>
                </BlazoredTypeahead>

                <div class="flex items-center gap-2 ml-2">
                    <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                            transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                            @onclick="SeleccionarTodasProvincias">
                        <FeatherCheck Color="green" Width="18" Height="18"></FeatherCheck>
                    </button>
                    <button class="no-print p-1 rounded-full bg-transparent hover:bg-gray-300 transition ease-in duration-100
                            transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center"
                            @onclick="DeseleccionarTodasProvincias">
                        <FeatherX Color="red" Width="18" Height="18"></FeatherX>
                    </button>
                </div>
            </div>
        </div>
    }
</div>



<br class="no-print" />
<div class="flex items-center gap-2 ml-2">
<button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2"
        style="position:relative;width:20%; margin-bottom:5px;"
        @onclick="()=>ConfirmarDatos()"
        disabled="@(!terminado || confirmado)">

    @if (loading)
    {
        <span>
            <i class="fa fa-spinner fa-spin"></i> Cargando...
        </span>
    }
    Generar Reporte
</button>
<button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-200 hover:bg-gray-300 hover:border-transparent transition ease-in duration-100 transform hover:-translate-y-1 active:translate-y-0 flex items-center justify-center gap-2"
        style="position:relative;width:20%; margin-bottom:5px;"
    @onclick="() =>DescargarExcel()">
    Exportar Excel
    @if (download)
    {
        <span>
            <i class="fa fa-spinner fa-spin"></i> Cargando...
        </span>
    }
</button>
    <button class="no-print font-bold px-4 py-3 rounded-2xl bg-gray-100 hover:bg-gray-300 transition ease-in duration-100"
            style="position:relative;width:20%; margin-bottom:5px;"
            @onclick="ReiniciarFiltros">
        Reiniciar Filtros
    </button>

</div>

<br class="no-print"/>
<br class="no-print"/>



@if (confirmado)
{
    <div class="mt-4">

        @if (listaDatos != null)
        {
            
        double? vaqPRPresentadasTotal = 0;
        double? vaqPRMarcadasTotal = 0;
        double? vaqPRAstadasTotal = 0;
        double? vacasVIPPresentadasTotal = 0;
        double? vacasVIPTotal = 0;
        double? vaqVIPPresentadasTotal = 0;
        double? vaqVIPTotal = 0;
        double? scpPresentadosTotal = 0;
        double? scpMochosTotal = 0;
        double? scpAstadosTotal = 0;
        double? cpPresentadosTotal = 0;
        double? cpMochosTotal = 0;
        double? cpAstadosTotal = 0;
        double? cpControlSTotal = 0;

        @foreach (var grupo in listaDatos)
        {
            var datosFiltrados = grupo.Value;

            vaqPRPresentadasTotal += datosFiltrados.Sum(x => x.Hdp);
            vaqPRMarcadasTotal += datosFiltrados.Sum(x => x.HdpM);
            vaqPRAstadasTotal += datosFiltrados.Sum(x => x.HdpAs);

            vacasVIPPresentadasTotal += datosFiltrados.Sum(x => x.Hgvp);
            vacasVIPTotal += datosFiltrados.Sum(x => x.Hgvb);
            vaqVIPPresentadasTotal += datosFiltrados.Sum(x => x.Hgqp);
            vaqVIPTotal += datosFiltrados.Sum(x => x.Hgqb);

            scpPresentadosTotal += datosFiltrados.Sum(x => x.Mcp);
            scpMochosTotal += datosFiltrados.Sum(x => x.McpM);
            scpAstadosTotal += datosFiltrados.Sum(x => x.McpAs);
            cpPresentadosTotal += datosFiltrados.Sum(x => x.Msp);
            cpMochosTotal += datosFiltrados.Sum(x => x.MspM);
            cpAstadosTotal += datosFiltrados.Sum(x => x.MspAs);
            cpControlSTotal += datosFiltrados.Sum(x => x.Mspsb);

        }
        <div class="mt-4">
                <h3 class="font-bold text-xl mb-3">Resumen General Agrupado por @seleccion</h3>

            <!-- Tabla general: Vaquillas PR -->
            <h5 class="font-semibold text-sm mt-2 mb-1">Vaquillas PR</h5>
            <table class="table-auto w-full text-xs border mb-2">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border px-2 py-1">Presentadas</th>
                        <th class="border px-2 py-1">Marcadas</th>
                        <th class="border px-2 py-1">Astadas</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border px-2 py-1">@vaqPRPresentadasTotal</td>
                        <td class="border px-2 py-1">@vaqPRMarcadasTotal</td>
                        <td class="border px-2 py-1">@vaqPRAstadasTotal</td>
                    </tr>
                </tbody>
            </table>

            <!-- Tabla general: VIP -->
            <h5 class="font-semibold text-sm mt-2 mb-1">Vacas VIP</h5>
            <table class="table-auto w-full text-xs border mb-2">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border px-2 py-1">Vacas Presentadas</th>
                        <th class="border px-2 py-1">Vacas Total</th>
                        <th class="border px-2 py-1">Vaquillonas Presentadas</th>
                        <th class="border px-2 py-1">Vaquillonas Total</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border px-2 py-1">@vacasVIPPresentadasTotal</td>
                        <td class="border px-2 py-1">@vacasVIPTotal</td>
                        <td class="border px-2 py-1">@vaqVIPPresentadasTotal</td>
                        <td class="border px-2 py-1">@vaqVIPTotal</td>
                    </tr>
                </tbody>
            </table>

            <!-- Tabla general: SCP / CP -->
            <h5 class="font-semibold text-sm mt-2 mb-1">SCP / CP</h5>
            <table class="table-auto w-full text-xs border mb-6">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border px-2 py-1">SCP Presentados</th>
                        <th class="border px-2 py-1">SCP Mochos</th>
                        <th class="border px-2 py-1">SCP Astados</th>
                        <th class="border px-2 py-1">CP Presentados</th>
                        <th class="border px-2 py-1">CP Mochos</th>
                        <th class="border px-2 py-1">CP Astados</th>
                        <th class="border px-2 py-1">CP Control S</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border px-2 py-1">@scpPresentadosTotal</td>
                        <td class="border px-2 py-1">@scpMochosTotal</td>
                        <td class="border px-2 py-1">@scpAstadosTotal</td>
                        <td class="border px-2 py-1">@cpPresentadosTotal</td>
                        <td class="border px-2 py-1">@cpMochosTotal</td>
                        <td class="border px-2 py-1">@cpAstadosTotal</td>
                        <td class="border px-2 py-1">@cpControlSTotal</td>
                    </tr>
                </tbody>
            </table>
        </div>


        }


     
    </div>
}







@code {
    bool showDataLabels = false;
    bool confirmado = false;
    public BlazoredTypeahead<string,string> selectProv;
    public BlazoredTypeahead<InspectDTO, InspectDTO> selectIns;
    public DateTime FechaInicial { get; set; } = DateTime.Now.AddDays(-700);
    public DateTime FechaFinal { get; set; } = DateTime.Now;
    bool terminado = false;
    bool loading = false;
    string seleccion = "";
    bool download = false;

    List<string> opciones = new List<string> { "Inspectores", "Provincias" };
    List<Resin1DTO> reportes = new();
    List<Resin6DTO> datos = new ();
    Dictionary<string,List<Resin6DTO>> listaDatos = new();
    List<Resin6DTO> datosActuales = new();
    List<InspectDTO> Inspects = null;
    List<string> provincias = new List<string> { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23","24" };
    IList<string> provinciasSeleccionadas;
    IList<InspectDTO> inspectoresSeleccionados;
    Dictionary<string, string> traductorProvinciaInverso = new Dictionary<string, string>
    {
        {"01", "Chaco"},
        {"02", "Corrientes"},
        {"03", "Entre Rios"},
        {"04", "Santa Fe"},
        {"05", "Cordoba"},
        {"06", "La pampa"},
        {"07", "San Luis"},
        {"08", "Santa Cruz"},
        {"09", "Tierra del fuego"},
        {"10", "Chubut"},
        {"11", "Neuquen"},
        {"12", "Rio negro"},
        {"13", "Buenos Aires"},
        {"14", "Capital Federal"},
        {"15", "Catamarca"},
        {"16", "Formosa"},
        {"17", "Jujuy"},
        {"18", "La rioja"},
        {"19", "Mendoza"},
        {"20", "Misiones"},
        {"21", "Salta"},
        {"22", "San Juan"},
        {"23", "Santiago Del Estero"},
        {"24", "Tucuman"},
        {"",""}
    };


    protected override async Task OnInitializedAsync()
    {
        try{
            var rt = await _resin6Servicio.ObtenerFechas(FechaInicial.Ticks,FechaFinal.Ticks);
            datos = rt.List;
            var rtaa = await _inspectServicio.LimitadosFiltrados(0, 0);
            Inspects = rtaa.List;
            terminado = true;


            Console.WriteLine(7);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

   

    private async Task<IEnumerable<InspectDTO>> BuscarInspector(string searchText)
    {
        return await Task.FromResult(Inspects.Where(x => x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void SeleccionarTodos()
    {
        inspectoresSeleccionados = Inspects.ToList();
    }

    private void DeseleccionarTodos()
    {
        inspectoresSeleccionados.Clear(); 
    }



    private async Task<IEnumerable<string>> BuscarProvincia(string searchText)
    {
        return await Task.FromResult(provincias.Where(x => traductorProvinciaInverso[x].Contains(searchText.ToLower())).ToList());
    }

    private void SeleccionarTodasProvincias()
    {
        provinciasSeleccionadas = provincias.ToList(); 
    }

    private void DeseleccionarTodasProvincias()
    {
        provinciasSeleccionadas.Clear(); 
    }



    public void ConfirmarDatos()
    {
        loading = true;
        try
        {

            // Paso 1: Filtrar por fecha
            var datosFiltradosPorFecha = datos
                .Where(x => x.Resin1.Freali >= FechaInicial.Date && x.Resin1.Freali <= FechaFinal.Date)
                .ToList();

            Console.WriteLine($"Datos luego de filtrar por fechas entre {FechaInicial:dd/MM/yyyy} y {FechaFinal:dd/MM/yyyy}");

            if (seleccion == "Provincias")
            {
                foreach (var provincia in provinciasSeleccionadas)
                {
                    var data = datosFiltradosPorFecha
                        .Where(x => x.Resin1.Establecimiento.Codpro == provincia)
                        .ToList();
                    listaDatos[provincia] = data;
                }
            }
            else
            {
                foreach (var ins in inspectoresSeleccionados)
                {
                    var data = datosFiltradosPorFecha
                        .Where(x => x.Resin1.Icod == ins.Icod)
                        .ToList();
                    listaDatos[ins.Icod] = data;
                }
            }

            confirmado = true;

            Console.WriteLine("Datos confirmados:");
            foreach (var kvp in listaDatos)
            {
                Console.WriteLine($"Clave: {kvp.Key}, Cantidad: {kvp.Value.Count}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al confirmar los datos: {ex.Message}");
        }

        loading = false;
    }


    private void OnSeleccionChange(object value)
    {
        if (seleccion == "Inspectores")
        {
            provinciasSeleccionadas.Clear(); 
        }
        else if (seleccion == "Provincias")
        {
            inspectoresSeleccionados.Clear(); 
        }
    }



    private async Task DescargarExcel()
    {
        var elements = listaDatos.Values;

        if (!elements.Any())
        {
            Console.WriteLine("No se encontraron elementos.");
            return;
        }

        Console.WriteLine("Generando Excel...");

        using var stream = new MemoryStream();
        using var excelPackage = new ExcelPackage();
        var ws = excelPackage.Workbook.Worksheets.Add("Reporte");

        // Acumuladores
        double? hdp = 0, hdpM = 0, hdpAs = 0;
        double? hgvp = 0, hgvb = 0, hgqp = 0, hgqb = 0;
        double? mcp = 0, mcpM = 0, mcpAs = 0;
        double? msp = 0, mspM = 0, mspAs = 0, mspsb = 0;

        foreach (var dato in elements)
        {
            hdp += dato.Sum(x => x.Hdp);
            hdpM += dato.Sum(x => x.HdpM);
            hdpAs += dato.Sum(x => x.HdpAs);

            hgvp += dato.Sum(x => x.Hgvp);
            hgvb += dato.Sum(x => x.Hgvb);
            hgqp += dato.Sum(x => x.Hgqp);
            hgqb += dato.Sum(x => x.Hgqb);

            mcp += dato.Sum(x => x.Mcp);
            mcpM += dato.Sum(x => x.McpM);
            mcpAs += dato.Sum(x => x.McpAs);

            msp += dato.Sum(x => x.Msp);
            mspM += dato.Sum(x => x.MspM);
            mspAs += dato.Sum(x => x.MspAs);
            mspsb += dato.Sum(x => x.Mspsb);
        }

        int row = 1;

        void AddSection(string title, string[] headers, object?[] values)
        {
            ws.Cells[row, 1].Value = title;
            ws.Cells[row, 1, row, headers.Length].Merge = true;
            ws.Cells[row, 1].Style.Font.Bold = true;
            ws.Cells[row, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            row++;

            for (int i = 0; i < headers.Length; i++)
            {
                ws.Cells[row, i + 1].Value = headers[i];
                ws.Cells[row, i + 1].Style.Font.Bold = true;
                ws.Cells[row, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                ws.Cells[row, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                ws.Cells[row, i + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            }
            row++;

            for (int i = 0; i < values.Length; i++)
            {
                ws.Cells[row, i + 1].Value = values[i] ?? "-";
            }

            row += 2; // Espacio entre secciones
        }

        AddSection("Vaquillas PR",
            new[] { "Presentadas", "Marcadas", "Astadas" },
            new object?[] { hdp, hdpM, hdpAs });

        AddSection("Vacas y Vaquillonas VIP",
            new[] { "Vacas Presentadas", "Vacas Total", "Vaquillonas Presentadas", "Vaquillonas Total" },
            new object?[] { hgvp, hgvb, hgqp, hgqb });

        AddSection("SCP / CP",
            new[] { "SCP Presentados", "SCP Mochos", "SCP Astados", "CP Presentados", "CP Mochos", "CP Astados", "CP Control S" },
            new object?[] { mcp, mcpM, mcpAs, msp, mspM, mspAs, mspsb });

        ws.Cells[1, 1, row - 1, 10].AutoFitColumns();

        var fileContents = excelPackage.GetAsByteArray();
        var fileName = $"Reporte_{DateTime.Now:dd_MM}.xlsx";
        var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        var url = $"data:{contentType};base64,{Convert.ToBase64String(fileContents)}";

        await _js.InvokeVoidAsync("saveAsFile", fileName, url);
    }


    private void ReiniciarFiltros()
    {
        // Fechas
        FechaInicial = DateTime.Now.AddDays(-700);
        FechaFinal = DateTime.Now;

        // Selección
        seleccion = "";
        provinciasSeleccionadas = new List<string>();
        inspectoresSeleccionados = new List<InspectDTO>();

        // Datos y estado
        listaDatos.Clear();
        datosActuales.Clear();
        reportes.Clear();
        confirmado = false;
        terminado = true; // Ya se cargaron en OnInitialized
        loading = false;
    }



    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");

}