@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@inject ISocioServicio _sociosServicio
@inject ITransanServicio _transanServicio
@inject IPlantelServicio _plantelServicio
@inject HttpClient http

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims



<style>
    .bm-title {
        font-size: 25px;
        font-weight: bold;
    }
</style>
@if(Planteles.Count>0){
<div class="card">
    <div class="card-body">
        <EditForm Model="@oTransan" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
                <div class="row" style="width=100%;">
                    <div class="col-sm">
                        <label class="col-sm">Nro Certificado</label>
                        <InputText @bind-Value="@oTransan.NroCert" class="form-control" placeholder="" />
                    </div>
                    <div class="col-sm">
                        <label>Fecha de venta</label><br />
                        <RadzenDatePicker TValue="DateTime?" @bind-Value="@oTransan.Fecvta"
                                          ShowTime="false" ShowSeconds="false"
                                          DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
                </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Socio Vendedor</label><br />
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Buscar por nombre" Disabled="IdSocio!=null" EnableDropDown="true" @bind-Value="socioVendedor">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-sm">
                    <label>Socio Comprador (Opcional)</label>
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Busque socio por nombre" EnableDropDown="true" TItem="SocioDTO" TValue="SocioDTO" Value="socioComprador" ValueChanged="updateComprador" ValueExpression="@(() => socioComprador)">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Hembras</label>
                    <InputNumber @bind-Value="@oTransan.CantHem" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oTransan.CantHem)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Machos</label>
                    <InputNumber @bind-Value="@oTransan.CantMach" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oTransan.CantMach)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Crias Hembras</label>
                    <InputNumber @bind-Value="@oTransan.CantChem" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oTransan.CantChem)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Crias Machos</label>
                    <InputNumber @bind-Value="@oTransan.CantCmach" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oTransan.CantCmach)" style="color:red;" />
                </div>
            </div>
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Plantel Origen</label>
                    <BlazoredTypeahead SearchMethod="BusquedaPlantelesVendedor" style="max-width:26.7%" placeholder="Busque plantel por numero" EnableDropDown="true" @bind-Value="plantelOrigen">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Placod
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Placod
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-sm">
                    <label>Plantel Destino</label>
                    <BlazoredTypeahead SearchMethod="BusquedaPlantelesComprador" style="max-width:26.7%" placeholder="Busque plantel por numero" EnableDropDown="true" @bind-Value="plantelDestino">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Placod
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Placod
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Tipo de Hembras</label>
                    <RadzenDropDown @bind-Value=@oTransan.Tipohem Data=@tiposHembra Style="width: 100%; max-width: 400px;" />
                    <ValidationMessage For="(()=> oTransan.Tipohem)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Tipo de Hacienda</label>
                    <RadzenDropDown @bind-Value=@temp1 Data=@tiposHacienda Style="width: 100%; max-width: 400px;" />
                    <ValidationMessage For="(()=> temp1)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Sexo de los Animales</label>
                    <RadzenDropDown @bind-Value=@temp2 Data=@sexoAnimales Style="width: 100%; max-width: 400px;" />
                    <ValidationMessage For="(()=> temp2)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Estado de las Hembras</label>
                    <RadzenDropDown @bind-Value=@temp3 Data=@estadoHembras Style="width: 100%; max-width: 400px;" />
                    <ValidationMessage For="(()=> temp3)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Animales a Incorporar?</label>
                    <RadzenDropDown @bind-Value=@temp4 Data=@incorporar Style="width: 100%; max-width: 400px;" />
                    <ValidationMessage For="(()=> temp4)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Mail del comprador</label>
                    <InputText @bind-Value="@direccionCompra" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> direccionCompra)" style="color:red;" />
                    <p>*Una vez seleccionado el socio se llenara este campo</p>
                </div>
            </div>
            <br />
                <div class="row mt-2" style="width=100%;">
                    <div class="col-sm d-flex align-items-center gap-2">
                        <InputCheckbox @bind-Value="enviarMail" />
                        <label class="m-0">Enviar mail al socio</label>
                    </div>
                </div>

            <br />

            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    TransanDTO oTransan = new();
    SocioDTO socioComprador = new();
    SocioDTO socioVendedor = new();
    List<SocioDTO> socios = new();
    IList<User> Usuarios;
    List<PlantelDTO> Planteles = new();
    List<string> tiposHembra = new List<string> { "VQ", "VA" };
    List<string> tiposHacienda = new List<string> { "PHPR (Puro Registrado)", "HPR (Puro Registrado)", "PHVIP (VIP)", "HVIP (VIP)" };
    List<string> sexoAnimales = new List<string> { "Hembras", "Machos" };
    List<string> estadoHembras = new List<string> { "Con Cria (CC)", "Con Cria y Preñada (CCP)", "Sin Servicio (SS)", "Preñada (PR)" };
    List<string> incorporar = new List<string> { "NO", "SI" };
    string temp1 = "";
    string temp2 = "";
    string temp3 = "";
    string temp4 = "";
    PlantelDTO plantelOrigen = new();
    PlantelDTO plantelDestino = new();
    bool enviarMail = true;


    private ClaimsPrincipal? user;




    Dictionary<string, string> traductor = new Dictionary<string, string>{
        {"PHPR (Puro Registrado)","PHPR"},
        {"HPR (Puro Registrado)","HPR"},
        {"PHVIP (VIP)","PHVIP"},
        {"HVIP (VIP)","HVIP"},
        {"Machos","M"},
        {"Hembras","H"},
        {"Con Cria (CC)","CC"},
        {"Con Cria y Preñada (CCP)","CCP"},
        {"Sin Servicio (SS)","SS"},
        {"Preñada (PR)","PR"},
        {"NO","0"},
        {"SI","1"}
    };
    Dictionary<string, string> traductorCarga = new Dictionary<string, string>{
        {"PHPR","PHPR (Puro Registrado)"},
        {"HPR","HPR (Puro Registrado)"},
        {"PHVIP","PHVIP (VIP)"},
        {"HVIP","HVIP (VIP)"},
        {"M","Machos"},
        {"H","Hembras"},
        {"CC","Con Cria (CC)"},
        {"CCP","Con Cria y Preñada (CCP)"},
        {"SS","Sin Servicio (SS)"},
        {"PR","Preñada (PR)"},
        {"0","NO"},
        {"1","SI"}
    };

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int? IdSocio { get; set; }
    string direccionCompra = "";







    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;



        Console.WriteLine(IdSocio);
        var rta = await _sociosServicio.LimitadosFiltrados(0, 0);
        socios = rta.List;


        var result = await http.GetAsync($"api/Account/GetUsers/TODO/TODO/1");

        var response = JsonSerializer.Deserialize<ResponseForList>(result.Content.ReadAsStringAsync().Result);
        Usuarios = JsonSerializer.Deserialize<IList<User>>(response.EntitiesPricipal);

        var rt = await _plantelServicio.LimitadosFiltradosNoInclude(0, 0);
        Planteles = rt.List;
        if (IdSocio != null && IdSocio != 0)
        {
            
        socioVendedor = socios.FirstOrDefault(x => x.Id == IdSocio);
        }

        if (Id != 0)
        {
            try
            {
                string filtro = $"Id = {Id}";
                var r = await _transanServicio.LimitadosFiltrados(0,1,filtro);
                oTransan = r.List.FirstOrDefault();
                oTransan.Fecvta = DateTime.Now;
                socioComprador = socios.Where(x => x.Scod == oTransan.Scom).First();
                socioVendedor = socios.Where(x => x.Scod == oTransan.Sven).First();
                plantelOrigen = Planteles.Where(x => x.Placod == oTransan.Plant).First();
                plantelDestino = Planteles.Where(x => x.Placod == oTransan.NvoPla).First();
                temp1 = traductorCarga[oTransan.Tiphac];
                temp2 = traductorCarga[oTransan.Tipani];
                temp3 = traductorCarga[oTransan.Hemsta];
                temp4 = traductorCarga[oTransan.Incorp.ToString()];
            }
            catch (Exception ex)
            {
            }
        }
    }
    async Task Guardar()
    {
        // --- Validaciones duras (todo obligatorio) ---
        var errores = new List<string>();

        if (oTransan.Fecvta == null) errores.Add("La fecha de venta es obligatoria.");

        var hayVendedor = socioVendedor != null && socioVendedor.Id != 0 && !string.IsNullOrWhiteSpace(socioVendedor.Scod);
        if (!hayVendedor) errores.Add("Debés seleccionar un Socio Vendedor.");

        // >>> Comprador ahora es OPCIONAL
        var hayComprador = socioComprador != null && socioComprador.Id != 0 && !string.IsNullOrWhiteSpace(socioComprador.Scod);

        var hayPlantelOrigen = plantelOrigen != null && !string.IsNullOrWhiteSpace(plantelOrigen.Placod);
        if (!hayPlantelOrigen) errores.Add("Debés seleccionar el Plantel Origen.");

        var hayPlantelDestino = plantelDestino != null && !string.IsNullOrWhiteSpace(plantelDestino.Placod);
        if (!hayPlantelDestino) errores.Add("Debés seleccionar el Plantel Destino.");

        if (string.IsNullOrWhiteSpace(temp1)) errores.Add("Debés seleccionar el Tipo de Hacienda.");
        if (string.IsNullOrWhiteSpace(temp2)) errores.Add("Debés seleccionar el Sexo de los Animales.");
        if (string.IsNullOrWhiteSpace(temp3)) errores.Add("Debés seleccionar el Estado de las Hembras.");
        if (string.IsNullOrWhiteSpace(temp4)) errores.Add("Debés indicar si los animales se incorporan.");

        int cantHem = oTransan.CantHem ?? 0;
        int cantMach = oTransan.CantMach ?? 0;
        int cantChem = oTransan.CantChem ?? 0;
        int cantCmach = oTransan.CantCmach ?? 0;

        if (cantHem < 0 || cantMach < 0 || cantChem < 0 || cantCmach < 0)
            errores.Add("Las cantidades no pueden ser negativas.");

        if ((cantHem + cantMach + cantChem + cantCmach) == 0)
            errores.Add("Debés ingresar al menos 1 animal en total.");

        // Si va a enviar mail, necesitamos al menos un destinatario válido
        if (enviarMail)
        {
            var hayMailVendedor = !string.IsNullOrWhiteSpace(socioVendedor?.Mail);
            var hayMailComprador = hayComprador && (!string.IsNullOrWhiteSpace(direccionCompra) || !string.IsNullOrWhiteSpace(socioComprador?.Mail));

            if (!hayMailVendedor && !hayMailComprador)
                errores.Add("Para enviar el mail, necesitamos al menos un correo válido (vendedor o comprador).");
        }

        if (errores.Count > 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Faltan datos",
                    Html = $"<ul style='text-align:left;margin-left:12px'>{string.Join("", errores.Select(e => $"<li>{e}</li>"))}</ul>",
                    Icon = SweetAlertIcon.Warning
                });
            return;
        }

        // --- Mapear selects a códigos internos ---
        // --- Mapear selects a códigos internos ---
        oTransan.Tiphac = traductor[temp1];            // PHPR/HPR/PHVIP/HVIP
        oTransan.Tipani = traductor[temp2];            // H/M
        oTransan.Hemsta = traductor[temp3];            // CC/CCP/SS/PR
        oTransan.Incorp = Convert.ToSByte(traductor[temp4]); // 0/1

        // --- Socios
        oTransan.Vnom = socioVendedor.Nombre;
        oTransan.Sven = socioVendedor.Scod?.ToString();

        oTransan.Cnom = hayComprador ? socioComprador.Nombre : null;
        oTransan.Scom = hayComprador ? socioComprador.Scod?.ToString() : null;

        // --- Planteles
        oTransan.Plant = plantelOrigen.Placod;
        oTransan.NvoPla = plantelDestino.Placod;

        // --- Guardar (crear/editar) ---
        if (Id == 0)
        {
            await _transanServicio.Crear(oTransan);

            if (enviarMail)
                await EnviarMailNuevaTransferencia();

            await ModalInstance.CloseAsync(ModalResult.Ok("Creado"));
        }
        else
        {
            await _transanServicio.Editar(oTransan);

            if (enviarMail)
                await EnviarMailEdicionTransferencia();

            await ModalInstance.CloseAsync(ModalResult.Ok("Editado"));
        }
    }


    private async Task EnviarMailNuevaTransferencia()
    {
        int total = (oTransan.CantHem ?? 0) + (oTransan.CantMach ?? 0) + (oTransan.CantChem ?? 0) + (oTransan.CantCmach ?? 0);
        bool hayComprador = !string.IsNullOrWhiteSpace(oTransan.Scom);

        var mail = $"Aviso de nueva transferencia animal\n" +
                   $"Socio Vendedor: {socioVendedor.Nombre} - Plantel: {oTransan.Plant}\n" +
                   $"Socio Comprador: {(hayComprador ? socioComprador.Nombre : "(No informado)")}" +
                   $"{(hayComprador ? $" - Plantel: {oTransan.NvoPla}" : $" - Plantel: {oTransan.NvoPla}")}\n" +
                   $"Cantidad total de animales: {total}\n" +
                   $"Estado de las hembras: {oTransan.Hemsta}\n" +
                   $"Tipo de hembra: {oTransan.Tipohem}\n" +
                   $"Fecha de venta: {oTransan.Fecvta?.ToString("dd/MM/yyyy")}\n" +
                   $"Animales incorporados: {(oTransan.Incorp == 1 ? "SI" : "NO")}";

        var request = new
        {
            Vendedor = socioVendedor.Id,
            Comprador = hayComprador ? socioComprador.Id : 0,  // 0 si no hay
            Mail = mail,
            Direccion = hayComprador ? direccionCompra : null  // solo si tenemos mail directo del comprador
        };

        var response = await http.PostAsJsonAsync("api/Transan/SendMail", request);
        response.EnsureSuccessStatusCode();
    }
    private async Task EnviarMailEdicionTransferencia()
    {
        int total = (oTransan.CantHem ?? 0) + (oTransan.CantMach ?? 0) + (oTransan.CantChem ?? 0) + (oTransan.CantCmach ?? 0);
        bool hayComprador = !string.IsNullOrWhiteSpace(oTransan.Scom);

        var mail = $"Aviso de edición de transferencia animal\n" +
                   $"Socio Vendedor: {socioVendedor.Nombre}\n" +
                   $"Socio Comprador: {(hayComprador ? socioComprador.Nombre : "(No informado)")}\n" +
                   $"Cantidad total de animales: {total}\n" +
                   $"Estado de las hembras: {oTransan.Hemsta}\n" +
                   $"Tipo de hembra: {oTransan.Tipohem}\n" +
                   $"Fecha de venta: {oTransan.Fecvta?.ToString("dd/MM/yyyy")}\n" +
                   $"Animales incorporados: {(oTransan.Incorp == 1 ? "SI" : "NO")}";

        var request = new
        {
            Tipo = socioVendedor.Id,
            Clase = hayComprador ? socioComprador.Id : 0,
            Mail = mail,
            Nombre = socioVendedor.Nombre,
            MailCompra = hayComprador ? direccionCompra : null,
            MailVendedor = socioVendedor.Mail
        };

        var response = await http.PostAsJsonAsync("api/Transan/SendMailChange", request);
        response.EnsureSuccessStatusCode();
    }




    public class ChangeNotificationModel
    {
        public string Names { get; set; }
        public string Apellido { get; set; }
        public string Email { get; set; }

        public string Tipo { get; set; }
        public string Clase { get; set; }
        public string Detalle { get; set; }
    }



    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }

    protected async Task updateComprador(SocioDTO socio)
    {
        socioComprador = socio;

        Console.WriteLine(socio.Mail);

        var usuarioComprador = Usuarios.FirstOrDefault(x => x.SocioId == socio.Id);
        if (usuarioComprador != null)
        {
            direccionCompra = usuarioComprador.Email;
        }
        else if (socio.Mail != null)
        {
            direccionCompra = socio.Mail;
        }
        else
        {
            direccionCompra = string.Empty;
        }

        StateHasChanged();
    }

    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {

        var result = socios.Where(x => 
            // x.Criador=="S" &&
            x.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);

    }

    private async Task<IEnumerable<PlantelDTO>> BusquedaPlantelesComprador(string searchText)
    {
        if (socioComprador != null && !string.IsNullOrWhiteSpace(socioComprador.Scod))
        {
            return await Task.FromResult(
                Planteles.Where(x => x.Placod.Contains(searchText) && x.Nrocri == socioComprador.Scod).ToList()
            );
        }

        return await Task.FromResult(
            Planteles.Where(x => x.Placod.Contains(searchText)).ToList()
        );
    }

    private async Task<IEnumerable<PlantelDTO>> BusquedaPlantelesVendedor(string searchText)
    {
        return await Task.FromResult(Planteles.Where(x => x.Placod.Contains(searchText) && x.Nrocri == socioVendedor.Scod).ToList());
    }

}
