@using Blazored.Typeahead
@using PaginaToros.Client.Servicios.Contrato;
@inject ISocioServicio _sociosServicio
@inject IFutcontrolServicio _futcontrolServicio
@inject IPlantelServicio _plantelServicio
@inject HttpClient http

<style>
    .bm-title {
        font-size: 25px;
        font-weight: bold;
    }
</style>
@if(planteles.Count>0){
<div class="card">
    <div class="card-body">
        <EditForm Model="@oFutcontrol" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Nro de transferencia</label>
                    <InputText @bind-Value="@oFutcontrol.NroTrans" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> oFutcontrol.NroTrans)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Fecha de transferencia</label><br />
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="@oFutcontrol.Fectrans" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Socio Vendedor</label><br />
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Buscar por nombre" EnableDropDown="true" Disabled="IdSocio!=null" @bind-Value="socioVendedor">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-sm">
                    <label>Socio Comprador</label>
                        <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Busque socio por nombre" EnableDropDown="true" TItem="SocioDTO" TValue="SocioDTO" Value="socioComprador" ValueChanged="updateComprador" ValueExpression="@(() => socioComprador)">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <br/>
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Plantel Origen</label><br />
                    <BlazoredTypeahead SearchMethod="BusquedaPlantelesVendedor" placeholder="Buscar por nombre" EnableDropDown="true" @bind-Value="plantelOrigen">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Placod
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Placod
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-sm">
                    <label class="col-sm">Plantel Destino</label>
                    <BlazoredTypeahead SearchMethod="BusquedaPlantelesComprador" placeholder="Buscar por nombre" EnableDropDown="true" @bind-Value="plantelDestino">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Placod
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Placod
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <br/>
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Cantidad de Hembras</label>
                    <InputNumber @bind-Value="@oFutcontrol.CantHem" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oFutcontrol.CantHem)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Cantidad de Machos</label>
                    <InputNumber @bind-Value="@oFutcontrol.CantMach" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oFutcontrol.CantMach)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Estado de las hembras</label>
                    <RadzenDropDown @bind-Value=@oFutcontrol.Hemsta Data=@estadosHembra Style="width: 100%; max-width: 400px;" />
                    <ValidationMessage For="(()=> oFutcontrol.Hemsta)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Mail</label>
                    <InputText @bind-Value="@direccionCompra" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> direccionCompra)" style="color:red;" />
                     <p>*Una vez seleccionado el socio se llenara este campo</p>
                </div>
            </div>
            <br />
            <br />

            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <br />
            <RadzenProgressBar style="position:relative;width:93.5%" Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    FutcontrolDTO oFutcontrol = new();
    SocioDTO socioComprador = new();
    SocioDTO socioVendedor = new();
    List<SocioDTO> socios = new();
    string direccionCompra = "";
    IList<User> Usuarios;
    List<PlantelDTO> planteles = new();
    PlantelDTO? plantelOrigen = null;
    PlantelDTO? plantelDestino = null;
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int? IdSocio { get; set; }
    List<string> estadosHembra = new List<string> {"CC" ,"CCP", "SS","PR" };

    protected override async Task OnInitializedAsync()
    {
        var rta = await _sociosServicio.LimitadosFiltrados(0, 0);
        socios = rta.List;
        Console.WriteLine("1");
        var rt = await _plantelServicio.LimitadosFiltradosNoInclude(0, 0);
        planteles = rt.List;
        Console.WriteLine("2");
        var result = await http.GetAsync($"api/Account/GetUsers/TODO/TODO/1");
        var response = JsonSerializer.Deserialize<ResponseForList>(result.Content.ReadAsStringAsync().Result);
        Usuarios = JsonSerializer.Deserialize<IList<User>>(response.EntitiesPricipal);
        Console.WriteLine("3");
        if (IdSocio != null || IdSocio != 0)
        {
            socioVendedor = socios.Where(x => x.Id == IdSocio).FirstOrDefault();
        }
        Console.WriteLine("4");
        if (Id != 0)
        {
            try
            {
                string filtro = $"Id = {Id}";
                var r = await _futcontrolServicio.LimitadosFiltrados(0,1,filtro);
                oFutcontrol = r.List.FirstOrDefault();
                socioComprador = socios.Where(x => x.Scod == oFutcontrol.Scom).First();
                socioVendedor = socios.Where(x => x.Scod == oFutcontrol.Sven).First();
                plantelOrigen = planteles.Where(x=>x.Placod == oFutcontrol.Plantel).FirstOrDefault();
                plantelDestino = planteles.Where(x => x.Placod == oFutcontrol.PlantDest).FirstOrDefault();
            }
            catch (Exception ex)
            {
            }
        }
    }
    async Task Guardar()
    {
        oFutcontrol.Vnom = socioVendedor.Nombre;
        oFutcontrol.Cnom = socioComprador.Nombre;
        oFutcontrol.Sven = socioVendedor.Scod.ToString();
        oFutcontrol.Scom = socioComprador.Scod.ToString();
        try{
            oFutcontrol.Plantel = plantelOrigen.Placod;
        }
        catch{}
        try
        {
            oFutcontrol.PlantDest = plantelDestino.Placod;
        }
        catch{}
        if (Id == 0)
        {
            await _futcontrolServicio.Crear(oFutcontrol);
            var mail = $"Aviso de nueva transferencia Futuro Control \nNro de Transferencia: {oFutcontrol.NroTrans} \nSocio Vendedor: {socioVendedor.Nombre} \nSocio Comprador: {socioComprador.Nombre} \nCantidad de hembras: {oFutcontrol.CantHem} \nCantidad de machos: {oFutcontrol.CantMach} \nEstado de las hembras: {oFutcontrol.Hemsta}";
            var request = new
            {
                Vendedor = socioVendedor.Id,
                Comprador = socioComprador.Id,
                Mail = mail,
                Direccion = direccionCompra
            };
            HttpResponseMessage response = await http.PostAsJsonAsync($"api/Transan/SendMail", request);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await _futcontrolServicio.Editar(oFutcontrol);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }

    protected async Task updateComprador(SocioDTO socio)
    {
        socioComprador = socio;
        var usuarioComprador = Usuarios.Where(x => x.SocioId == socio.Id).ToList().First();
        direccionCompra = usuarioComprador.Email;
    }


    private async Task<IEnumerable<SocioDTO>> BusquedaSocios(string searchText)
    {
        var result = socios.Where(x => x.Criador=="S" &&  x.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }
    private async Task<IEnumerable<PlantelDTO>> BusquedaPlantelesComprador(string searchText)
    {
        var result = planteles.Where(x => x.Nrocri == socioComprador.Scod && x.Placod.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }
    private async Task<IEnumerable<PlantelDTO>> BusquedaPlantelesVendedor(string searchText)
    {
        var result = planteles.Where(x => x.Nrocri==socioVendedor.Scod  && x.Placod.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }
}

