@using Blazored.Typeahead
<style>
    .bm-title {
        font-size: 25px;
        font-weight: bold;
    }
</style>
<div class="card">
    <div class="card-body">
        <EditForm Model="@oFutcontrol" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Nro de transferencia</label>
                    <InputText @bind-Value="@oFutcontrol.NroTrans" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> oFutcontrol.NroTrans)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label>Fecha de transferencia</label><br />
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="@oFutcontrol.Fectrans" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                </div>
            </div>
            <br />
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label>Socio Vendedor</label><br />
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Buscar por nombre" EnableDropDown="true" @bind-Value="socioVendedor">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="col-sm">
                    <label class="col-sm">Socio Comprador</label>
                    <BlazoredTypeahead SearchMethod="BusquedaSocios" placeholder="Buscar por nombre" EnableDropDown="true" @bind-Value="socioComprador">
                        <SelectedTemplate Context="eleccion">
                            @eleccion.Nombre
                        </SelectedTemplate>
                        <ResultTemplate Context="eleccion">
                            @eleccion.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
@*             <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Año de nacimientos</label>
                    <InputText @bind-Value="@oTransan.CantHem" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> oTransan.CantHem)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Toros PR del año</label>
                    <InputText @bind-Value="@oTransan.CantMach" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> oTransan.CantMach)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Vacas PR del año</label>
                    <InputText @bind-Value="@oTransan.CantChem" class="form-control" placeholder=""></InputText>
                    <ValidationMessage For="(()=> oTransan.CantChem)" style="color:red;" />
                </div>
            </div> *@
            <br/>
            <div class="row" style="width=100%;">
                <div class="col-sm">
                    <label class="col-sm">Cantidad de Hembras</label>
                    <InputNumber @bind-Value="@oFutcontrol.CantHem" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oFutcontrol.CantHem)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Cantidad de Machos</label>
                    <InputNumber @bind-Value="@oFutcontrol.CantMach" class="form-control" placeholder=""></InputNumber>
                    <ValidationMessage For="(()=> oFutcontrol.CantMach)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Estado de las hembras</label>
                    <RadzenDropDown @bind-Value=@oFutcontrol.Hemsta Data=@estadosHembra Style="width: 100%; max-width: 400px;" />
                    <ValidationMessage For="(()=> oFutcontrol.Hemsta)" style="color:red;" />
                </div>
            </div>
            <br />
            <br />

            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>
@code {
    Futcontrol oFutcontrol = new();
    Respuesta<Futcontrol> oRespuesta = new();
    Socio socioComprador = new();
    Socio socioVendedor = new();
    List<Socio> socios = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int Id { get; set; }
    List<string> estadosHembra = new List<string> {"CC" ,"CCP", "SS","PR" };

    protected override async Task OnInitializedAsync()
    {
        var rta = await Http.GetFromJsonAsync<Respuesta<List<Socio>>>($"/api/socio");
        socios = rta.List.ToList();
        if (Id != 0)
        {
            try
            {
                oRespuesta = await Http.GetFromJsonAsync<Respuesta<Futcontrol>>($"/api/Futcontrol/{Id}");
                oFutcontrol = oRespuesta.List;
                socioComprador = socios.Where(x => x.Scod == oFutcontrol.Scom).First();
                socioVendedor = socios.Where(x => x.Scod == oFutcontrol.Sven).First();
            }
            catch (Exception ex)
            {
                oRespuesta.Mensaje = ex.Message;
            }
        }
    }
    async Task Guardar()
    {
        oFutcontrol.Vnom = socioVendedor.Nombre;
        oFutcontrol.Cnom = socioComprador.Nombre;
        oFutcontrol.Sven = socioVendedor.Scod.ToString();
        oFutcontrol.Scom = socioComprador.Scod.ToString();
        if (Id == 0)
        {
            await Http.PostAsJsonAsync<Futcontrol>("/api/Futcontrol", oFutcontrol);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await Http.PutAsJsonAsync<Futcontrol>("/api/Futcontrol", oFutcontrol);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }

    private async Task<IEnumerable<Socio>> BusquedaSocios(string searchText)
    {
        var result = socios.Where(x => x.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        return await Task.FromResult(result);
    }
}

