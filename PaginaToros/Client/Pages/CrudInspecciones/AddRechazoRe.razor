@using PaginaToros.Client.Servicios.Contrato;
@inject IResin8Servicio _resin8Servicio
<div class="card-body">
    <EditForm Model="@oResin8" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="row" style="width=100%;">
            <div class="col-sm-4">
                <label>Motivo de rechazo</label>
                <RadzenDropDown @bind-Value=@motivo Placeholder="Seleccione el motivo" Data=@motivos Style="width: 100%; max-width: 400px;" />
            </div>
            <div class="col-sm-4">
                <label>Hembras:</label>
                <RadzenNumeric @bind-Value=@oResin8.Hembras Style="width: 100%; max-width: 400px;" />
            </div>
            <div class="col-sm-4">
                <label>Machos:</label>
                <RadzenNumeric @bind-Value=@oResin8.Machos Style="width: 100%; max-width: 400px;" />
            </div>
        </div>
        <br/>
        <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
        <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
    </EditForm>
</div>
@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string nrores { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    Resin8DTO oResin8 = new();
    List<string> motivos = new List<string> { "Pelaje", "Estado", "Desarrollo", "Aplomo", "Estructura", "Conformacion", "Pureza", "Sanidad", "Otros" };
    string motivo = "";
    Dictionary<string, int> traductorMotivos = new Dictionary<string, int>{
    {"Pelaje",1},
    {"Estado",2},
    {"Desarrollo",3},
    {"Aplomo",4},
    {"Estructura",5},
    {"Conformacion",6},
    {"Pureza",7},
    {"Sanidad",8},
    {"Otros",9}
    };

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            try
            {
                var can = await _resin8Servicio.CantidadTotal();
                var rt = await _resin8Servicio.Lista(0,can.List);
                oResin8 = rt.List.Where(x=>x.Id==Id).FirstOrDefault();

            }
            catch (Exception ex)
            {
            }
        }
    }

    async Task Guardar()
    {
        oResin8.MotivoRechazo = traductorMotivos[motivo];
        if (Id == 0)
        {
            oResin8.Nrores = nrores;
            await _resin8Servicio.Crear(oResin8);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await _resin8Servicio.Editar(oResin8);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}